
02_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08005d88  08005d88  00015d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  080060a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  200001dc  0800627c  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000280  0800627c  00020280  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001403b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b62  00000000  00000000  00034240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009c0  00000000  00000000  00036da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000888  00000000  00000000  00037768  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000181ed  00000000  00000000  00037ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d1e3  00000000  00000000  000501dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000724b5  00000000  00000000  0005d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  000cf875  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000331c  00000000  00000000  000cf8f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d6c 	.word	0x08005d6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005d6c 	.word	0x08005d6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <adxl_write>:
uint8_t chipid = 0;
int16_t x,y,z;
float  xg, yg, zg;

void adxl_write(uint8_t reg, uint8_t value)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2];

  data[0] = reg;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	733b      	strb	r3, [r7, #12]
  data[1] = value;
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&hi2c1, ADXL_ADDRESS, data, 2, 100);
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2302      	movs	r3, #2
 8000b4a:	21a6      	movs	r1, #166	; 0xa6
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <adxl_write+0x34>)
 8000b4e:	f001 f829 	bl	8001ba4 <HAL_I2C_Master_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000224 	.word	0x20000224

08000b60 <adxl_read_values>:

void adxl_read_values(uint8_t reg)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
#if 1
  HAL_I2C_Mem_Read(&hi2c1, ADXL_ADDRESS, reg, 1, (uint8_t *)data_rec, 6, 100);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	2306      	movs	r3, #6
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <adxl_read_values+0x2c>)
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	21a6      	movs	r1, #166	; 0xa6
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <adxl_read_values+0x30>)
 8000b80:	f001 f91e 	bl	8001dc0 <HAL_I2C_Mem_Read>
#endif
#if 0
  HAL_I2C_Mem_Read(&hi2c1, ADXL_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data_rec, 6, 100);
#endif
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000218 	.word	0x20000218
 8000b90:	20000224 	.word	0x20000224

08000b94 <adxl_read_address>:

void adxl_read_address(uint8_t reg)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af04      	add	r7, sp, #16
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, ADXL_ADDRESS, reg, 1, &chipid, 1, 100);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <adxl_read_address+0x2c>)
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	21a6      	movs	r1, #166	; 0xa6
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <adxl_read_address+0x30>)
 8000bb4:	f001 f904 	bl	8001dc0 <HAL_I2C_Mem_Read>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200001f8 	.word	0x200001f8
 8000bc4:	20000224 	.word	0x20000224

08000bc8 <adxl_init>:

void adxl_init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  adxl_read_address(0x00);    // read the device ID
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ffe1 	bl	8000b94 <adxl_read_address>
  printf("ADXL345 Chip ID: %X \r\n", chipid);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <adxl_init+0x34>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <adxl_init+0x38>)
 8000bda:	f003 f9f1 	bl	8003fc0 <iprintf>

  adxl_write (0x31, 0x01);  // data_format range= +- 4g, 10bit
 8000bde:	2101      	movs	r1, #1
 8000be0:	2031      	movs	r0, #49	; 0x31
 8000be2:	f7ff ffa1 	bl	8000b28 <adxl_write>

#if 0
  adxl_write (0x31, 0x09);  // 4g, Full Res.
#endif
  adxl_write (0x2d, 0x00);  // reset all bits
 8000be6:	2100      	movs	r1, #0
 8000be8:	202d      	movs	r0, #45	; 0x2d
 8000bea:	f7ff ff9d 	bl	8000b28 <adxl_write>
  adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz
 8000bee:	2108      	movs	r1, #8
 8000bf0:	202d      	movs	r0, #45	; 0x2d
 8000bf2:	f7ff ff99 	bl	8000b28 <adxl_write>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001f8 	.word	0x200001f8
 8000c00:	08005d88 	.word	0x08005d88

08000c04 <apInit>:
/* ------------------------------------------------------------------------- */
void apInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  adxl_init();
 8000c08:	f7ff ffde 	bl	8000bc8 <adxl_init>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <apMain>:

void apMain(void)
{
 8000c10:	b598      	push	{r3, r4, r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  while(1)
  {
    //printf("STM32F103RB-Nucleo!!\r\n");
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c14:	2120      	movs	r1, #32
 8000c16:	483a      	ldr	r0, [pc, #232]	; (8000d00 <apMain+0xf0>)
 8000c18:	f000 feae 	bl	8001978 <HAL_GPIO_TogglePin>
    //adxl_init();
    adxl_read_values(0x32);
 8000c1c:	2032      	movs	r0, #50	; 0x32
 8000c1e:	f7ff ff9f 	bl	8000b60 <adxl_read_values>

    x = ((data_rec[1]<<8)|data_rec[0]);
 8000c22:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <apMain+0xf4>)
 8000c24:	785b      	ldrb	r3, [r3, #1]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <apMain+0xf4>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <apMain+0xf8>)
 8000c36:	801a      	strh	r2, [r3, #0]
    y = ((data_rec[3]<<8)|data_rec[2]);
 8000c38:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <apMain+0xf4>)
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <apMain+0xf4>)
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <apMain+0xfc>)
 8000c4c:	801a      	strh	r2, [r3, #0]
    z = ((data_rec[5]<<8)|data_rec[4]);
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <apMain+0xf4>)
 8000c50:	795b      	ldrb	r3, [r3, #5]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <apMain+0xf4>)
 8000c58:	791b      	ldrb	r3, [r3, #4]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <apMain+0x100>)
 8000c62:	801a      	strh	r2, [r3, #0]
//
    xg = x * .0078;
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <apMain+0xf8>)
 8000c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fbca 	bl	8000404 <__aeabi_i2d>
 8000c70:	a321      	add	r3, pc, #132	; (adr r3, 8000cf8 <apMain+0xe8>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f7ff fc2f 	bl	80004d8 <__aeabi_dmul>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	4621      	mov	r1, r4
 8000c82:	f7ff ff01 	bl	8000a88 <__aeabi_d2f>
 8000c86:	4602      	mov	r2, r0
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <apMain+0x104>)
 8000c8a:	601a      	str	r2, [r3, #0]
    yg = y * .0078;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <apMain+0xfc>)
 8000c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fbb6 	bl	8000404 <__aeabi_i2d>
 8000c98:	a317      	add	r3, pc, #92	; (adr r3, 8000cf8 <apMain+0xe8>)
 8000c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9e:	f7ff fc1b 	bl	80004d8 <__aeabi_dmul>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460c      	mov	r4, r1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	4621      	mov	r1, r4
 8000caa:	f7ff feed 	bl	8000a88 <__aeabi_d2f>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <apMain+0x108>)
 8000cb2:	601a      	str	r2, [r3, #0]
    zg = z * .0078;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <apMain+0x100>)
 8000cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fba2 	bl	8000404 <__aeabi_i2d>
 8000cc0:	a30d      	add	r3, pc, #52	; (adr r3, 8000cf8 <apMain+0xe8>)
 8000cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc6:	f7ff fc07 	bl	80004d8 <__aeabi_dmul>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460c      	mov	r4, r1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	f7ff fed9 	bl	8000a88 <__aeabi_d2f>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <apMain+0x10c>)
 8000cda:	601a      	str	r2, [r3, #0]
    printf(">xg: %f \r\n", xg);
    printf(">yg: %f \r\n", yg);
    printf(">zg: %f \r\n", zg);
    HAL_Delay(20);
#endif
    printf(">z: %d \r\n", z);
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <apMain+0x100>)
 8000cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480e      	ldr	r0, [pc, #56]	; (8000d20 <apMain+0x110>)
 8000ce6:	f003 f96b 	bl	8003fc0 <iprintf>
    HAL_Delay(200);
 8000cea:	20c8      	movs	r0, #200	; 0xc8
 8000cec:	f000 fbc8 	bl	8001480 <HAL_Delay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cf0:	e790      	b.n	8000c14 <apMain+0x4>
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	8e8a71de 	.word	0x8e8a71de
 8000cfc:	3f7ff2e4 	.word	0x3f7ff2e4
 8000d00:	40010800 	.word	0x40010800
 8000d04:	20000218 	.word	0x20000218
 8000d08:	20000208 	.word	0x20000208
 8000d0c:	20000212 	.word	0x20000212
 8000d10:	20000210 	.word	0x20000210
 8000d14:	20000220 	.word	0x20000220
 8000d18:	20000214 	.word	0x20000214
 8000d1c:	2000020c 	.word	0x2000020c
 8000d20:	08005da0 	.word	0x08005da0

08000d24 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d34:	2b80      	cmp	r3, #128	; 0x80
 8000d36:	bf0c      	ite	eq
 8000d38:	2301      	moveq	r3, #1
 8000d3a:	2300      	movne	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000d54:	78fa      	ldrb	r2, [r7, #3]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	605a      	str	r2, [r3, #4]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f000 fb28 	bl	80013bc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f808 	bl	8000d80 <SystemClock_Config>

  MX_GPIO_Init();
 8000d70:	f000 f98e 	bl	8001090 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d74:	f000 f9d6 	bl	8001124 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000d78:	f000 faa0 	bl	80012bc <MX_USART2_UART_Init>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b090      	sub	sp, #64	; 0x40
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	2228      	movs	r2, #40	; 0x28
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fcbe 	bl	8003710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000daa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db4:	2302      	movs	r3, #2
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fd4a 	bl	8002860 <HAL_RCC_OscConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000dd2:	f000 f84d 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 ff9a 	bl	8002d28 <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000dfa:	f000 f839 	bl	8000e70 <Error_Handler>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3740      	adds	r7, #64	; 0x40
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <_write>:

int _write(int file, char *ptr, int len)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
    uint32_t timeout = 0x0FFFFFFF;    /* about 3 second, 72MHz Clock */
 8000e14:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8000e18:	617b      	str	r3, [r7, #20]
    //uint32_t timeout = 0x0AAAAAAA;    /* about 3 second, 48MHz Clock */

    for(int i = 0; i < len; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e01b      	b.n	8000e58 <_write+0x50>
    {
        while(!LL_USART_IsActiveFlag_TXE(USART2))
        {
            /* We can put some timeout here*/
            if((timeout--) == RESET) return -1;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	617a      	str	r2, [r7, #20]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <_write+0x28>
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e018      	b.n	8000e62 <_write+0x5a>
        while(!LL_USART_IsActiveFlag_TXE(USART2))
 8000e30:	480e      	ldr	r0, [pc, #56]	; (8000e6c <_write+0x64>)
 8000e32:	f7ff ff77 	bl	8000d24 <LL_USART_IsActiveFlag_TXE>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0f1      	beq.n	8000e20 <_write+0x18>
        }
        LL_USART_TransmitData8(USART2, *(ptr+i));
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	4413      	add	r3, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <_write+0x64>)
 8000e48:	f7ff ff7e 	bl	8000d48 <LL_USART_TransmitData8>
        timeout = 0x0FFFFFFF;
 8000e4c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8000e50:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < len; i++)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	3301      	adds	r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbe7      	blt.n	8000e30 <_write+0x28>
    }
    return len;
 8000e60:	687b      	ldr	r3, [r7, #4]

}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004400 	.word	0x40004400

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_MspInit+0x60>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_MspInit+0x60>)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <BusFault_Handler+0x4>

08000efe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <UsageFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 fa8c 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e00a      	b.n	8000f5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f46:	f3af 8000 	nop.w
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	60ba      	str	r2, [r7, #8]
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf0      	blt.n	8000f46 <_read+0x12>
	}

return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x50>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x16>
		heap_end = &end;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <_sbrk+0x50>)
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <_sbrk+0x54>)
 8000f84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <_sbrk+0x50>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <_sbrk+0x50>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	466a      	mov	r2, sp
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d907      	bls.n	8000faa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000f9a:	f002 fb8f 	bl	80036bc <__errno>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	e006      	b.n	8000fb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <_sbrk+0x50>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <_sbrk+0x50>)
 8000fb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200001fc 	.word	0x200001fc
 8000fc4:	20000280 	.word	0x20000280

08000fc8 <_close>:

int _close(int file)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	return -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fee:	605a      	str	r2, [r3, #4]
	return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <_isatty>:

int _isatty(int file)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	return 1;
 8001004:	2301      	movs	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <SystemInit+0x5c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <SystemInit+0x5c>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <SystemInit+0x5c>)
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	4911      	ldr	r1, [pc, #68]	; (8001084 <SystemInit+0x5c>)
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <SystemInit+0x60>)
 8001040:	4013      	ands	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <SystemInit+0x5c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <SystemInit+0x5c>)
 800104a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <SystemInit+0x5c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SystemInit+0x5c>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <SystemInit+0x5c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <SystemInit+0x5c>)
 8001066:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800106a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SystemInit+0x5c>)
 800106e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001072:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SystemInit+0x64>)
 8001076:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107a:	609a      	str	r2, [r3, #8]
#endif 
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	f8ff0000 	.word	0xf8ff0000
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_GPIO_Init+0x8c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <MX_GPIO_Init+0x8c>)
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_GPIO_Init+0x8c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_GPIO_Init+0x8c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a16      	ldr	r2, [pc, #88]	; (800111c <MX_GPIO_Init+0x8c>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_GPIO_Init+0x8c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_GPIO_Init+0x8c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a10      	ldr	r2, [pc, #64]	; (800111c <MX_GPIO_Init+0x8c>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_GPIO_Init+0x8c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2120      	movs	r1, #32
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <MX_GPIO_Init+0x90>)
 80010f2:	f000 fc29 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010f6:	2320      	movs	r3, #32
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2302      	movs	r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_GPIO_Init+0x90>)
 800110e:	f000 fabd 	bl	800168c <HAL_GPIO_Init>

}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	40010800 	.word	0x40010800

08001124 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_I2C1_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <MX_I2C1_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_I2C1_Init+0x50>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_I2C1_Init+0x58>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_I2C1_Init+0x50>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_I2C1_Init+0x50>)
 8001162:	f000 fc1b 	bl	800199c <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800116c:	f7ff fe80 	bl	8000e70 <Error_Handler>
  }

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000224 	.word	0x20000224
 8001178:	40005400 	.word	0x40005400
 800117c:	000186a0 	.word	0x000186a0

08001180 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_I2C_MspInit+0x88>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d12f      	bne.n	8001200 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* I2C clock must enable before HAL_GPIO_Init() */
     __HAL_RCC_I2C1_CLK_ENABLE();
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011aa:	61d3      	str	r3, [r2, #28]
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a13      	ldr	r2, [pc, #76]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d0:	23c0      	movs	r3, #192	; 0xc0
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4619      	mov	r1, r3
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_I2C_MspInit+0x90>)
 80011e4:	f000 fa52 	bl	800168c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f2:	61d3      	str	r3, [r2, #28]
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40005400 	.word	0x40005400
 800120c:	40021000 	.word	0x40021000
 8001210:	40010c00 	.word	0x40010c00

08001214 <LL_USART_Enable>:
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <LL_USART_ConfigAsyncMode>:
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	615a      	str	r2, [r3, #20]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <LL_APB1_GRP1_EnableClock+0x2c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4313      	orrs	r3, r2
 800126e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4013      	ands	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001296:	699a      	ldr	r2, [r3, #24]
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012a2:	699a      	ldr	r2, [r3, #24]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
 80012d2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80012e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012e6:	f7ff ffb9 	bl	800125c <LL_APB1_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80012ea:	2004      	movs	r0, #4
 80012ec:	f7ff ffce 	bl	800128c <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80012f0:	f240 4304 	movw	r3, #1028	; 0x404
 80012f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012f6:	2309      	movs	r3, #9
 80012f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <MX_USART2_UART_Init+0xa0>)
 8001308:	f001 ff69 	bl	80031de <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800130c:	f640 0308 	movw	r3, #2056	; 0x808
 8001310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001312:	2304      	movs	r3, #4
 8001314:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4810      	ldr	r0, [pc, #64]	; (800135c <MX_USART2_UART_Init+0xa0>)
 800131c:	f001 ff5f 	bl	80031de <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001320:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001324:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001332:	230c      	movs	r3, #12
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_USART2_UART_Init+0xa4>)
 8001342:	f002 f94f 	bl	80035e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_USART2_UART_Init+0xa4>)
 8001348:	f7ff ff73 	bl	8001232 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_USART2_UART_Init+0xa4>)
 800134e:	f7ff ff61 	bl	8001214 <LL_USART_Enable>

}
 8001352:	bf00      	nop
 8001354:	3730      	adds	r7, #48	; 0x30
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40010800 	.word	0x40010800
 8001360:	40004400 	.word	0x40004400

08001364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001364:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001366:	e003      	b.n	8001370 <LoopCopyDataInit>

08001368 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800136a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800136c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800136e:	3104      	adds	r1, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001374:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001378:	d3f6      	bcc.n	8001368 <CopyDataInit>
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800137c:	e002      	b.n	8001384 <LoopFillZerobss>

0800137e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001380:	f842 3b04 	str.w	r3, [r2], #4

08001384 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001386:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001388:	d3f9      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138a:	f7ff fe4d 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f002 f99b 	bl	80036c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001392:	f002 f987 	bl	80036a4 <main>
  bx lr
 8001396:	4770      	bx	lr
  ldr r3, =_sidata
 8001398:	080060a0 	.word	0x080060a0
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80013a4:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80013a8:	20000280 	.word	0x20000280

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>

080013ae <hwInit>:


#include "hw.h"

void hwInit(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
  bspInit();
 80013b2:	f7ff fcd7 	bl	8000d64 <bspInit>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f929 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fd50 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f933 	bl	8001672 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f909 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000008 	.word	0x20000008
 8001468:	20000278 	.word	0x20000278

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000278 	.word	0x20000278

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fff0 	bl	800146c <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_Delay+0x40>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffe0 	bl	800146c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000008 	.word	0x20000008

080014c4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	da0b      	bge.n	8001554 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <NVIC_SetPriority+0x4c>)
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	3b04      	subs	r3, #4
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001552:	e009      	b.n	8001568 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <NVIC_SetPriority+0x50>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	e000e100 	.word	0xe000e100

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff90 	bl	8001528 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff49 	bl	80014c4 <NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff5e 	bl	800150c <NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff90 	bl	800157c <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5f 	bl	8001528 <NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffb0 	bl	80015e0 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b08b      	sub	sp, #44	; 0x2c
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
 80016ae:	e127      	b.n	8001900 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80016b0:	2201      	movs	r2, #1
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 8116 	bne.w	80018fa <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d034      	beq.n	8001740 <HAL_GPIO_Init+0xb4>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d80d      	bhi.n	80016f6 <HAL_GPIO_Init+0x6a>
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d02b      	beq.n	8001736 <HAL_GPIO_Init+0xaa>
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d804      	bhi.n	80016ec <HAL_GPIO_Init+0x60>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d031      	beq.n	800174a <HAL_GPIO_Init+0xbe>
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d01c      	beq.n	8001724 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ea:	e048      	b.n	800177e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d043      	beq.n	8001778 <HAL_GPIO_Init+0xec>
 80016f0:	2b11      	cmp	r3, #17
 80016f2:	d01b      	beq.n	800172c <HAL_GPIO_Init+0xa0>
          break;
 80016f4:	e043      	b.n	800177e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80016f6:	4a87      	ldr	r2, [pc, #540]	; (8001914 <HAL_GPIO_Init+0x288>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d026      	beq.n	800174a <HAL_GPIO_Init+0xbe>
 80016fc:	4a85      	ldr	r2, [pc, #532]	; (8001914 <HAL_GPIO_Init+0x288>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d806      	bhi.n	8001710 <HAL_GPIO_Init+0x84>
 8001702:	4a85      	ldr	r2, [pc, #532]	; (8001918 <HAL_GPIO_Init+0x28c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d020      	beq.n	800174a <HAL_GPIO_Init+0xbe>
 8001708:	4a84      	ldr	r2, [pc, #528]	; (800191c <HAL_GPIO_Init+0x290>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01d      	beq.n	800174a <HAL_GPIO_Init+0xbe>
          break;
 800170e:	e036      	b.n	800177e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001710:	4a83      	ldr	r2, [pc, #524]	; (8001920 <HAL_GPIO_Init+0x294>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0xbe>
 8001716:	4a83      	ldr	r2, [pc, #524]	; (8001924 <HAL_GPIO_Init+0x298>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d016      	beq.n	800174a <HAL_GPIO_Init+0xbe>
 800171c:	4a82      	ldr	r2, [pc, #520]	; (8001928 <HAL_GPIO_Init+0x29c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0xbe>
          break;
 8001722:	e02c      	b.n	800177e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e028      	b.n	800177e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	3304      	adds	r3, #4
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e023      	b.n	800177e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	3308      	adds	r3, #8
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e01e      	b.n	800177e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	330c      	adds	r3, #12
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e019      	b.n	800177e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001752:	2304      	movs	r3, #4
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e012      	b.n	800177e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001760:	2308      	movs	r3, #8
 8001762:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	611a      	str	r2, [r3, #16]
          break;
 800176a:	e008      	b.n	800177e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800176c:	2308      	movs	r3, #8
 800176e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	615a      	str	r2, [r3, #20]
          break;
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	d801      	bhi.n	8001788 <HAL_GPIO_Init+0xfc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	e001      	b.n	800178c <HAL_GPIO_Init+0x100>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3304      	adds	r3, #4
 800178c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2bff      	cmp	r3, #255	; 0xff
 8001792:	d802      	bhi.n	800179a <HAL_GPIO_Init+0x10e>
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x114>
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3b08      	subs	r3, #8
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	210f      	movs	r1, #15
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	401a      	ands	r2, r3
 80017b2:	6a39      	ldr	r1, [r7, #32]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	431a      	orrs	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8096 	beq.w	80018fa <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ce:	4b57      	ldr	r3, [pc, #348]	; (800192c <HAL_GPIO_Init+0x2a0>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a56      	ldr	r2, [pc, #344]	; (800192c <HAL_GPIO_Init+0x2a0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b54      	ldr	r3, [pc, #336]	; (800192c <HAL_GPIO_Init+0x2a0>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80017e6:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_GPIO_Init+0x2a4>)
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3302      	adds	r3, #2
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4013      	ands	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a49      	ldr	r2, [pc, #292]	; (8001934 <HAL_GPIO_Init+0x2a8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0x1ae>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a48      	ldr	r2, [pc, #288]	; (8001938 <HAL_GPIO_Init+0x2ac>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <HAL_GPIO_Init+0x1aa>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a47      	ldr	r2, [pc, #284]	; (800193c <HAL_GPIO_Init+0x2b0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x1a6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a46      	ldr	r2, [pc, #280]	; (8001940 <HAL_GPIO_Init+0x2b4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_GPIO_Init+0x1a2>
 800182a:	2303      	movs	r3, #3
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x1b0>
 800182e:	2304      	movs	r3, #4
 8001830:	e004      	b.n	800183c <HAL_GPIO_Init+0x1b0>
 8001832:	2302      	movs	r3, #2
 8001834:	e002      	b.n	800183c <HAL_GPIO_Init+0x1b0>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x1b0>
 800183a:	2300      	movs	r3, #0
 800183c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183e:	f002 0203 	and.w	r2, r2, #3
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	4093      	lsls	r3, r2
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4313      	orrs	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800184c:	4938      	ldr	r1, [pc, #224]	; (8001930 <HAL_GPIO_Init+0x2a4>)
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4936      	ldr	r1, [pc, #216]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
 8001872:	e006      	b.n	8001882 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	43db      	mvns	r3, r3
 800187c:	4931      	ldr	r1, [pc, #196]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 800187e:	4013      	ands	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	492c      	ldr	r1, [pc, #176]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
 800189a:	e006      	b.n	80018aa <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	4927      	ldr	r1, [pc, #156]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
 80018c2:	e006      	b.n	80018d2 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	491d      	ldr	r1, [pc, #116]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	4918      	ldr	r1, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]
 80018ea:	e006      	b.n	80018fa <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	4913      	ldr	r1, [pc, #76]	; (8001944 <HAL_GPIO_Init+0x2b8>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	3301      	adds	r3, #1
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	2b0f      	cmp	r3, #15
 8001904:	f67f aed4 	bls.w	80016b0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001908:	bf00      	nop
 800190a:	372c      	adds	r7, #44	; 0x2c
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	10210000 	.word	0x10210000
 8001918:	10110000 	.word	0x10110000
 800191c:	10120000 	.word	0x10120000
 8001920:	10310000 	.word	0x10310000
 8001924:	10320000 	.word	0x10320000
 8001928:	10220000 	.word	0x10220000
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	611a      	str	r2, [r3, #16]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	405a      	eors	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	60da      	str	r2, [r3, #12]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
	...

0800199c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0e7      	b.n	8001b86 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fbd8 	bl	8001180 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e8:	f001 fb16 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 80019ec:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a67      	ldr	r2, [pc, #412]	; (8001b90 <HAL_I2C_Init+0x1f4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d807      	bhi.n	8001a08 <HAL_I2C_Init+0x6c>
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4a66      	ldr	r2, [pc, #408]	; (8001b94 <HAL_I2C_Init+0x1f8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf94      	ite	ls
 8001a00:	2301      	movls	r3, #1
 8001a02:	2300      	movhi	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e006      	b.n	8001a16 <HAL_I2C_Init+0x7a>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4a63      	ldr	r2, [pc, #396]	; (8001b98 <HAL_I2C_Init+0x1fc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	bf94      	ite	ls
 8001a10:	2301      	movls	r3, #1
 8001a12:	2300      	movhi	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0b3      	b.n	8001b86 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4a5e      	ldr	r2, [pc, #376]	; (8001b9c <HAL_I2C_Init+0x200>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a56      	ldr	r2, [pc, #344]	; (8001b90 <HAL_I2C_Init+0x1f4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d802      	bhi.n	8001a42 <HAL_I2C_Init+0xa6>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	e009      	b.n	8001a56 <HAL_I2C_Init+0xba>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	4a54      	ldr	r2, [pc, #336]	; (8001ba0 <HAL_I2C_Init+0x204>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	3301      	adds	r3, #1
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_I2C_Init+0x1f4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d80d      	bhi.n	8001a82 <HAL_I2C_Init+0xe6>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	3301      	adds	r3, #1
 8001a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf38      	it	cc
 8001a7e:	2304      	movcc	r3, #4
 8001a80:	e04f      	b.n	8001b22 <HAL_I2C_Init+0x186>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d111      	bne.n	8001aae <HAL_I2C_Init+0x112>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1e59      	subs	r1, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	e012      	b.n	8001ad4 <HAL_I2C_Init+0x138>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1e59      	subs	r1, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009a      	lsls	r2, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Init+0x140>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e022      	b.n	8001b22 <HAL_I2C_Init+0x186>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10e      	bne.n	8001b02 <HAL_I2C_Init+0x166>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1e59      	subs	r1, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b00:	e00f      	b.n	8001b22 <HAL_I2C_Init+0x186>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1e59      	subs	r1, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	009a      	lsls	r2, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69d9      	ldr	r1, [r3, #28]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1a      	ldr	r2, [r3, #32]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6919      	ldr	r1, [r3, #16]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6959      	ldr	r1, [r3, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	000186a0 	.word	0x000186a0
 8001b94:	001e847f 	.word	0x001e847f
 8001b98:	003d08ff 	.word	0x003d08ff
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	817b      	strh	r3, [r7, #10]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bbc:	f7ff fc56 	bl	800146c <HAL_GetTick>
 8001bc0:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	f040 80ee 	bne.w	8001dac <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4977      	ldr	r1, [pc, #476]	; (8001db8 <HAL_I2C_Master_Transmit+0x214>)
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fc96 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
 8001be8:	e0e1      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_I2C_Master_Transmit+0x54>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e0da      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d007      	beq.n	8001c1e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2221      	movs	r2, #33	; 0x21
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2210      	movs	r2, #16
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	893a      	ldrh	r2, [r7, #8]
 8001c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a5a      	ldr	r2, [pc, #360]	; (8001dbc <HAL_I2C_Master_Transmit+0x218>)
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c60:	8979      	ldrh	r1, [r7, #10]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	6a3a      	ldr	r2, [r7, #32]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 faec 	bl	8002244 <I2C_MasterRequestWrite>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00f      	beq.n	8001c92 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d105      	bne.n	8001c86 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e093      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e08d      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001ca8:	e066      	b.n	8001d78 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	6a39      	ldr	r1, [r7, #32]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fceb 	bl	800268a <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00f      	beq.n	8001cda <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d109      	bne.n	8001cd6 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06b      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e069      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	6251      	str	r1, [r2, #36]	; 0x24
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d119      	bne.n	8001d48 <HAL_I2C_Master_Transmit+0x1a4>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6251      	str	r1, [r2, #36]	; 0x24
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fcd9 	bl	8002704 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00f      	beq.n	8001d78 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d109      	bne.n	8001d74 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e01c      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e01a      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d194      	bne.n	8001caa <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e000      	b.n	8001dae <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
  }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	00100002 	.word	0x00100002
 8001dbc:	ffff0000 	.word	0xffff0000

08001dc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	; 0x30
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	817b      	strh	r3, [r7, #10]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	813b      	strh	r3, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dde:	f7ff fb45 	bl	800146c <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	f040 8222 	bne.w	8002236 <HAL_I2C_Mem_Read+0x476>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2319      	movs	r3, #25
 8001df8:	2201      	movs	r2, #1
 8001dfa:	498a      	ldr	r1, [pc, #552]	; (8002024 <HAL_I2C_Mem_Read+0x264>)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 fb85 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e215      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Mem_Read+0x5a>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e20e      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d007      	beq.n	8001e40 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2222      	movs	r2, #34	; 0x22
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	; 0x40
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a6c      	ldr	r2, [pc, #432]	; (8002028 <HAL_I2C_Mem_Read+0x268>)
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e82:	88f8      	ldrh	r0, [r7, #6]
 8001e84:	893a      	ldrh	r2, [r7, #8]
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4603      	mov	r3, r0
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fa58 	bl	8002348 <I2C_RequestMemoryRead>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00f      	beq.n	8001ebe <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d105      	bne.n	8001eb2 <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1c2      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1bc      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
      }
    }

    if(hi2c->XferSize == 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d113      	bne.n	8001eee <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	623b      	str	r3, [r7, #32]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e190      	b.n	8002210 <HAL_I2C_Mem_Read+0x450>
    }
    else if(hi2c->XferSize == 1U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d11d      	bne.n	8001f32 <HAL_I2C_Mem_Read+0x172>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f04:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f06:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f2e:	b662      	cpsie	i
 8001f30:	e16e      	b.n	8002210 <HAL_I2C_Mem_Read+0x450>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if(hi2c->XferSize == 2U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d11d      	bne.n	8001f76 <HAL_I2C_Mem_Read+0x1b6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]
      
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f72:	b662      	cpsie	i
 8001f74:	e14c      	b.n	8002210 <HAL_I2C_Mem_Read+0x450>
       __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001f9c:	e138      	b.n	8002210 <HAL_I2C_Mem_Read+0x450>
    {
      if(hi2c->XferSize <= 3U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	f200 80ef 	bhi.w	8002186 <HAL_I2C_Mem_Read+0x3c6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d127      	bne.n	8002000 <HAL_I2C_Mem_Read+0x240>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fbe2 	bl	800277e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_I2C_Mem_Read+0x210>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2C_Mem_Read+0x20c>
            {
              return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e135      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
            }
            else
            {
              return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e133      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6918      	ldr	r0, [r3, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	6251      	str	r1, [r2, #36]	; 0x24
 8001fe0:	b2c2      	uxtb	r2, r0
 8001fe2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ffe:	e107      	b.n	8002210 <HAL_I2C_Mem_Read+0x450>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	2b02      	cmp	r3, #2
 8002006:	d14c      	bne.n	80020a2 <HAL_I2C_Mem_Read+0x2e2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200e:	2200      	movs	r2, #0
 8002010:	4906      	ldr	r1, [pc, #24]	; (800202c <HAL_I2C_Mem_Read+0x26c>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fa7a 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_I2C_Mem_Read+0x270>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e10a      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
 8002022:	bf00      	nop
 8002024:	00100002 	.word	0x00100002
 8002028:	ffff0000 	.word	0xffff0000
 800202c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002030:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002040:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6918      	ldr	r0, [r3, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c59      	adds	r1, r3, #1
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	6251      	str	r1, [r2, #36]	; 0x24
 8002052:	b2c2      	uxtb	r2, r0
 8002054:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002070:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6918      	ldr	r0, [r3, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	1c59      	adds	r1, r3, #1
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6251      	str	r1, [r2, #36]	; 0x24
 8002082:	b2c2      	uxtb	r2, r0
 8002084:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020a0:	e0b6      	b.n	8002210 <HAL_I2C_Mem_Read+0x450>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a8:	2200      	movs	r2, #0
 80020aa:	4965      	ldr	r1, [pc, #404]	; (8002240 <HAL_I2C_Mem_Read+0x480>)
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fa2d 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Mem_Read+0x2fc>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0bd      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020cc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6918      	ldr	r0, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	1c59      	adds	r1, r3, #1
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	6251      	str	r1, [r2, #36]	; 0x24
 80020de:	b2c2      	uxtb	r2, r0
 80020e0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002102:	2200      	movs	r2, #0
 8002104:	494e      	ldr	r1, [pc, #312]	; (8002240 <HAL_I2C_Mem_Read+0x480>)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fa00 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Mem_Read+0x356>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e090      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002124:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6918      	ldr	r0, [r3, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c59      	adds	r1, r3, #1
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6251      	str	r1, [r2, #36]	; 0x24
 8002136:	b2c2      	uxtb	r2, r0
 8002138:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002154:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6918      	ldr	r0, [r3, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	1c59      	adds	r1, r3, #1
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	6251      	str	r1, [r2, #36]	; 0x24
 8002166:	b2c2      	uxtb	r2, r0
 8002168:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002184:	e044      	b.n	8002210 <HAL_I2C_Mem_Read+0x450>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 faf7 	bl	800277e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_I2C_Mem_Read+0x3e6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b20      	cmp	r3, #32
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Mem_Read+0x3e2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e04a      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
          }
          else
          {
            return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e048      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6918      	ldr	r0, [r3, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	1c59      	adds	r1, r3, #1
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	6251      	str	r1, [r2, #36]	; 0x24
 80021b6:	b2c2      	uxtb	r2, r0
 80021b8:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d116      	bne.n	8002210 <HAL_I2C_Mem_Read+0x450>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6918      	ldr	r0, [r3, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c59      	adds	r1, r3, #1
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6251      	str	r1, [r2, #36]	; 0x24
 80021f2:	b2c2      	uxtb	r2, r0
 80021f4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f47f aec2 	bne.w	8001f9e <HAL_I2C_Mem_Read+0x1de>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_I2C_Mem_Read+0x478>
  }
  else
  {
    return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	3728      	adds	r7, #40	; 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	00010004 	.word	0x00010004

08002244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d006      	beq.n	800226e <I2C_MasterRequestWrite+0x2a>
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d003      	beq.n	800226e <I2C_MasterRequestWrite+0x2a>
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800226c:	d108      	bne.n	8002280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e00b      	b.n	8002298 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	2b12      	cmp	r3, #18
 8002286:	d107      	bne.n	8002298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f931 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e041      	b.n	8002338 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022bc:	d108      	bne.n	80022d0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022cc:	611a      	str	r2, [r3, #16]
 80022ce:	e021      	b.n	8002314 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	11db      	asrs	r3, r3, #7
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 0306 	and.w	r3, r3, #6
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f063 030f 	orn	r3, r3, #15
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4914      	ldr	r1, [pc, #80]	; (8002340 <I2C_MasterRequestWrite+0xfc>)
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f95d 	bl	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d101      	bne.n	8002306 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e018      	b.n	8002338 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e016      	b.n	8002338 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800230a:	897b      	ldrh	r3, [r7, #10]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	490a      	ldr	r1, [pc, #40]	; (8002344 <I2C_MasterRequestWrite+0x100>)
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f947 	bl	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	2b04      	cmp	r3, #4
 800232c:	d101      	bne.n	8002332 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e002      	b.n	8002338 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e000      	b.n	8002338 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	00010008 	.word	0x00010008
 8002344:	00010002 	.word	0x00010002

08002348 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	4603      	mov	r3, r0
 8002358:	817b      	strh	r3, [r7, #10]
 800235a:	460b      	mov	r3, r1
 800235c:	813b      	strh	r3, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002370:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2200      	movs	r2, #0
 800238a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f8bc 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0b0      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	4955      	ldr	r1, [pc, #340]	; (8002508 <I2C_RequestMemoryRead+0x1c0>)
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8fa 	bl	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <I2C_RequestMemoryRead+0x88>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d101      	bne.n	80023cc <I2C_RequestMemoryRead+0x84>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e099      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e097      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f94d 	bl	800268a <I2C_WaitOnTXEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00f      	beq.n	8002416 <I2C_RequestMemoryRead+0xce>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d109      	bne.n	8002412 <I2C_RequestMemoryRead+0xca>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e076      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e074      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d105      	bne.n	8002428 <I2C_RequestMemoryRead+0xe0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800241c:	893b      	ldrh	r3, [r7, #8]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	611a      	str	r2, [r3, #16]
 8002426:	e023      	b.n	8002470 <I2C_RequestMemoryRead+0x128>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002428:	893b      	ldrh	r3, [r7, #8]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	b29b      	uxth	r3, r3
 800242e:	b2da      	uxtb	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002438:	6a39      	ldr	r1, [r7, #32]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f925 	bl	800268a <I2C_WaitOnTXEFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00f      	beq.n	8002466 <I2C_RequestMemoryRead+0x11e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b04      	cmp	r3, #4
 800244c:	d109      	bne.n	8002462 <I2C_RequestMemoryRead+0x11a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245c:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e04e      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
      }
      else
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04c      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002466:	893b      	ldrh	r3, [r7, #8]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	6a39      	ldr	r1, [r7, #32]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f908 	bl	800268a <I2C_WaitOnTXEFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00f      	beq.n	80024a0 <I2C_RequestMemoryRead+0x158>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b04      	cmp	r3, #4
 8002486:	d109      	bne.n	800249c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002496:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e031      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e02f      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f825 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <I2C_RequestMemoryRead+0x184>
  {
    return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e019      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024cc:	897b      	ldrh	r3, [r7, #10]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	6a3a      	ldr	r2, [r7, #32]
 80024e0:	4909      	ldr	r1, [pc, #36]	; (8002508 <I2C_RequestMemoryRead+0x1c0>)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f863 	bl	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <I2C_RequestMemoryRead+0x1b6>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d101      	bne.n	80024fa <I2C_RequestMemoryRead+0x1b2>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e002      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e000      	b.n	8002500 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010002 	.word	0x00010002

0800250c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800251c:	e01f      	b.n	800255e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d01b      	beq.n	800255e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <I2C_WaitOnFlagUntilTimeout+0x30>
 800252c:	f7fe ff9e 	bl	800146c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d210      	bcs.n	800255e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e023      	b.n	80025a6 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10d      	bne.n	8002584 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4013      	ands	r3, r2
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	bf0c      	ite	eq
 800257a:	2301      	moveq	r3, #1
 800257c:	2300      	movne	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	e00c      	b.n	800259e <I2C_WaitOnFlagUntilTimeout+0x92>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4013      	ands	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d0bc      	beq.n	800251e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025bc:	e040      	b.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025cc:	d11c      	bne.n	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025e6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2204      	movs	r2, #4
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e03c      	b.n	8002682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d017      	beq.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002616:	f7fe ff29 	bl	800146c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d20c      	bcs.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e020      	b.n	8002682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10c      	bne.n	8002664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	43da      	mvns	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e00b      	b.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d19e      	bne.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002696:	e029      	b.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f8ba 	bl	8002812 <I2C_IsAcknowledgeFailed>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e029      	b.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d01d      	beq.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026b6:	f7fe fed9 	bl	800146c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d212      	bcs.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d1ce      	bne.n	8002698 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002710:	e029      	b.n	8002766 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f87d 	bl	8002812 <I2C_IsAcknowledgeFailed>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e029      	b.n	8002776 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d01d      	beq.n	8002766 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002730:	f7fe fe9c 	bl	800146c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	d212      	bcs.n	8002766 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e007      	b.n	8002776 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d1ce      	bne.n	8002712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800278a:	e036      	b.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b10      	cmp	r3, #16
 8002798:	d114      	bne.n	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f06f 0210 	mvn.w	r2, #16
 80027a2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e022      	b.n	800280a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80027ca:	f7fe fe4f 	bl	800146c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20f      	bcs.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f043 0220 	orr.w	r2, r3, #32
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e007      	b.n	800280a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d1c1      	bne.n	800278c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002828:	d114      	bne.n	8002854 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002832:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2204      	movs	r2, #4
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8087 	beq.w	8002988 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800287a:	4b92      	ldr	r3, [pc, #584]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d00c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002886:	4b8f      	ldr	r3, [pc, #572]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b08      	cmp	r3, #8
 8002890:	d112      	bne.n	80028b8 <HAL_RCC_OscConfig+0x58>
 8002892:	4b8c      	ldr	r3, [pc, #560]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289e:	d10b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	4b88      	ldr	r3, [pc, #544]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d06c      	beq.n	8002986 <HAL_RCC_OscConfig+0x126>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d168      	bne.n	8002986 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e22d      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x70>
 80028c2:	4b80      	ldr	r3, [pc, #512]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7f      	ldr	r2, [pc, #508]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e02e      	b.n	800292e <HAL_RCC_OscConfig+0xce>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x92>
 80028d8:	4b7a      	ldr	r3, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a79      	ldr	r2, [pc, #484]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b77      	ldr	r3, [pc, #476]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a76      	ldr	r2, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e01d      	b.n	800292e <HAL_RCC_OscConfig+0xce>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_OscConfig+0xb6>
 80028fc:	4b71      	ldr	r3, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a70      	ldr	r2, [pc, #448]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a6d      	ldr	r2, [pc, #436]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e00b      	b.n	800292e <HAL_RCC_OscConfig+0xce>
 8002916:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a67      	ldr	r2, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d013      	beq.n	800295e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe fd99 	bl	800146c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293e:	f7fe fd95 	bl	800146c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1e1      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002950:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0xde>
 800295c:	e014      	b.n	8002988 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe fd85 	bl	800146c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002966:	f7fe fd81 	bl	800146c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b64      	cmp	r3, #100	; 0x64
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e1cd      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002978:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x106>
 8002984:	e000      	b.n	8002988 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002986:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d063      	beq.n	8002a5c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002994:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029a0:	4b48      	ldr	r3, [pc, #288]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d11c      	bne.n	80029e6 <HAL_RCC_OscConfig+0x186>
 80029ac:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d116      	bne.n	80029e6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b8:	4b42      	ldr	r3, [pc, #264]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x170>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e1a1      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4939      	ldr	r1, [pc, #228]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e4:	e03a      	b.n	8002a5c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d020      	beq.n	8002a30 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x268>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fd3a 	bl	800146c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe fd36 	bl	800146c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e182      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4926      	ldr	r1, [pc, #152]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
 8002a2e:	e015      	b.n	8002a5c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HAL_RCC_OscConfig+0x268>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe fd19 	bl	800146c <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fd15 	bl	800146c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e161      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a50:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d039      	beq.n	8002adc <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d019      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fcf9 	bl	800146c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fcf5 	bl	800146c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e141      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCC_OscConfig+0x264>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f000 facf 	bl	8003040 <RCC_Delay>
 8002aa2:	e01b      	b.n	8002adc <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fcdf 	bl	800146c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	e00e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fcdb 	bl	800146c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d907      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e127      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	42420000 	.word	0x42420000
 8002acc:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	4b92      	ldr	r3, [pc, #584]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ea      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80a6 	beq.w	8002c36 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aee:	4b8b      	ldr	r3, [pc, #556]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10d      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4a87      	ldr	r2, [pc, #540]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	61d3      	str	r3, [r2, #28]
 8002b06:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_OscConfig+0x4c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d118      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_RCC_OscConfig+0x4c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7e      	ldr	r2, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x4c0>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fc9d 	bl	800146c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe fc99 	bl	800146c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	; 0x64
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e0e5      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x4c0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x30a>
 8002b5c:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a6e      	ldr	r2, [pc, #440]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	e02d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x366>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x32c>
 8002b72:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6213      	str	r3, [r2, #32]
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a66      	ldr	r2, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	e01c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x366>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d10c      	bne.n	8002bae <HAL_RCC_OscConfig+0x34e>
 8002b94:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4a60      	ldr	r2, [pc, #384]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	6213      	str	r3, [r2, #32]
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a5d      	ldr	r2, [pc, #372]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	e00b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x366>
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4a5a      	ldr	r2, [pc, #360]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6213      	str	r3, [r2, #32]
 8002bba:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a57      	ldr	r2, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d015      	beq.n	8002bfa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fe fc4d 	bl	800146c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe fc49 	bl	800146c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e093      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ee      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x376>
 8002bf8:	e014      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fc37 	bl	800146c <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe fc33 	bl	800146c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e07d      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4a3b      	ldr	r2, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d069      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3e:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d061      	beq.n	8002d0e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d146      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fc08 	bl	800146c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fc04 	bl	800146c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e050      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c86:	d108      	bne.n	8002c9a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4921      	ldr	r1, [pc, #132]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a19      	ldr	r1, [r3, #32]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	430b      	orrs	r3, r1
 8002cac:	491b      	ldr	r1, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fbd8 	bl	800146c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fbd4 	bl	800146c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e020      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x460>
 8002cde:	e018      	b.n	8002d12 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fbc1 	bl	800146c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fbbd 	bl	800146c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e009      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_OscConfig+0x4bc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x48e>
 8002d0c:	e001      	b.n	8002d12 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40007000 	.word	0x40007000
 8002d24:	42420060 	.word	0x42420060

08002d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002d36:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d910      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d44:	4b7a      	ldr	r3, [pc, #488]	; (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 0207 	bic.w	r2, r3, #7
 8002d4c:	4978      	ldr	r1, [pc, #480]	; (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d54:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0e0      	b.n	8002f28 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d020      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a6c      	ldr	r2, [pc, #432]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002d84:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d88:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002d9c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002da0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da2:	4b64      	ldr	r3, [pc, #400]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4961      	ldr	r1, [pc, #388]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d06a      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc8:	4b5a      	ldr	r3, [pc, #360]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d115      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0a7      	b.n	8002f28 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	4b54      	ldr	r3, [pc, #336]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e09b      	b.n	8002f28 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e093      	b.n	8002f28 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 0203 	bic.w	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4949      	ldr	r1, [pc, #292]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e12:	f7fe fb2b 	bl	800146c <HAL_GetTick>
 8002e16:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e22:	f7fe fb23 	bl	800146c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e077      	b.n	8002f28 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e38:	4b3e      	ldr	r3, [pc, #248]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xfa>
 8002e44:	e027      	b.n	8002e96 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d11d      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe fb0c 	bl	800146c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e060      	b.n	8002f28 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e66:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d1ee      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x128>
 8002e72:	e010      	b.n	8002e96 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fafa 	bl	800146c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e04e      	b.n	8002f28 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ee      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d210      	bcs.n	8002ec6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 0207 	bic.w	r2, r3, #7
 8002eac:	4920      	ldr	r1, [pc, #128]	; (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e030      	b.n	8002f28 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4915      	ldr	r1, [pc, #84]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d009      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f04:	f000 f81c 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002f08:	4601      	mov	r1, r0
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <HAL_RCC_ClockConfig+0x210>)
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	fa21 f303 	lsr.w	r3, r1, r3
 8002f1c:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_RCC_ClockConfig+0x214>)
 8002f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fe fa61 	bl	80013e8 <HAL_InitTick>
  
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	08005dc0 	.word	0x08005dc0
 8002f3c:	20000000 	.word	0x20000000

08002f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b490      	push	{r4, r7}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f46:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f48:	1d3c      	adds	r4, r7, #4
 8002f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f6a:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x40>
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x46>
 8002f7e:	e02d      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f80:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f82:	623b      	str	r3, [r7, #32]
      break;
 8002f84:	e02d      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	0c9b      	lsrs	r3, r3, #18
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f92:	4413      	add	r3, r2
 8002f94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c5b      	lsrs	r3, r3, #17
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fb8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fbe:	fb02 f203 	mul.w	r2, r2, r3
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	e004      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fd0:	fb02 f303 	mul.w	r3, r2, r3
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	623b      	str	r3, [r7, #32]
      break;
 8002fda:	e002      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fde:	623b      	str	r3, [r7, #32]
      break;
 8002fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc90      	pop	{r4, r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	08005dac 	.word	0x08005dac
 8002ff4:	08005dbc 	.word	0x08005dbc
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	007a1200 	.word	0x007a1200
 8003000:	003d0900 	.word	0x003d0900

08003004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003008:	4b02      	ldr	r3, [pc, #8]	; (8003014 <HAL_RCC_GetHCLKFreq+0x10>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	20000000 	.word	0x20000000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800301c:	f7ff fff2 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 8003020:	4601      	mov	r1, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4a03      	ldr	r2, [pc, #12]	; (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	08005dd0 	.word	0x08005dd0

08003040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <RCC_Delay+0x34>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <RCC_Delay+0x38>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a5b      	lsrs	r3, r3, #9
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800305c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e5a      	subs	r2, r3, #1
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f9      	bne.n	800305c <RCC_Delay+0x1c>
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000000 	.word	0x20000000
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800307c:	b490      	push	{r4, r7}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	0e1b      	lsrs	r3, r3, #24
 8003090:	4413      	add	r3, r2
 8003092:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	210f      	movs	r1, #15
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	61bb      	str	r3, [r7, #24]
  return(result);
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	6023      	str	r3, [r4, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc90      	pop	{r4, r7}
 80030da:	4770      	bx	lr

080030dc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80030dc:	b490      	push	{r4, r7}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	0e1b      	lsrs	r3, r3, #24
 80030f0:	4413      	add	r3, r2
 80030f2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	613b      	str	r3, [r7, #16]
  return(result);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	2103      	movs	r1, #3
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	4313      	orrs	r3, r2
 8003130:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8003132:	bf00      	nop
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bc90      	pop	{r4, r7}
 800313a:	4770      	bx	lr

0800313c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800313c:	b490      	push	{r4, r7}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	0e1b      	lsrs	r3, r3, #24
 8003150:	4413      	add	r3, r2
 8003152:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003154:	6822      	ldr	r2, [r4, #0]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	613b      	str	r3, [r7, #16]
  return(result);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	2104      	movs	r1, #4
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	401a      	ands	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	4313      	orrs	r3, r2
 8003190:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8003192:	bf00      	nop
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bc90      	pop	{r4, r7}
 800319a:	4770      	bx	lr

0800319c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	43db      	mvns	r3, r3
 80031b2:	401a      	ands	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	613b      	str	r3, [r7, #16]
  return(result);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	431a      	orrs	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	60da      	str	r2, [r3, #12]
}
 80031d4:	bf00      	nop
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b088      	sub	sp, #32
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80031fe:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 8003206:	e040      	b.n	800328a <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 8003208:	2201      	movs	r2, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	409a      	lsls	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d036      	beq.n	8003284 <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b07      	cmp	r3, #7
 800321a:	d806      	bhi.n	800322a <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 800321c:	f240 1201 	movw	r2, #257	; 0x101
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	e008      	b.n	800323c <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b08      	subs	r3, #8
 800322e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800323a:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	461a      	mov	r2, r3
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ff19 	bl	800307c <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	461a      	mov	r2, r3
 8003250:	69b9      	ldr	r1, [r7, #24]
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ffa2 	bl	800319c <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d003      	beq.n	8003268 <LL_GPIO_Init+0x8a>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b09      	cmp	r3, #9
 8003266:	d10d      	bne.n	8003284 <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	461a      	mov	r2, r3
 800326e:	69b9      	ldr	r1, [r7, #24]
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff33 	bl	80030dc <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	69b9      	ldr	r1, [r7, #24]
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff5c 	bl	800313c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	3301      	adds	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1b8      	bne.n	8003208 <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 8003296:	2301      	movs	r3, #1
}
 8003298:	4618      	mov	r0, r3
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <LL_RCC_GetSysClkSource+0x14>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	40021000 	.word	0x40021000

080032b8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <LL_RCC_GetAHBPrescaler+0x14>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40021000 	.word	0x40021000

080032d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	40021000 	.word	0x40021000

080032e8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <LL_RCC_GetAPB2Prescaler+0x14>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	40021000 	.word	0x40021000

08003300 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <LL_RCC_PLL_GetMainSource+0x14>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	40021000 	.word	0x40021000

08003318 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	40021000 	.word	0x40021000

08003330 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <LL_RCC_PLL_GetPrediv+0x18>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c5b      	lsrs	r3, r3, #17
 800333a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000

0800334c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003354:	f000 f820 	bl	8003398 <RCC_GetSystemClockFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f83a 	bl	80033dc <RCC_GetHCLKClockFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f848 	bl	8003408 <RCC_GetPCLK1ClockFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f854 	bl	8003430 <RCC_GetPCLK2ClockFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60da      	str	r2, [r3, #12]
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80033a2:	f7ff ff7d 	bl	80032a0 <LL_RCC_GetSysClkSource>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d006      	beq.n	80033ba <RCC_GetSystemClockFreq+0x22>
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d007      	beq.n	80033c0 <RCC_GetSystemClockFreq+0x28>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <RCC_GetSystemClockFreq+0x40>)
 80033b6:	607b      	str	r3, [r7, #4]
      break;
 80033b8:	e009      	b.n	80033ce <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <RCC_GetSystemClockFreq+0x40>)
 80033bc:	607b      	str	r3, [r7, #4]
      break;
 80033be:	e006      	b.n	80033ce <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80033c0:	f000 f84a 	bl	8003458 <RCC_PLL_GetFreqDomain_SYS>
 80033c4:	6078      	str	r0, [r7, #4]
      break;
 80033c6:	e002      	b.n	80033ce <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <RCC_GetSystemClockFreq+0x40>)
 80033ca:	607b      	str	r3, [r7, #4]
      break;
 80033cc:	bf00      	nop
  }

  return frequency;
 80033ce:	687b      	ldr	r3, [r7, #4]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	007a1200 	.word	0x007a1200

080033dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80033e4:	f7ff ff68 	bl	80032b8 <LL_RCC_GetAHBPrescaler>
 80033e8:	4603      	mov	r3, r0
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	4a04      	ldr	r2, [pc, #16]	; (8003404 <RCC_GetHCLKClockFreq+0x28>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	461a      	mov	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	40d3      	lsrs	r3, r2
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	08005dc0 	.word	0x08005dc0

08003408 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003410:	f7ff ff5e 	bl	80032d0 <LL_RCC_GetAPB1Prescaler>
 8003414:	4603      	mov	r3, r0
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <RCC_GetPCLK1ClockFreq+0x24>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	461a      	mov	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	40d3      	lsrs	r3, r2
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	08005dd0 	.word	0x08005dd0

08003430 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003438:	f7ff ff56 	bl	80032e8 <LL_RCC_GetAPB2Prescaler>
 800343c:	4603      	mov	r3, r0
 800343e:	0adb      	lsrs	r3, r3, #11
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <RCC_GetPCLK2ClockFreq+0x24>)
 8003442:	5cd3      	ldrb	r3, [r2, r3]
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	40d3      	lsrs	r3, r2
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	08005dd0 	.word	0x08005dd0

08003458 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	2300      	movs	r3, #0
 8003464:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003466:	f7ff ff4b 	bl	8003300 <LL_RCC_PLL_GetMainSource>
 800346a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8003472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003476:	d003      	beq.n	8003480 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003478:	e00b      	b.n	8003492 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 800347c:	607b      	str	r3, [r7, #4]
      break;
 800347e:	e00b      	b.n	8003498 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003480:	f7ff ff56 	bl	8003330 <LL_RCC_PLL_GetPrediv>
 8003484:	4603      	mov	r3, r0
 8003486:	3301      	adds	r3, #1
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	607b      	str	r3, [r7, #4]
      break;
 8003490:	e002      	b.n	8003498 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003494:	607b      	str	r3, [r7, #4]
      break;
 8003496:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003498:	f7ff ff3e 	bl	8003318 <LL_RCC_PLL_GetMultiplicator>
 800349c:	4603      	mov	r3, r0
 800349e:	0c9b      	lsrs	r3, r3, #18
 80034a0:	3302      	adds	r3, #2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	003d0900 	.word	0x003d0900
 80034b4:	007a1200 	.word	0x007a1200

080034b8 <LL_USART_IsEnabled>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <LL_USART_SetStopBitsLength>:
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	611a      	str	r2, [r3, #16]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <LL_USART_SetHWFlowCtrl>:
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	615a      	str	r2, [r3, #20]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
	...

08003528 <LL_USART_SetBaudRate>:
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009a      	lsls	r2, r3, #2
 800353e:	441a      	add	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <LL_USART_SetBaudRate+0xb8>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	b29b      	uxth	r3, r3
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	b299      	uxth	r1, r3
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009a      	lsls	r2, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	fbb2 f2f3 	udiv	r2, r2, r3
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <LL_USART_SetBaudRate+0xb8>)
 800356c:	fba3 0302 	umull	r0, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2064      	movs	r0, #100	; 0x64
 8003574:	fb00 f303 	mul.w	r3, r0, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	3332      	adds	r3, #50	; 0x32
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <LL_USART_SetBaudRate+0xb8>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	b29b      	uxth	r3, r3
 8003588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800358c:	b29b      	uxth	r3, r3
 800358e:	440b      	add	r3, r1
 8003590:	b299      	uxth	r1, r3
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009a      	lsls	r2, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <LL_USART_SetBaudRate+0xb8>)
 80035a8:	fba3 0302 	umull	r0, r3, r3, r2
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	2064      	movs	r0, #100	; 0x64
 80035b0:	fb00 f303 	mul.w	r3, r0, r3
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	3332      	adds	r3, #50	; 0x32
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <LL_USART_SetBaudRate+0xb8>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	440b      	add	r3, r1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	609a      	str	r2, [r3, #8]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	51eb851f 	.word	0x51eb851f

080035e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80035ee:	2300      	movs	r3, #0
 80035f0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ff5e 	bl	80034b8 <LL_USART_IsEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d145      	bne.n	800368e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800360a:	f023 030c 	bic.w	r3, r3, #12
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	6851      	ldr	r1, [r2, #4]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	68d2      	ldr	r2, [r2, #12]
 8003616:	4311      	orrs	r1, r2
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	6912      	ldr	r2, [r2, #16]
 800361c:	430a      	orrs	r2, r1
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff57 	bl	80034de <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ff63 	bl	8003502 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800363c:	f107 0308 	add.w	r3, r7, #8
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fe83 	bl	800334c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a13      	ldr	r2, [pc, #76]	; (8003698 <LL_USART_Init+0xb4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d102      	bne.n	8003654 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	e00c      	b.n	800366e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a11      	ldr	r2, [pc, #68]	; (800369c <LL_USART_Init+0xb8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d102      	bne.n	8003662 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	e005      	b.n	800366e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <LL_USART_Init+0xbc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 800367c:	2301      	movs	r3, #1
 800367e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	69b9      	ldr	r1, [r7, #24]
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff4d 	bl	8003528 <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800368e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013800 	.word	0x40013800
 800369c:	40004400 	.word	0x40004400
 80036a0:	40004800 	.word	0x40004800

080036a4 <main>:
 */

#include "main.h"

int main(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  hwInit();
 80036a8:	f7fd fe81 	bl	80013ae <hwInit>
  apInit();
 80036ac:	f7fd faaa 	bl	8000c04 <apInit>

  apMain();
 80036b0:	f7fd faae 	bl	8000c10 <apMain>

  return 0;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <__errno>:
 80036bc:	4b01      	ldr	r3, [pc, #4]	; (80036c4 <__errno+0x8>)
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	2000000c 	.word	0x2000000c

080036c8 <__libc_init_array>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	2500      	movs	r5, #0
 80036cc:	4e0c      	ldr	r6, [pc, #48]	; (8003700 <__libc_init_array+0x38>)
 80036ce:	4c0d      	ldr	r4, [pc, #52]	; (8003704 <__libc_init_array+0x3c>)
 80036d0:	1ba4      	subs	r4, r4, r6
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	42a5      	cmp	r5, r4
 80036d6:	d109      	bne.n	80036ec <__libc_init_array+0x24>
 80036d8:	f002 fb48 	bl	8005d6c <_init>
 80036dc:	2500      	movs	r5, #0
 80036de:	4e0a      	ldr	r6, [pc, #40]	; (8003708 <__libc_init_array+0x40>)
 80036e0:	4c0a      	ldr	r4, [pc, #40]	; (800370c <__libc_init_array+0x44>)
 80036e2:	1ba4      	subs	r4, r4, r6
 80036e4:	10a4      	asrs	r4, r4, #2
 80036e6:	42a5      	cmp	r5, r4
 80036e8:	d105      	bne.n	80036f6 <__libc_init_array+0x2e>
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036f0:	4798      	blx	r3
 80036f2:	3501      	adds	r5, #1
 80036f4:	e7ee      	b.n	80036d4 <__libc_init_array+0xc>
 80036f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036fa:	4798      	blx	r3
 80036fc:	3501      	adds	r5, #1
 80036fe:	e7f2      	b.n	80036e6 <__libc_init_array+0x1e>
 8003700:	08006098 	.word	0x08006098
 8003704:	08006098 	.word	0x08006098
 8003708:	08006098 	.word	0x08006098
 800370c:	0800609c 	.word	0x0800609c

08003710 <memset>:
 8003710:	4603      	mov	r3, r0
 8003712:	4402      	add	r2, r0
 8003714:	4293      	cmp	r3, r2
 8003716:	d100      	bne.n	800371a <memset+0xa>
 8003718:	4770      	bx	lr
 800371a:	f803 1b01 	strb.w	r1, [r3], #1
 800371e:	e7f9      	b.n	8003714 <memset+0x4>

08003720 <__cvt>:
 8003720:	2b00      	cmp	r3, #0
 8003722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003726:	461e      	mov	r6, r3
 8003728:	bfbb      	ittet	lt
 800372a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800372e:	461e      	movlt	r6, r3
 8003730:	2300      	movge	r3, #0
 8003732:	232d      	movlt	r3, #45	; 0x2d
 8003734:	b088      	sub	sp, #32
 8003736:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003738:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800373c:	f027 0720 	bic.w	r7, r7, #32
 8003740:	2f46      	cmp	r7, #70	; 0x46
 8003742:	4614      	mov	r4, r2
 8003744:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003746:	700b      	strb	r3, [r1, #0]
 8003748:	d004      	beq.n	8003754 <__cvt+0x34>
 800374a:	2f45      	cmp	r7, #69	; 0x45
 800374c:	d100      	bne.n	8003750 <__cvt+0x30>
 800374e:	3501      	adds	r5, #1
 8003750:	2302      	movs	r3, #2
 8003752:	e000      	b.n	8003756 <__cvt+0x36>
 8003754:	2303      	movs	r3, #3
 8003756:	aa07      	add	r2, sp, #28
 8003758:	9204      	str	r2, [sp, #16]
 800375a:	aa06      	add	r2, sp, #24
 800375c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003760:	e9cd 3500 	strd	r3, r5, [sp]
 8003764:	4622      	mov	r2, r4
 8003766:	4633      	mov	r3, r6
 8003768:	f000 fcd2 	bl	8004110 <_dtoa_r>
 800376c:	2f47      	cmp	r7, #71	; 0x47
 800376e:	4680      	mov	r8, r0
 8003770:	d102      	bne.n	8003778 <__cvt+0x58>
 8003772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003774:	07db      	lsls	r3, r3, #31
 8003776:	d526      	bpl.n	80037c6 <__cvt+0xa6>
 8003778:	2f46      	cmp	r7, #70	; 0x46
 800377a:	eb08 0905 	add.w	r9, r8, r5
 800377e:	d111      	bne.n	80037a4 <__cvt+0x84>
 8003780:	f898 3000 	ldrb.w	r3, [r8]
 8003784:	2b30      	cmp	r3, #48	; 0x30
 8003786:	d10a      	bne.n	800379e <__cvt+0x7e>
 8003788:	2200      	movs	r2, #0
 800378a:	2300      	movs	r3, #0
 800378c:	4620      	mov	r0, r4
 800378e:	4631      	mov	r1, r6
 8003790:	f7fd f90a 	bl	80009a8 <__aeabi_dcmpeq>
 8003794:	b918      	cbnz	r0, 800379e <__cvt+0x7e>
 8003796:	f1c5 0501 	rsb	r5, r5, #1
 800379a:	f8ca 5000 	str.w	r5, [sl]
 800379e:	f8da 3000 	ldr.w	r3, [sl]
 80037a2:	4499      	add	r9, r3
 80037a4:	2200      	movs	r2, #0
 80037a6:	2300      	movs	r3, #0
 80037a8:	4620      	mov	r0, r4
 80037aa:	4631      	mov	r1, r6
 80037ac:	f7fd f8fc 	bl	80009a8 <__aeabi_dcmpeq>
 80037b0:	b938      	cbnz	r0, 80037c2 <__cvt+0xa2>
 80037b2:	2230      	movs	r2, #48	; 0x30
 80037b4:	9b07      	ldr	r3, [sp, #28]
 80037b6:	454b      	cmp	r3, r9
 80037b8:	d205      	bcs.n	80037c6 <__cvt+0xa6>
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	9107      	str	r1, [sp, #28]
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e7f8      	b.n	80037b4 <__cvt+0x94>
 80037c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80037c6:	4640      	mov	r0, r8
 80037c8:	9b07      	ldr	r3, [sp, #28]
 80037ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80037cc:	eba3 0308 	sub.w	r3, r3, r8
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	b008      	add	sp, #32
 80037d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080037d8 <__exponent>:
 80037d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037da:	2900      	cmp	r1, #0
 80037dc:	bfb4      	ite	lt
 80037de:	232d      	movlt	r3, #45	; 0x2d
 80037e0:	232b      	movge	r3, #43	; 0x2b
 80037e2:	4604      	mov	r4, r0
 80037e4:	bfb8      	it	lt
 80037e6:	4249      	neglt	r1, r1
 80037e8:	2909      	cmp	r1, #9
 80037ea:	f804 2b02 	strb.w	r2, [r4], #2
 80037ee:	7043      	strb	r3, [r0, #1]
 80037f0:	dd21      	ble.n	8003836 <__exponent+0x5e>
 80037f2:	f10d 0307 	add.w	r3, sp, #7
 80037f6:	461f      	mov	r7, r3
 80037f8:	260a      	movs	r6, #10
 80037fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80037fe:	fb06 1115 	mls	r1, r6, r5, r1
 8003802:	2d09      	cmp	r5, #9
 8003804:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003808:	f803 1c01 	strb.w	r1, [r3, #-1]
 800380c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003810:	4629      	mov	r1, r5
 8003812:	dc09      	bgt.n	8003828 <__exponent+0x50>
 8003814:	3130      	adds	r1, #48	; 0x30
 8003816:	3b02      	subs	r3, #2
 8003818:	f802 1c01 	strb.w	r1, [r2, #-1]
 800381c:	42bb      	cmp	r3, r7
 800381e:	4622      	mov	r2, r4
 8003820:	d304      	bcc.n	800382c <__exponent+0x54>
 8003822:	1a10      	subs	r0, r2, r0
 8003824:	b003      	add	sp, #12
 8003826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003828:	4613      	mov	r3, r2
 800382a:	e7e6      	b.n	80037fa <__exponent+0x22>
 800382c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003830:	f804 2b01 	strb.w	r2, [r4], #1
 8003834:	e7f2      	b.n	800381c <__exponent+0x44>
 8003836:	2330      	movs	r3, #48	; 0x30
 8003838:	4419      	add	r1, r3
 800383a:	7083      	strb	r3, [r0, #2]
 800383c:	1d02      	adds	r2, r0, #4
 800383e:	70c1      	strb	r1, [r0, #3]
 8003840:	e7ef      	b.n	8003822 <__exponent+0x4a>
	...

08003844 <_printf_float>:
 8003844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003848:	b091      	sub	sp, #68	; 0x44
 800384a:	460c      	mov	r4, r1
 800384c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800384e:	4693      	mov	fp, r2
 8003850:	461e      	mov	r6, r3
 8003852:	4605      	mov	r5, r0
 8003854:	f001 fada 	bl	8004e0c <_localeconv_r>
 8003858:	6803      	ldr	r3, [r0, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	9309      	str	r3, [sp, #36]	; 0x24
 800385e:	f7fc fc77 	bl	8000150 <strlen>
 8003862:	2300      	movs	r3, #0
 8003864:	930e      	str	r3, [sp, #56]	; 0x38
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	900a      	str	r0, [sp, #40]	; 0x28
 800386a:	3307      	adds	r3, #7
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	f103 0208 	add.w	r2, r3, #8
 8003874:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003878:	f8d4 a000 	ldr.w	sl, [r4]
 800387c:	603a      	str	r2, [r7, #0]
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003886:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800388a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800388e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003890:	f04f 32ff 	mov.w	r2, #4294967295
 8003894:	4ba6      	ldr	r3, [pc, #664]	; (8003b30 <_printf_float+0x2ec>)
 8003896:	4638      	mov	r0, r7
 8003898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800389a:	f7fd f8b7 	bl	8000a0c <__aeabi_dcmpun>
 800389e:	bb68      	cbnz	r0, 80038fc <_printf_float+0xb8>
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	4ba2      	ldr	r3, [pc, #648]	; (8003b30 <_printf_float+0x2ec>)
 80038a6:	4638      	mov	r0, r7
 80038a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038aa:	f7fd f891 	bl	80009d0 <__aeabi_dcmple>
 80038ae:	bb28      	cbnz	r0, 80038fc <_printf_float+0xb8>
 80038b0:	2200      	movs	r2, #0
 80038b2:	2300      	movs	r3, #0
 80038b4:	4638      	mov	r0, r7
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fd f880 	bl	80009bc <__aeabi_dcmplt>
 80038bc:	b110      	cbz	r0, 80038c4 <_printf_float+0x80>
 80038be:	232d      	movs	r3, #45	; 0x2d
 80038c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c4:	4f9b      	ldr	r7, [pc, #620]	; (8003b34 <_printf_float+0x2f0>)
 80038c6:	4b9c      	ldr	r3, [pc, #624]	; (8003b38 <_printf_float+0x2f4>)
 80038c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80038cc:	bf98      	it	ls
 80038ce:	461f      	movls	r7, r3
 80038d0:	2303      	movs	r3, #3
 80038d2:	f04f 0900 	mov.w	r9, #0
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	f02a 0304 	bic.w	r3, sl, #4
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	9600      	str	r6, [sp, #0]
 80038e0:	465b      	mov	r3, fp
 80038e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80038e4:	4621      	mov	r1, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	f000 f9e2 	bl	8003cb0 <_printf_common>
 80038ec:	3001      	adds	r0, #1
 80038ee:	f040 8090 	bne.w	8003a12 <_printf_float+0x1ce>
 80038f2:	f04f 30ff 	mov.w	r0, #4294967295
 80038f6:	b011      	add	sp, #68	; 0x44
 80038f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fc:	463a      	mov	r2, r7
 80038fe:	464b      	mov	r3, r9
 8003900:	4638      	mov	r0, r7
 8003902:	4649      	mov	r1, r9
 8003904:	f7fd f882 	bl	8000a0c <__aeabi_dcmpun>
 8003908:	b110      	cbz	r0, 8003910 <_printf_float+0xcc>
 800390a:	4f8c      	ldr	r7, [pc, #560]	; (8003b3c <_printf_float+0x2f8>)
 800390c:	4b8c      	ldr	r3, [pc, #560]	; (8003b40 <_printf_float+0x2fc>)
 800390e:	e7db      	b.n	80038c8 <_printf_float+0x84>
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	a80d      	add	r0, sp, #52	; 0x34
 800391a:	a90e      	add	r1, sp, #56	; 0x38
 800391c:	d140      	bne.n	80039a0 <_printf_float+0x15c>
 800391e:	2306      	movs	r3, #6
 8003920:	6063      	str	r3, [r4, #4]
 8003922:	f04f 0c00 	mov.w	ip, #0
 8003926:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800392a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	6022      	str	r2, [r4, #0]
 8003932:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	463a      	mov	r2, r7
 800393a:	464b      	mov	r3, r9
 800393c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003940:	4628      	mov	r0, r5
 8003942:	f7ff feed 	bl	8003720 <__cvt>
 8003946:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800394a:	2b47      	cmp	r3, #71	; 0x47
 800394c:	4607      	mov	r7, r0
 800394e:	d109      	bne.n	8003964 <_printf_float+0x120>
 8003950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003952:	1cd8      	adds	r0, r3, #3
 8003954:	db02      	blt.n	800395c <_printf_float+0x118>
 8003956:	6862      	ldr	r2, [r4, #4]
 8003958:	4293      	cmp	r3, r2
 800395a:	dd47      	ble.n	80039ec <_printf_float+0x1a8>
 800395c:	f1a8 0802 	sub.w	r8, r8, #2
 8003960:	fa5f f888 	uxtb.w	r8, r8
 8003964:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003968:	990d      	ldr	r1, [sp, #52]	; 0x34
 800396a:	d824      	bhi.n	80039b6 <_printf_float+0x172>
 800396c:	3901      	subs	r1, #1
 800396e:	4642      	mov	r2, r8
 8003970:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003974:	910d      	str	r1, [sp, #52]	; 0x34
 8003976:	f7ff ff2f 	bl	80037d8 <__exponent>
 800397a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800397c:	4681      	mov	r9, r0
 800397e:	1813      	adds	r3, r2, r0
 8003980:	2a01      	cmp	r2, #1
 8003982:	6123      	str	r3, [r4, #16]
 8003984:	dc02      	bgt.n	800398c <_printf_float+0x148>
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	07d1      	lsls	r1, r2, #31
 800398a:	d501      	bpl.n	8003990 <_printf_float+0x14c>
 800398c:	3301      	adds	r3, #1
 800398e:	6123      	str	r3, [r4, #16]
 8003990:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0a2      	beq.n	80038de <_printf_float+0x9a>
 8003998:	232d      	movs	r3, #45	; 0x2d
 800399a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800399e:	e79e      	b.n	80038de <_printf_float+0x9a>
 80039a0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80039a4:	f000 816e 	beq.w	8003c84 <_printf_float+0x440>
 80039a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039ac:	d1b9      	bne.n	8003922 <_printf_float+0xde>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1b7      	bne.n	8003922 <_printf_float+0xde>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e7b4      	b.n	8003920 <_printf_float+0xdc>
 80039b6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80039ba:	d119      	bne.n	80039f0 <_printf_float+0x1ac>
 80039bc:	2900      	cmp	r1, #0
 80039be:	6863      	ldr	r3, [r4, #4]
 80039c0:	dd0c      	ble.n	80039dc <_printf_float+0x198>
 80039c2:	6121      	str	r1, [r4, #16]
 80039c4:	b913      	cbnz	r3, 80039cc <_printf_float+0x188>
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	07d2      	lsls	r2, r2, #31
 80039ca:	d502      	bpl.n	80039d2 <_printf_float+0x18e>
 80039cc:	3301      	adds	r3, #1
 80039ce:	440b      	add	r3, r1
 80039d0:	6123      	str	r3, [r4, #16]
 80039d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039d4:	f04f 0900 	mov.w	r9, #0
 80039d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80039da:	e7d9      	b.n	8003990 <_printf_float+0x14c>
 80039dc:	b913      	cbnz	r3, 80039e4 <_printf_float+0x1a0>
 80039de:	6822      	ldr	r2, [r4, #0]
 80039e0:	07d0      	lsls	r0, r2, #31
 80039e2:	d501      	bpl.n	80039e8 <_printf_float+0x1a4>
 80039e4:	3302      	adds	r3, #2
 80039e6:	e7f3      	b.n	80039d0 <_printf_float+0x18c>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e7f1      	b.n	80039d0 <_printf_float+0x18c>
 80039ec:	f04f 0867 	mov.w	r8, #103	; 0x67
 80039f0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80039f4:	4293      	cmp	r3, r2
 80039f6:	db05      	blt.n	8003a04 <_printf_float+0x1c0>
 80039f8:	6822      	ldr	r2, [r4, #0]
 80039fa:	6123      	str	r3, [r4, #16]
 80039fc:	07d1      	lsls	r1, r2, #31
 80039fe:	d5e8      	bpl.n	80039d2 <_printf_float+0x18e>
 8003a00:	3301      	adds	r3, #1
 8003a02:	e7e5      	b.n	80039d0 <_printf_float+0x18c>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bfcc      	ite	gt
 8003a08:	2301      	movgt	r3, #1
 8003a0a:	f1c3 0302 	rsble	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	e7de      	b.n	80039d0 <_printf_float+0x18c>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	055a      	lsls	r2, r3, #21
 8003a16:	d407      	bmi.n	8003a28 <_printf_float+0x1e4>
 8003a18:	6923      	ldr	r3, [r4, #16]
 8003a1a:	463a      	mov	r2, r7
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	4628      	mov	r0, r5
 8003a20:	47b0      	blx	r6
 8003a22:	3001      	adds	r0, #1
 8003a24:	d129      	bne.n	8003a7a <_printf_float+0x236>
 8003a26:	e764      	b.n	80038f2 <_printf_float+0xae>
 8003a28:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003a2c:	f240 80d7 	bls.w	8003bde <_printf_float+0x39a>
 8003a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a34:	2200      	movs	r2, #0
 8003a36:	2300      	movs	r3, #0
 8003a38:	f7fc ffb6 	bl	80009a8 <__aeabi_dcmpeq>
 8003a3c:	b388      	cbz	r0, 8003aa2 <_printf_float+0x25e>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4a40      	ldr	r2, [pc, #256]	; (8003b44 <_printf_float+0x300>)
 8003a42:	4659      	mov	r1, fp
 8003a44:	4628      	mov	r0, r5
 8003a46:	47b0      	blx	r6
 8003a48:	3001      	adds	r0, #1
 8003a4a:	f43f af52 	beq.w	80038f2 <_printf_float+0xae>
 8003a4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a52:	429a      	cmp	r2, r3
 8003a54:	db02      	blt.n	8003a5c <_printf_float+0x218>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	07d8      	lsls	r0, r3, #31
 8003a5a:	d50e      	bpl.n	8003a7a <_printf_float+0x236>
 8003a5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a60:	4659      	mov	r1, fp
 8003a62:	4628      	mov	r0, r5
 8003a64:	47b0      	blx	r6
 8003a66:	3001      	adds	r0, #1
 8003a68:	f43f af43 	beq.w	80038f2 <_printf_float+0xae>
 8003a6c:	2700      	movs	r7, #0
 8003a6e:	f104 081a 	add.w	r8, r4, #26
 8003a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a74:	3b01      	subs	r3, #1
 8003a76:	42bb      	cmp	r3, r7
 8003a78:	dc09      	bgt.n	8003a8e <_printf_float+0x24a>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	079f      	lsls	r7, r3, #30
 8003a7e:	f100 80fd 	bmi.w	8003c7c <_printf_float+0x438>
 8003a82:	68e0      	ldr	r0, [r4, #12]
 8003a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a86:	4298      	cmp	r0, r3
 8003a88:	bfb8      	it	lt
 8003a8a:	4618      	movlt	r0, r3
 8003a8c:	e733      	b.n	80038f6 <_printf_float+0xb2>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4642      	mov	r2, r8
 8003a92:	4659      	mov	r1, fp
 8003a94:	4628      	mov	r0, r5
 8003a96:	47b0      	blx	r6
 8003a98:	3001      	adds	r0, #1
 8003a9a:	f43f af2a 	beq.w	80038f2 <_printf_float+0xae>
 8003a9e:	3701      	adds	r7, #1
 8003aa0:	e7e7      	b.n	8003a72 <_printf_float+0x22e>
 8003aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dc2b      	bgt.n	8003b00 <_printf_float+0x2bc>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <_printf_float+0x300>)
 8003aac:	4659      	mov	r1, fp
 8003aae:	4628      	mov	r0, r5
 8003ab0:	47b0      	blx	r6
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	f43f af1d 	beq.w	80038f2 <_printf_float+0xae>
 8003ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aba:	b923      	cbnz	r3, 8003ac6 <_printf_float+0x282>
 8003abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003abe:	b913      	cbnz	r3, 8003ac6 <_printf_float+0x282>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	07d9      	lsls	r1, r3, #31
 8003ac4:	d5d9      	bpl.n	8003a7a <_printf_float+0x236>
 8003ac6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003aca:	4659      	mov	r1, fp
 8003acc:	4628      	mov	r0, r5
 8003ace:	47b0      	blx	r6
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	f43f af0e 	beq.w	80038f2 <_printf_float+0xae>
 8003ad6:	f04f 0800 	mov.w	r8, #0
 8003ada:	f104 091a 	add.w	r9, r4, #26
 8003ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae0:	425b      	negs	r3, r3
 8003ae2:	4543      	cmp	r3, r8
 8003ae4:	dc01      	bgt.n	8003aea <_printf_float+0x2a6>
 8003ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ae8:	e797      	b.n	8003a1a <_printf_float+0x1d6>
 8003aea:	2301      	movs	r3, #1
 8003aec:	464a      	mov	r2, r9
 8003aee:	4659      	mov	r1, fp
 8003af0:	4628      	mov	r0, r5
 8003af2:	47b0      	blx	r6
 8003af4:	3001      	adds	r0, #1
 8003af6:	f43f aefc 	beq.w	80038f2 <_printf_float+0xae>
 8003afa:	f108 0801 	add.w	r8, r8, #1
 8003afe:	e7ee      	b.n	8003ade <_printf_float+0x29a>
 8003b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bfa8      	it	ge
 8003b08:	461a      	movge	r2, r3
 8003b0a:	2a00      	cmp	r2, #0
 8003b0c:	4690      	mov	r8, r2
 8003b0e:	dd07      	ble.n	8003b20 <_printf_float+0x2dc>
 8003b10:	4613      	mov	r3, r2
 8003b12:	4659      	mov	r1, fp
 8003b14:	463a      	mov	r2, r7
 8003b16:	4628      	mov	r0, r5
 8003b18:	47b0      	blx	r6
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	f43f aee9 	beq.w	80038f2 <_printf_float+0xae>
 8003b20:	f104 031a 	add.w	r3, r4, #26
 8003b24:	f04f 0a00 	mov.w	sl, #0
 8003b28:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b2e:	e015      	b.n	8003b5c <_printf_float+0x318>
 8003b30:	7fefffff 	.word	0x7fefffff
 8003b34:	08005de0 	.word	0x08005de0
 8003b38:	08005ddc 	.word	0x08005ddc
 8003b3c:	08005de8 	.word	0x08005de8
 8003b40:	08005de4 	.word	0x08005de4
 8003b44:	08005dec 	.word	0x08005dec
 8003b48:	2301      	movs	r3, #1
 8003b4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	4628      	mov	r0, r5
 8003b50:	47b0      	blx	r6
 8003b52:	3001      	adds	r0, #1
 8003b54:	f43f aecd 	beq.w	80038f2 <_printf_float+0xae>
 8003b58:	f10a 0a01 	add.w	sl, sl, #1
 8003b5c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003b60:	eba9 0308 	sub.w	r3, r9, r8
 8003b64:	4553      	cmp	r3, sl
 8003b66:	dcef      	bgt.n	8003b48 <_printf_float+0x304>
 8003b68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	444f      	add	r7, r9
 8003b70:	db14      	blt.n	8003b9c <_printf_float+0x358>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	07da      	lsls	r2, r3, #31
 8003b76:	d411      	bmi.n	8003b9c <_printf_float+0x358>
 8003b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b7c:	eba3 0209 	sub.w	r2, r3, r9
 8003b80:	eba3 0901 	sub.w	r9, r3, r1
 8003b84:	4591      	cmp	r9, r2
 8003b86:	bfa8      	it	ge
 8003b88:	4691      	movge	r9, r2
 8003b8a:	f1b9 0f00 	cmp.w	r9, #0
 8003b8e:	dc0d      	bgt.n	8003bac <_printf_float+0x368>
 8003b90:	2700      	movs	r7, #0
 8003b92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b96:	f104 081a 	add.w	r8, r4, #26
 8003b9a:	e018      	b.n	8003bce <_printf_float+0x38a>
 8003b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	47b0      	blx	r6
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d1e6      	bne.n	8003b78 <_printf_float+0x334>
 8003baa:	e6a2      	b.n	80038f2 <_printf_float+0xae>
 8003bac:	464b      	mov	r3, r9
 8003bae:	463a      	mov	r2, r7
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	47b0      	blx	r6
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d1ea      	bne.n	8003b90 <_printf_float+0x34c>
 8003bba:	e69a      	b.n	80038f2 <_printf_float+0xae>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	47b0      	blx	r6
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f43f ae93 	beq.w	80038f2 <_printf_float+0xae>
 8003bcc:	3701      	adds	r7, #1
 8003bce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	eba3 0309 	sub.w	r3, r3, r9
 8003bd8:	42bb      	cmp	r3, r7
 8003bda:	dcef      	bgt.n	8003bbc <_printf_float+0x378>
 8003bdc:	e74d      	b.n	8003a7a <_printf_float+0x236>
 8003bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003be0:	2a01      	cmp	r2, #1
 8003be2:	dc01      	bgt.n	8003be8 <_printf_float+0x3a4>
 8003be4:	07db      	lsls	r3, r3, #31
 8003be6:	d538      	bpl.n	8003c5a <_printf_float+0x416>
 8003be8:	2301      	movs	r3, #1
 8003bea:	463a      	mov	r2, r7
 8003bec:	4659      	mov	r1, fp
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b0      	blx	r6
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	f43f ae7d 	beq.w	80038f2 <_printf_float+0xae>
 8003bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	4628      	mov	r0, r5
 8003c00:	47b0      	blx	r6
 8003c02:	3001      	adds	r0, #1
 8003c04:	f107 0701 	add.w	r7, r7, #1
 8003c08:	f43f ae73 	beq.w	80038f2 <_printf_float+0xae>
 8003c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c12:	2200      	movs	r2, #0
 8003c14:	f103 38ff 	add.w	r8, r3, #4294967295
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f7fc fec5 	bl	80009a8 <__aeabi_dcmpeq>
 8003c1e:	b9c0      	cbnz	r0, 8003c52 <_printf_float+0x40e>
 8003c20:	4643      	mov	r3, r8
 8003c22:	463a      	mov	r2, r7
 8003c24:	4659      	mov	r1, fp
 8003c26:	4628      	mov	r0, r5
 8003c28:	47b0      	blx	r6
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	d10d      	bne.n	8003c4a <_printf_float+0x406>
 8003c2e:	e660      	b.n	80038f2 <_printf_float+0xae>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4642      	mov	r2, r8
 8003c34:	4659      	mov	r1, fp
 8003c36:	4628      	mov	r0, r5
 8003c38:	47b0      	blx	r6
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	f43f ae59 	beq.w	80038f2 <_printf_float+0xae>
 8003c40:	3701      	adds	r7, #1
 8003c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c44:	3b01      	subs	r3, #1
 8003c46:	42bb      	cmp	r3, r7
 8003c48:	dcf2      	bgt.n	8003c30 <_printf_float+0x3ec>
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c50:	e6e4      	b.n	8003a1c <_printf_float+0x1d8>
 8003c52:	2700      	movs	r7, #0
 8003c54:	f104 081a 	add.w	r8, r4, #26
 8003c58:	e7f3      	b.n	8003c42 <_printf_float+0x3fe>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e7e1      	b.n	8003c22 <_printf_float+0x3de>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4642      	mov	r2, r8
 8003c62:	4659      	mov	r1, fp
 8003c64:	4628      	mov	r0, r5
 8003c66:	47b0      	blx	r6
 8003c68:	3001      	adds	r0, #1
 8003c6a:	f43f ae42 	beq.w	80038f2 <_printf_float+0xae>
 8003c6e:	3701      	adds	r7, #1
 8003c70:	68e3      	ldr	r3, [r4, #12]
 8003c72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	42bb      	cmp	r3, r7
 8003c78:	dcf1      	bgt.n	8003c5e <_printf_float+0x41a>
 8003c7a:	e702      	b.n	8003a82 <_printf_float+0x23e>
 8003c7c:	2700      	movs	r7, #0
 8003c7e:	f104 0819 	add.w	r8, r4, #25
 8003c82:	e7f5      	b.n	8003c70 <_printf_float+0x42c>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f43f ae94 	beq.w	80039b2 <_printf_float+0x16e>
 8003c8a:	f04f 0c00 	mov.w	ip, #0
 8003c8e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003c92:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003c96:	6022      	str	r2, [r4, #0]
 8003c98:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003c9c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	463a      	mov	r2, r7
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7ff fd3a 	bl	8003720 <__cvt>
 8003cac:	4607      	mov	r7, r0
 8003cae:	e64f      	b.n	8003950 <_printf_float+0x10c>

08003cb0 <_printf_common>:
 8003cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	4691      	mov	r9, r2
 8003cb6:	461f      	mov	r7, r3
 8003cb8:	688a      	ldr	r2, [r1, #8]
 8003cba:	690b      	ldr	r3, [r1, #16]
 8003cbc:	4606      	mov	r6, r0
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	bfb8      	it	lt
 8003cc2:	4613      	movlt	r3, r2
 8003cc4:	f8c9 3000 	str.w	r3, [r9]
 8003cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ccc:	460c      	mov	r4, r1
 8003cce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cd2:	b112      	cbz	r2, 8003cda <_printf_common+0x2a>
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f8c9 3000 	str.w	r3, [r9]
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	0699      	lsls	r1, r3, #26
 8003cde:	bf42      	ittt	mi
 8003ce0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ce4:	3302      	addmi	r3, #2
 8003ce6:	f8c9 3000 	strmi.w	r3, [r9]
 8003cea:	6825      	ldr	r5, [r4, #0]
 8003cec:	f015 0506 	ands.w	r5, r5, #6
 8003cf0:	d107      	bne.n	8003d02 <_printf_common+0x52>
 8003cf2:	f104 0a19 	add.w	sl, r4, #25
 8003cf6:	68e3      	ldr	r3, [r4, #12]
 8003cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	42ab      	cmp	r3, r5
 8003d00:	dc29      	bgt.n	8003d56 <_printf_common+0xa6>
 8003d02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d06:	6822      	ldr	r2, [r4, #0]
 8003d08:	3300      	adds	r3, #0
 8003d0a:	bf18      	it	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	0692      	lsls	r2, r2, #26
 8003d10:	d42e      	bmi.n	8003d70 <_printf_common+0xc0>
 8003d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d16:	4639      	mov	r1, r7
 8003d18:	4630      	mov	r0, r6
 8003d1a:	47c0      	blx	r8
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d021      	beq.n	8003d64 <_printf_common+0xb4>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	68e5      	ldr	r5, [r4, #12]
 8003d24:	f003 0306 	and.w	r3, r3, #6
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	bf18      	it	ne
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	f8d9 2000 	ldr.w	r2, [r9]
 8003d32:	f04f 0900 	mov.w	r9, #0
 8003d36:	bf08      	it	eq
 8003d38:	1aad      	subeq	r5, r5, r2
 8003d3a:	68a3      	ldr	r3, [r4, #8]
 8003d3c:	6922      	ldr	r2, [r4, #16]
 8003d3e:	bf08      	it	eq
 8003d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d44:	4293      	cmp	r3, r2
 8003d46:	bfc4      	itt	gt
 8003d48:	1a9b      	subgt	r3, r3, r2
 8003d4a:	18ed      	addgt	r5, r5, r3
 8003d4c:	341a      	adds	r4, #26
 8003d4e:	454d      	cmp	r5, r9
 8003d50:	d11a      	bne.n	8003d88 <_printf_common+0xd8>
 8003d52:	2000      	movs	r0, #0
 8003d54:	e008      	b.n	8003d68 <_printf_common+0xb8>
 8003d56:	2301      	movs	r3, #1
 8003d58:	4652      	mov	r2, sl
 8003d5a:	4639      	mov	r1, r7
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	47c0      	blx	r8
 8003d60:	3001      	adds	r0, #1
 8003d62:	d103      	bne.n	8003d6c <_printf_common+0xbc>
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6c:	3501      	adds	r5, #1
 8003d6e:	e7c2      	b.n	8003cf6 <_printf_common+0x46>
 8003d70:	2030      	movs	r0, #48	; 0x30
 8003d72:	18e1      	adds	r1, r4, r3
 8003d74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d7e:	4422      	add	r2, r4
 8003d80:	3302      	adds	r3, #2
 8003d82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d86:	e7c4      	b.n	8003d12 <_printf_common+0x62>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4630      	mov	r0, r6
 8003d90:	47c0      	blx	r8
 8003d92:	3001      	adds	r0, #1
 8003d94:	d0e6      	beq.n	8003d64 <_printf_common+0xb4>
 8003d96:	f109 0901 	add.w	r9, r9, #1
 8003d9a:	e7d8      	b.n	8003d4e <_printf_common+0x9e>

08003d9c <_printf_i>:
 8003d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003da0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003da4:	460c      	mov	r4, r1
 8003da6:	7e09      	ldrb	r1, [r1, #24]
 8003da8:	b085      	sub	sp, #20
 8003daa:	296e      	cmp	r1, #110	; 0x6e
 8003dac:	4617      	mov	r7, r2
 8003dae:	4606      	mov	r6, r0
 8003db0:	4698      	mov	r8, r3
 8003db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003db4:	f000 80b3 	beq.w	8003f1e <_printf_i+0x182>
 8003db8:	d822      	bhi.n	8003e00 <_printf_i+0x64>
 8003dba:	2963      	cmp	r1, #99	; 0x63
 8003dbc:	d036      	beq.n	8003e2c <_printf_i+0x90>
 8003dbe:	d80a      	bhi.n	8003dd6 <_printf_i+0x3a>
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	f000 80b9 	beq.w	8003f38 <_printf_i+0x19c>
 8003dc6:	2958      	cmp	r1, #88	; 0x58
 8003dc8:	f000 8083 	beq.w	8003ed2 <_printf_i+0x136>
 8003dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003dd4:	e032      	b.n	8003e3c <_printf_i+0xa0>
 8003dd6:	2964      	cmp	r1, #100	; 0x64
 8003dd8:	d001      	beq.n	8003dde <_printf_i+0x42>
 8003dda:	2969      	cmp	r1, #105	; 0x69
 8003ddc:	d1f6      	bne.n	8003dcc <_printf_i+0x30>
 8003dde:	6820      	ldr	r0, [r4, #0]
 8003de0:	6813      	ldr	r3, [r2, #0]
 8003de2:	0605      	lsls	r5, r0, #24
 8003de4:	f103 0104 	add.w	r1, r3, #4
 8003de8:	d52a      	bpl.n	8003e40 <_printf_i+0xa4>
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6011      	str	r1, [r2, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da03      	bge.n	8003dfa <_printf_i+0x5e>
 8003df2:	222d      	movs	r2, #45	; 0x2d
 8003df4:	425b      	negs	r3, r3
 8003df6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dfa:	486f      	ldr	r0, [pc, #444]	; (8003fb8 <_printf_i+0x21c>)
 8003dfc:	220a      	movs	r2, #10
 8003dfe:	e039      	b.n	8003e74 <_printf_i+0xd8>
 8003e00:	2973      	cmp	r1, #115	; 0x73
 8003e02:	f000 809d 	beq.w	8003f40 <_printf_i+0x1a4>
 8003e06:	d808      	bhi.n	8003e1a <_printf_i+0x7e>
 8003e08:	296f      	cmp	r1, #111	; 0x6f
 8003e0a:	d020      	beq.n	8003e4e <_printf_i+0xb2>
 8003e0c:	2970      	cmp	r1, #112	; 0x70
 8003e0e:	d1dd      	bne.n	8003dcc <_printf_i+0x30>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	f043 0320 	orr.w	r3, r3, #32
 8003e16:	6023      	str	r3, [r4, #0]
 8003e18:	e003      	b.n	8003e22 <_printf_i+0x86>
 8003e1a:	2975      	cmp	r1, #117	; 0x75
 8003e1c:	d017      	beq.n	8003e4e <_printf_i+0xb2>
 8003e1e:	2978      	cmp	r1, #120	; 0x78
 8003e20:	d1d4      	bne.n	8003dcc <_printf_i+0x30>
 8003e22:	2378      	movs	r3, #120	; 0x78
 8003e24:	4865      	ldr	r0, [pc, #404]	; (8003fbc <_printf_i+0x220>)
 8003e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e2a:	e055      	b.n	8003ed8 <_printf_i+0x13c>
 8003e2c:	6813      	ldr	r3, [r2, #0]
 8003e2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e32:	1d19      	adds	r1, r3, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6011      	str	r1, [r2, #0]
 8003e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e08c      	b.n	8003f5a <_printf_i+0x1be>
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e46:	6011      	str	r1, [r2, #0]
 8003e48:	bf18      	it	ne
 8003e4a:	b21b      	sxthne	r3, r3
 8003e4c:	e7cf      	b.n	8003dee <_printf_i+0x52>
 8003e4e:	6813      	ldr	r3, [r2, #0]
 8003e50:	6825      	ldr	r5, [r4, #0]
 8003e52:	1d18      	adds	r0, r3, #4
 8003e54:	6010      	str	r0, [r2, #0]
 8003e56:	0628      	lsls	r0, r5, #24
 8003e58:	d501      	bpl.n	8003e5e <_printf_i+0xc2>
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	e002      	b.n	8003e64 <_printf_i+0xc8>
 8003e5e:	0668      	lsls	r0, r5, #25
 8003e60:	d5fb      	bpl.n	8003e5a <_printf_i+0xbe>
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	296f      	cmp	r1, #111	; 0x6f
 8003e66:	bf14      	ite	ne
 8003e68:	220a      	movne	r2, #10
 8003e6a:	2208      	moveq	r2, #8
 8003e6c:	4852      	ldr	r0, [pc, #328]	; (8003fb8 <_printf_i+0x21c>)
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e74:	6865      	ldr	r5, [r4, #4]
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	60a5      	str	r5, [r4, #8]
 8003e7a:	f2c0 8095 	blt.w	8003fa8 <_printf_i+0x20c>
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	f021 0104 	bic.w	r1, r1, #4
 8003e84:	6021      	str	r1, [r4, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d13d      	bne.n	8003f06 <_printf_i+0x16a>
 8003e8a:	2d00      	cmp	r5, #0
 8003e8c:	f040 808e 	bne.w	8003fac <_printf_i+0x210>
 8003e90:	4665      	mov	r5, ip
 8003e92:	2a08      	cmp	r2, #8
 8003e94:	d10b      	bne.n	8003eae <_printf_i+0x112>
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	07db      	lsls	r3, r3, #31
 8003e9a:	d508      	bpl.n	8003eae <_printf_i+0x112>
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	6862      	ldr	r2, [r4, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	bfde      	ittt	le
 8003ea4:	2330      	movle	r3, #48	; 0x30
 8003ea6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003eae:	ebac 0305 	sub.w	r3, ip, r5
 8003eb2:	6123      	str	r3, [r4, #16]
 8003eb4:	f8cd 8000 	str.w	r8, [sp]
 8003eb8:	463b      	mov	r3, r7
 8003eba:	aa03      	add	r2, sp, #12
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f7ff fef6 	bl	8003cb0 <_printf_common>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d14d      	bne.n	8003f64 <_printf_i+0x1c8>
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	b005      	add	sp, #20
 8003ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ed2:	4839      	ldr	r0, [pc, #228]	; (8003fb8 <_printf_i+0x21c>)
 8003ed4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ed8:	6813      	ldr	r3, [r2, #0]
 8003eda:	6821      	ldr	r1, [r4, #0]
 8003edc:	1d1d      	adds	r5, r3, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6015      	str	r5, [r2, #0]
 8003ee2:	060a      	lsls	r2, r1, #24
 8003ee4:	d50b      	bpl.n	8003efe <_printf_i+0x162>
 8003ee6:	07ca      	lsls	r2, r1, #31
 8003ee8:	bf44      	itt	mi
 8003eea:	f041 0120 	orrmi.w	r1, r1, #32
 8003eee:	6021      	strmi	r1, [r4, #0]
 8003ef0:	b91b      	cbnz	r3, 8003efa <_printf_i+0x15e>
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	f022 0220 	bic.w	r2, r2, #32
 8003ef8:	6022      	str	r2, [r4, #0]
 8003efa:	2210      	movs	r2, #16
 8003efc:	e7b7      	b.n	8003e6e <_printf_i+0xd2>
 8003efe:	064d      	lsls	r5, r1, #25
 8003f00:	bf48      	it	mi
 8003f02:	b29b      	uxthmi	r3, r3
 8003f04:	e7ef      	b.n	8003ee6 <_printf_i+0x14a>
 8003f06:	4665      	mov	r5, ip
 8003f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f0c:	fb02 3311 	mls	r3, r2, r1, r3
 8003f10:	5cc3      	ldrb	r3, [r0, r3]
 8003f12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f16:	460b      	mov	r3, r1
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	d1f5      	bne.n	8003f08 <_printf_i+0x16c>
 8003f1c:	e7b9      	b.n	8003e92 <_printf_i+0xf6>
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	6825      	ldr	r5, [r4, #0]
 8003f22:	1d18      	adds	r0, r3, #4
 8003f24:	6961      	ldr	r1, [r4, #20]
 8003f26:	6010      	str	r0, [r2, #0]
 8003f28:	0628      	lsls	r0, r5, #24
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	d501      	bpl.n	8003f32 <_printf_i+0x196>
 8003f2e:	6019      	str	r1, [r3, #0]
 8003f30:	e002      	b.n	8003f38 <_printf_i+0x19c>
 8003f32:	066a      	lsls	r2, r5, #25
 8003f34:	d5fb      	bpl.n	8003f2e <_printf_i+0x192>
 8003f36:	8019      	strh	r1, [r3, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4665      	mov	r5, ip
 8003f3c:	6123      	str	r3, [r4, #16]
 8003f3e:	e7b9      	b.n	8003eb4 <_printf_i+0x118>
 8003f40:	6813      	ldr	r3, [r2, #0]
 8003f42:	1d19      	adds	r1, r3, #4
 8003f44:	6011      	str	r1, [r2, #0]
 8003f46:	681d      	ldr	r5, [r3, #0]
 8003f48:	6862      	ldr	r2, [r4, #4]
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f000 ff73 	bl	8004e38 <memchr>
 8003f52:	b108      	cbz	r0, 8003f58 <_printf_i+0x1bc>
 8003f54:	1b40      	subs	r0, r0, r5
 8003f56:	6060      	str	r0, [r4, #4]
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	6123      	str	r3, [r4, #16]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f62:	e7a7      	b.n	8003eb4 <_printf_i+0x118>
 8003f64:	6923      	ldr	r3, [r4, #16]
 8003f66:	462a      	mov	r2, r5
 8003f68:	4639      	mov	r1, r7
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	47c0      	blx	r8
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d0aa      	beq.n	8003ec8 <_printf_i+0x12c>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	079b      	lsls	r3, r3, #30
 8003f76:	d413      	bmi.n	8003fa0 <_printf_i+0x204>
 8003f78:	68e0      	ldr	r0, [r4, #12]
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	4298      	cmp	r0, r3
 8003f7e:	bfb8      	it	lt
 8003f80:	4618      	movlt	r0, r3
 8003f82:	e7a3      	b.n	8003ecc <_printf_i+0x130>
 8003f84:	2301      	movs	r3, #1
 8003f86:	464a      	mov	r2, r9
 8003f88:	4639      	mov	r1, r7
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	47c0      	blx	r8
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d09a      	beq.n	8003ec8 <_printf_i+0x12c>
 8003f92:	3501      	adds	r5, #1
 8003f94:	68e3      	ldr	r3, [r4, #12]
 8003f96:	9a03      	ldr	r2, [sp, #12]
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	42ab      	cmp	r3, r5
 8003f9c:	dcf2      	bgt.n	8003f84 <_printf_i+0x1e8>
 8003f9e:	e7eb      	b.n	8003f78 <_printf_i+0x1dc>
 8003fa0:	2500      	movs	r5, #0
 8003fa2:	f104 0919 	add.w	r9, r4, #25
 8003fa6:	e7f5      	b.n	8003f94 <_printf_i+0x1f8>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ac      	bne.n	8003f06 <_printf_i+0x16a>
 8003fac:	7803      	ldrb	r3, [r0, #0]
 8003fae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb6:	e76c      	b.n	8003e92 <_printf_i+0xf6>
 8003fb8:	08005dee 	.word	0x08005dee
 8003fbc:	08005dff 	.word	0x08005dff

08003fc0 <iprintf>:
 8003fc0:	b40f      	push	{r0, r1, r2, r3}
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <iprintf+0x2c>)
 8003fc4:	b513      	push	{r0, r1, r4, lr}
 8003fc6:	681c      	ldr	r4, [r3, #0]
 8003fc8:	b124      	cbz	r4, 8003fd4 <iprintf+0x14>
 8003fca:	69a3      	ldr	r3, [r4, #24]
 8003fcc:	b913      	cbnz	r3, 8003fd4 <iprintf+0x14>
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f000 fe92 	bl	8004cf8 <__sinit>
 8003fd4:	ab05      	add	r3, sp, #20
 8003fd6:	9a04      	ldr	r2, [sp, #16]
 8003fd8:	68a1      	ldr	r1, [r4, #8]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	f001 fafd 	bl	80055dc <_vfiprintf_r>
 8003fe2:	b002      	add	sp, #8
 8003fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe8:	b004      	add	sp, #16
 8003fea:	4770      	bx	lr
 8003fec:	2000000c 	.word	0x2000000c

08003ff0 <quorem>:
 8003ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	6903      	ldr	r3, [r0, #16]
 8003ff6:	690c      	ldr	r4, [r1, #16]
 8003ff8:	4680      	mov	r8, r0
 8003ffa:	42a3      	cmp	r3, r4
 8003ffc:	f2c0 8084 	blt.w	8004108 <quorem+0x118>
 8004000:	3c01      	subs	r4, #1
 8004002:	f101 0714 	add.w	r7, r1, #20
 8004006:	f100 0614 	add.w	r6, r0, #20
 800400a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800400e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004012:	3501      	adds	r5, #1
 8004014:	fbb0 f5f5 	udiv	r5, r0, r5
 8004018:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800401c:	eb06 030c 	add.w	r3, r6, ip
 8004020:	eb07 090c 	add.w	r9, r7, ip
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	b39d      	cbz	r5, 8004090 <quorem+0xa0>
 8004028:	f04f 0a00 	mov.w	sl, #0
 800402c:	4638      	mov	r0, r7
 800402e:	46b6      	mov	lr, r6
 8004030:	46d3      	mov	fp, sl
 8004032:	f850 2b04 	ldr.w	r2, [r0], #4
 8004036:	b293      	uxth	r3, r2
 8004038:	fb05 a303 	mla	r3, r5, r3, sl
 800403c:	0c12      	lsrs	r2, r2, #16
 800403e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004042:	fb05 a202 	mla	r2, r5, r2, sl
 8004046:	b29b      	uxth	r3, r3
 8004048:	ebab 0303 	sub.w	r3, fp, r3
 800404c:	f8de b000 	ldr.w	fp, [lr]
 8004050:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004054:	fa1f fb8b 	uxth.w	fp, fp
 8004058:	445b      	add	r3, fp
 800405a:	fa1f fb82 	uxth.w	fp, r2
 800405e:	f8de 2000 	ldr.w	r2, [lr]
 8004062:	4581      	cmp	r9, r0
 8004064:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800406c:	b29b      	uxth	r3, r3
 800406e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004072:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004076:	f84e 3b04 	str.w	r3, [lr], #4
 800407a:	d2da      	bcs.n	8004032 <quorem+0x42>
 800407c:	f856 300c 	ldr.w	r3, [r6, ip]
 8004080:	b933      	cbnz	r3, 8004090 <quorem+0xa0>
 8004082:	9b01      	ldr	r3, [sp, #4]
 8004084:	3b04      	subs	r3, #4
 8004086:	429e      	cmp	r6, r3
 8004088:	461a      	mov	r2, r3
 800408a:	d331      	bcc.n	80040f0 <quorem+0x100>
 800408c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004090:	4640      	mov	r0, r8
 8004092:	f001 f8ff 	bl	8005294 <__mcmp>
 8004096:	2800      	cmp	r0, #0
 8004098:	db26      	blt.n	80040e8 <quorem+0xf8>
 800409a:	4630      	mov	r0, r6
 800409c:	f04f 0c00 	mov.w	ip, #0
 80040a0:	3501      	adds	r5, #1
 80040a2:	f857 1b04 	ldr.w	r1, [r7], #4
 80040a6:	f8d0 e000 	ldr.w	lr, [r0]
 80040aa:	b28b      	uxth	r3, r1
 80040ac:	ebac 0303 	sub.w	r3, ip, r3
 80040b0:	fa1f f28e 	uxth.w	r2, lr
 80040b4:	4413      	add	r3, r2
 80040b6:	0c0a      	lsrs	r2, r1, #16
 80040b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80040bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040c6:	45b9      	cmp	r9, r7
 80040c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80040cc:	f840 3b04 	str.w	r3, [r0], #4
 80040d0:	d2e7      	bcs.n	80040a2 <quorem+0xb2>
 80040d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80040d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80040da:	b92a      	cbnz	r2, 80040e8 <quorem+0xf8>
 80040dc:	3b04      	subs	r3, #4
 80040de:	429e      	cmp	r6, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	d30b      	bcc.n	80040fc <quorem+0x10c>
 80040e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80040e8:	4628      	mov	r0, r5
 80040ea:	b003      	add	sp, #12
 80040ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	3b04      	subs	r3, #4
 80040f4:	2a00      	cmp	r2, #0
 80040f6:	d1c9      	bne.n	800408c <quorem+0x9c>
 80040f8:	3c01      	subs	r4, #1
 80040fa:	e7c4      	b.n	8004086 <quorem+0x96>
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	3b04      	subs	r3, #4
 8004100:	2a00      	cmp	r2, #0
 8004102:	d1ef      	bne.n	80040e4 <quorem+0xf4>
 8004104:	3c01      	subs	r4, #1
 8004106:	e7ea      	b.n	80040de <quorem+0xee>
 8004108:	2000      	movs	r0, #0
 800410a:	e7ee      	b.n	80040ea <quorem+0xfa>
 800410c:	0000      	movs	r0, r0
	...

08004110 <_dtoa_r>:
 8004110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	4616      	mov	r6, r2
 8004116:	461f      	mov	r7, r3
 8004118:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800411a:	b095      	sub	sp, #84	; 0x54
 800411c:	4604      	mov	r4, r0
 800411e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004122:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004126:	b93d      	cbnz	r5, 8004138 <_dtoa_r+0x28>
 8004128:	2010      	movs	r0, #16
 800412a:	f000 fe7d 	bl	8004e28 <malloc>
 800412e:	6260      	str	r0, [r4, #36]	; 0x24
 8004130:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004134:	6005      	str	r5, [r0, #0]
 8004136:	60c5      	str	r5, [r0, #12]
 8004138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	b151      	cbz	r1, 8004154 <_dtoa_r+0x44>
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	2301      	movs	r3, #1
 8004142:	4093      	lsls	r3, r2
 8004144:	604a      	str	r2, [r1, #4]
 8004146:	608b      	str	r3, [r1, #8]
 8004148:	4620      	mov	r0, r4
 800414a:	f000 fec2 	bl	8004ed2 <_Bfree>
 800414e:	2200      	movs	r2, #0
 8004150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	1e3b      	subs	r3, r7, #0
 8004156:	bfaf      	iteee	ge
 8004158:	2300      	movge	r3, #0
 800415a:	2201      	movlt	r2, #1
 800415c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004160:	9303      	strlt	r3, [sp, #12]
 8004162:	bfac      	ite	ge
 8004164:	f8c8 3000 	strge.w	r3, [r8]
 8004168:	f8c8 2000 	strlt.w	r2, [r8]
 800416c:	4bae      	ldr	r3, [pc, #696]	; (8004428 <_dtoa_r+0x318>)
 800416e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004172:	ea33 0308 	bics.w	r3, r3, r8
 8004176:	d11b      	bne.n	80041b0 <_dtoa_r+0xa0>
 8004178:	f242 730f 	movw	r3, #9999	; 0x270f
 800417c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	9b02      	ldr	r3, [sp, #8]
 8004182:	b923      	cbnz	r3, 800418e <_dtoa_r+0x7e>
 8004184:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004188:	2800      	cmp	r0, #0
 800418a:	f000 8545 	beq.w	8004c18 <_dtoa_r+0xb08>
 800418e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004190:	b953      	cbnz	r3, 80041a8 <_dtoa_r+0x98>
 8004192:	4ba6      	ldr	r3, [pc, #664]	; (800442c <_dtoa_r+0x31c>)
 8004194:	e021      	b.n	80041da <_dtoa_r+0xca>
 8004196:	4ba6      	ldr	r3, [pc, #664]	; (8004430 <_dtoa_r+0x320>)
 8004198:	9306      	str	r3, [sp, #24]
 800419a:	3308      	adds	r3, #8
 800419c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	9806      	ldr	r0, [sp, #24]
 80041a2:	b015      	add	sp, #84	; 0x54
 80041a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a8:	4ba0      	ldr	r3, [pc, #640]	; (800442c <_dtoa_r+0x31c>)
 80041aa:	9306      	str	r3, [sp, #24]
 80041ac:	3303      	adds	r3, #3
 80041ae:	e7f5      	b.n	800419c <_dtoa_r+0x8c>
 80041b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2300      	movs	r3, #0
 80041b8:	4630      	mov	r0, r6
 80041ba:	4639      	mov	r1, r7
 80041bc:	f7fc fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80041c0:	4682      	mov	sl, r0
 80041c2:	b160      	cbz	r0, 80041de <_dtoa_r+0xce>
 80041c4:	2301      	movs	r3, #1
 80041c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8520 	beq.w	8004c12 <_dtoa_r+0xb02>
 80041d2:	4b98      	ldr	r3, [pc, #608]	; (8004434 <_dtoa_r+0x324>)
 80041d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	3b01      	subs	r3, #1
 80041da:	9306      	str	r3, [sp, #24]
 80041dc:	e7e0      	b.n	80041a0 <_dtoa_r+0x90>
 80041de:	ab12      	add	r3, sp, #72	; 0x48
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	ab13      	add	r3, sp, #76	; 0x4c
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	4632      	mov	r2, r6
 80041e8:	463b      	mov	r3, r7
 80041ea:	4620      	mov	r0, r4
 80041ec:	f001 f8ca 	bl	8005384 <__d2b>
 80041f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80041f4:	4683      	mov	fp, r0
 80041f6:	2d00      	cmp	r5, #0
 80041f8:	d07d      	beq.n	80042f6 <_dtoa_r+0x1e6>
 80041fa:	46b0      	mov	r8, r6
 80041fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004200:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004204:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004208:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800420c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004210:	2200      	movs	r2, #0
 8004212:	4b89      	ldr	r3, [pc, #548]	; (8004438 <_dtoa_r+0x328>)
 8004214:	4640      	mov	r0, r8
 8004216:	4649      	mov	r1, r9
 8004218:	f7fb ffa6 	bl	8000168 <__aeabi_dsub>
 800421c:	a37c      	add	r3, pc, #496	; (adr r3, 8004410 <_dtoa_r+0x300>)
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f7fc f959 	bl	80004d8 <__aeabi_dmul>
 8004226:	a37c      	add	r3, pc, #496	; (adr r3, 8004418 <_dtoa_r+0x308>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f7fb ff9e 	bl	800016c <__adddf3>
 8004230:	4606      	mov	r6, r0
 8004232:	4628      	mov	r0, r5
 8004234:	460f      	mov	r7, r1
 8004236:	f7fc f8e5 	bl	8000404 <__aeabi_i2d>
 800423a:	a379      	add	r3, pc, #484	; (adr r3, 8004420 <_dtoa_r+0x310>)
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f7fc f94a 	bl	80004d8 <__aeabi_dmul>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4630      	mov	r0, r6
 800424a:	4639      	mov	r1, r7
 800424c:	f7fb ff8e 	bl	800016c <__adddf3>
 8004250:	4606      	mov	r6, r0
 8004252:	460f      	mov	r7, r1
 8004254:	f7fc fbf0 	bl	8000a38 <__aeabi_d2iz>
 8004258:	2200      	movs	r2, #0
 800425a:	4682      	mov	sl, r0
 800425c:	2300      	movs	r3, #0
 800425e:	4630      	mov	r0, r6
 8004260:	4639      	mov	r1, r7
 8004262:	f7fc fbab 	bl	80009bc <__aeabi_dcmplt>
 8004266:	b148      	cbz	r0, 800427c <_dtoa_r+0x16c>
 8004268:	4650      	mov	r0, sl
 800426a:	f7fc f8cb 	bl	8000404 <__aeabi_i2d>
 800426e:	4632      	mov	r2, r6
 8004270:	463b      	mov	r3, r7
 8004272:	f7fc fb99 	bl	80009a8 <__aeabi_dcmpeq>
 8004276:	b908      	cbnz	r0, 800427c <_dtoa_r+0x16c>
 8004278:	f10a 3aff 	add.w	sl, sl, #4294967295
 800427c:	f1ba 0f16 	cmp.w	sl, #22
 8004280:	d85a      	bhi.n	8004338 <_dtoa_r+0x228>
 8004282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004286:	496d      	ldr	r1, [pc, #436]	; (800443c <_dtoa_r+0x32c>)
 8004288:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800428c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004290:	f7fc fbb2 	bl	80009f8 <__aeabi_dcmpgt>
 8004294:	2800      	cmp	r0, #0
 8004296:	d051      	beq.n	800433c <_dtoa_r+0x22c>
 8004298:	2300      	movs	r3, #0
 800429a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800429e:	930d      	str	r3, [sp, #52]	; 0x34
 80042a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042a2:	1b5d      	subs	r5, r3, r5
 80042a4:	1e6b      	subs	r3, r5, #1
 80042a6:	9307      	str	r3, [sp, #28]
 80042a8:	bf43      	ittte	mi
 80042aa:	2300      	movmi	r3, #0
 80042ac:	f1c5 0901 	rsbmi	r9, r5, #1
 80042b0:	9307      	strmi	r3, [sp, #28]
 80042b2:	f04f 0900 	movpl.w	r9, #0
 80042b6:	f1ba 0f00 	cmp.w	sl, #0
 80042ba:	db41      	blt.n	8004340 <_dtoa_r+0x230>
 80042bc:	9b07      	ldr	r3, [sp, #28]
 80042be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80042c2:	4453      	add	r3, sl
 80042c4:	9307      	str	r3, [sp, #28]
 80042c6:	2300      	movs	r3, #0
 80042c8:	9308      	str	r3, [sp, #32]
 80042ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042cc:	2b09      	cmp	r3, #9
 80042ce:	f200 808f 	bhi.w	80043f0 <_dtoa_r+0x2e0>
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	bfc4      	itt	gt
 80042d6:	3b04      	subgt	r3, #4
 80042d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80042da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042dc:	bfc8      	it	gt
 80042de:	2500      	movgt	r5, #0
 80042e0:	f1a3 0302 	sub.w	r3, r3, #2
 80042e4:	bfd8      	it	le
 80042e6:	2501      	movle	r5, #1
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	f200 808d 	bhi.w	8004408 <_dtoa_r+0x2f8>
 80042ee:	e8df f003 	tbb	[pc, r3]
 80042f2:	7d7b      	.short	0x7d7b
 80042f4:	6f2f      	.short	0x6f2f
 80042f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80042fa:	441d      	add	r5, r3
 80042fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004300:	2820      	cmp	r0, #32
 8004302:	dd13      	ble.n	800432c <_dtoa_r+0x21c>
 8004304:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004308:	9b02      	ldr	r3, [sp, #8]
 800430a:	fa08 f800 	lsl.w	r8, r8, r0
 800430e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004312:	fa23 f000 	lsr.w	r0, r3, r0
 8004316:	ea48 0000 	orr.w	r0, r8, r0
 800431a:	f7fc f863 	bl	80003e4 <__aeabi_ui2d>
 800431e:	2301      	movs	r3, #1
 8004320:	4680      	mov	r8, r0
 8004322:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004326:	3d01      	subs	r5, #1
 8004328:	9310      	str	r3, [sp, #64]	; 0x40
 800432a:	e771      	b.n	8004210 <_dtoa_r+0x100>
 800432c:	9b02      	ldr	r3, [sp, #8]
 800432e:	f1c0 0020 	rsb	r0, r0, #32
 8004332:	fa03 f000 	lsl.w	r0, r3, r0
 8004336:	e7f0      	b.n	800431a <_dtoa_r+0x20a>
 8004338:	2301      	movs	r3, #1
 800433a:	e7b0      	b.n	800429e <_dtoa_r+0x18e>
 800433c:	900d      	str	r0, [sp, #52]	; 0x34
 800433e:	e7af      	b.n	80042a0 <_dtoa_r+0x190>
 8004340:	f1ca 0300 	rsb	r3, sl, #0
 8004344:	9308      	str	r3, [sp, #32]
 8004346:	2300      	movs	r3, #0
 8004348:	eba9 090a 	sub.w	r9, r9, sl
 800434c:	930c      	str	r3, [sp, #48]	; 0x30
 800434e:	e7bc      	b.n	80042ca <_dtoa_r+0x1ba>
 8004350:	2301      	movs	r3, #1
 8004352:	9309      	str	r3, [sp, #36]	; 0x24
 8004354:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004356:	2b00      	cmp	r3, #0
 8004358:	dd74      	ble.n	8004444 <_dtoa_r+0x334>
 800435a:	4698      	mov	r8, r3
 800435c:	9304      	str	r3, [sp, #16]
 800435e:	2200      	movs	r2, #0
 8004360:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004362:	6072      	str	r2, [r6, #4]
 8004364:	2204      	movs	r2, #4
 8004366:	f102 0014 	add.w	r0, r2, #20
 800436a:	4298      	cmp	r0, r3
 800436c:	6871      	ldr	r1, [r6, #4]
 800436e:	d96e      	bls.n	800444e <_dtoa_r+0x33e>
 8004370:	4620      	mov	r0, r4
 8004372:	f000 fd7a 	bl	8004e6a <_Balloc>
 8004376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004378:	6030      	str	r0, [r6, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b8 0f0e 	cmp.w	r8, #14
 8004380:	9306      	str	r3, [sp, #24]
 8004382:	f200 80ed 	bhi.w	8004560 <_dtoa_r+0x450>
 8004386:	2d00      	cmp	r5, #0
 8004388:	f000 80ea 	beq.w	8004560 <_dtoa_r+0x450>
 800438c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004390:	f1ba 0f00 	cmp.w	sl, #0
 8004394:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004398:	dd77      	ble.n	800448a <_dtoa_r+0x37a>
 800439a:	4a28      	ldr	r2, [pc, #160]	; (800443c <_dtoa_r+0x32c>)
 800439c:	f00a 030f 	and.w	r3, sl, #15
 80043a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80043a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80043a8:	06f0      	lsls	r0, r6, #27
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80043b2:	d568      	bpl.n	8004486 <_dtoa_r+0x376>
 80043b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043b8:	4b21      	ldr	r3, [pc, #132]	; (8004440 <_dtoa_r+0x330>)
 80043ba:	2503      	movs	r5, #3
 80043bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043c0:	f7fc f9b4 	bl	800072c <__aeabi_ddiv>
 80043c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043c8:	f006 060f 	and.w	r6, r6, #15
 80043cc:	4f1c      	ldr	r7, [pc, #112]	; (8004440 <_dtoa_r+0x330>)
 80043ce:	e04f      	b.n	8004470 <_dtoa_r+0x360>
 80043d0:	2301      	movs	r3, #1
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
 80043d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80043d6:	4453      	add	r3, sl
 80043d8:	f103 0801 	add.w	r8, r3, #1
 80043dc:	9304      	str	r3, [sp, #16]
 80043de:	4643      	mov	r3, r8
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	bfb8      	it	lt
 80043e4:	2301      	movlt	r3, #1
 80043e6:	e7ba      	b.n	800435e <_dtoa_r+0x24e>
 80043e8:	2300      	movs	r3, #0
 80043ea:	e7b2      	b.n	8004352 <_dtoa_r+0x242>
 80043ec:	2300      	movs	r3, #0
 80043ee:	e7f0      	b.n	80043d2 <_dtoa_r+0x2c2>
 80043f0:	2501      	movs	r5, #1
 80043f2:	2300      	movs	r3, #0
 80043f4:	9509      	str	r5, [sp, #36]	; 0x24
 80043f6:	931e      	str	r3, [sp, #120]	; 0x78
 80043f8:	f04f 33ff 	mov.w	r3, #4294967295
 80043fc:	2200      	movs	r2, #0
 80043fe:	9304      	str	r3, [sp, #16]
 8004400:	4698      	mov	r8, r3
 8004402:	2312      	movs	r3, #18
 8004404:	921f      	str	r2, [sp, #124]	; 0x7c
 8004406:	e7aa      	b.n	800435e <_dtoa_r+0x24e>
 8004408:	2301      	movs	r3, #1
 800440a:	9309      	str	r3, [sp, #36]	; 0x24
 800440c:	e7f4      	b.n	80043f8 <_dtoa_r+0x2e8>
 800440e:	bf00      	nop
 8004410:	636f4361 	.word	0x636f4361
 8004414:	3fd287a7 	.word	0x3fd287a7
 8004418:	8b60c8b3 	.word	0x8b60c8b3
 800441c:	3fc68a28 	.word	0x3fc68a28
 8004420:	509f79fb 	.word	0x509f79fb
 8004424:	3fd34413 	.word	0x3fd34413
 8004428:	7ff00000 	.word	0x7ff00000
 800442c:	08005e19 	.word	0x08005e19
 8004430:	08005e10 	.word	0x08005e10
 8004434:	08005ded 	.word	0x08005ded
 8004438:	3ff80000 	.word	0x3ff80000
 800443c:	08005ea8 	.word	0x08005ea8
 8004440:	08005e80 	.word	0x08005e80
 8004444:	2301      	movs	r3, #1
 8004446:	9304      	str	r3, [sp, #16]
 8004448:	4698      	mov	r8, r3
 800444a:	461a      	mov	r2, r3
 800444c:	e7da      	b.n	8004404 <_dtoa_r+0x2f4>
 800444e:	3101      	adds	r1, #1
 8004450:	6071      	str	r1, [r6, #4]
 8004452:	0052      	lsls	r2, r2, #1
 8004454:	e787      	b.n	8004366 <_dtoa_r+0x256>
 8004456:	07f1      	lsls	r1, r6, #31
 8004458:	d508      	bpl.n	800446c <_dtoa_r+0x35c>
 800445a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800445e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004462:	f7fc f839 	bl	80004d8 <__aeabi_dmul>
 8004466:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800446a:	3501      	adds	r5, #1
 800446c:	1076      	asrs	r6, r6, #1
 800446e:	3708      	adds	r7, #8
 8004470:	2e00      	cmp	r6, #0
 8004472:	d1f0      	bne.n	8004456 <_dtoa_r+0x346>
 8004474:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800447c:	f7fc f956 	bl	800072c <__aeabi_ddiv>
 8004480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004484:	e01b      	b.n	80044be <_dtoa_r+0x3ae>
 8004486:	2502      	movs	r5, #2
 8004488:	e7a0      	b.n	80043cc <_dtoa_r+0x2bc>
 800448a:	f000 80a4 	beq.w	80045d6 <_dtoa_r+0x4c6>
 800448e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004492:	f1ca 0600 	rsb	r6, sl, #0
 8004496:	4ba0      	ldr	r3, [pc, #640]	; (8004718 <_dtoa_r+0x608>)
 8004498:	f006 020f 	and.w	r2, r6, #15
 800449c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fc f818 	bl	80004d8 <__aeabi_dmul>
 80044a8:	2502      	movs	r5, #2
 80044aa:	2300      	movs	r3, #0
 80044ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044b0:	4f9a      	ldr	r7, [pc, #616]	; (800471c <_dtoa_r+0x60c>)
 80044b2:	1136      	asrs	r6, r6, #4
 80044b4:	2e00      	cmp	r6, #0
 80044b6:	f040 8083 	bne.w	80045c0 <_dtoa_r+0x4b0>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e0      	bne.n	8004480 <_dtoa_r+0x370>
 80044be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 808a 	beq.w	80045da <_dtoa_r+0x4ca>
 80044c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80044ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044d2:	2200      	movs	r2, #0
 80044d4:	4b92      	ldr	r3, [pc, #584]	; (8004720 <_dtoa_r+0x610>)
 80044d6:	f7fc fa71 	bl	80009bc <__aeabi_dcmplt>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d07d      	beq.n	80045da <_dtoa_r+0x4ca>
 80044de:	f1b8 0f00 	cmp.w	r8, #0
 80044e2:	d07a      	beq.n	80045da <_dtoa_r+0x4ca>
 80044e4:	9b04      	ldr	r3, [sp, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	dd36      	ble.n	8004558 <_dtoa_r+0x448>
 80044ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044ee:	2200      	movs	r2, #0
 80044f0:	4b8c      	ldr	r3, [pc, #560]	; (8004724 <_dtoa_r+0x614>)
 80044f2:	f7fb fff1 	bl	80004d8 <__aeabi_dmul>
 80044f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044fa:	9e04      	ldr	r6, [sp, #16]
 80044fc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004500:	3501      	adds	r5, #1
 8004502:	4628      	mov	r0, r5
 8004504:	f7fb ff7e 	bl	8000404 <__aeabi_i2d>
 8004508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800450c:	f7fb ffe4 	bl	80004d8 <__aeabi_dmul>
 8004510:	2200      	movs	r2, #0
 8004512:	4b85      	ldr	r3, [pc, #532]	; (8004728 <_dtoa_r+0x618>)
 8004514:	f7fb fe2a 	bl	800016c <__adddf3>
 8004518:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800451c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004520:	950b      	str	r5, [sp, #44]	; 0x2c
 8004522:	2e00      	cmp	r6, #0
 8004524:	d15c      	bne.n	80045e0 <_dtoa_r+0x4d0>
 8004526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	4b7f      	ldr	r3, [pc, #508]	; (800472c <_dtoa_r+0x61c>)
 800452e:	f7fb fe1b 	bl	8000168 <__aeabi_dsub>
 8004532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004534:	462b      	mov	r3, r5
 8004536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800453a:	f7fc fa5d 	bl	80009f8 <__aeabi_dcmpgt>
 800453e:	2800      	cmp	r0, #0
 8004540:	f040 8281 	bne.w	8004a46 <_dtoa_r+0x936>
 8004544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800454a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800454e:	f7fc fa35 	bl	80009bc <__aeabi_dcmplt>
 8004552:	2800      	cmp	r0, #0
 8004554:	f040 8275 	bne.w	8004a42 <_dtoa_r+0x932>
 8004558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800455c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004560:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004562:	2b00      	cmp	r3, #0
 8004564:	f2c0 814b 	blt.w	80047fe <_dtoa_r+0x6ee>
 8004568:	f1ba 0f0e 	cmp.w	sl, #14
 800456c:	f300 8147 	bgt.w	80047fe <_dtoa_r+0x6ee>
 8004570:	4b69      	ldr	r3, [pc, #420]	; (8004718 <_dtoa_r+0x608>)
 8004572:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800457e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004580:	2b00      	cmp	r3, #0
 8004582:	f280 80d7 	bge.w	8004734 <_dtoa_r+0x624>
 8004586:	f1b8 0f00 	cmp.w	r8, #0
 800458a:	f300 80d3 	bgt.w	8004734 <_dtoa_r+0x624>
 800458e:	f040 8257 	bne.w	8004a40 <_dtoa_r+0x930>
 8004592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004596:	2200      	movs	r2, #0
 8004598:	4b64      	ldr	r3, [pc, #400]	; (800472c <_dtoa_r+0x61c>)
 800459a:	f7fb ff9d 	bl	80004d8 <__aeabi_dmul>
 800459e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045a2:	f7fc fa1f 	bl	80009e4 <__aeabi_dcmpge>
 80045a6:	4646      	mov	r6, r8
 80045a8:	4647      	mov	r7, r8
 80045aa:	2800      	cmp	r0, #0
 80045ac:	f040 822d 	bne.w	8004a0a <_dtoa_r+0x8fa>
 80045b0:	9b06      	ldr	r3, [sp, #24]
 80045b2:	9a06      	ldr	r2, [sp, #24]
 80045b4:	1c5d      	adds	r5, r3, #1
 80045b6:	2331      	movs	r3, #49	; 0x31
 80045b8:	f10a 0a01 	add.w	sl, sl, #1
 80045bc:	7013      	strb	r3, [r2, #0]
 80045be:	e228      	b.n	8004a12 <_dtoa_r+0x902>
 80045c0:	07f2      	lsls	r2, r6, #31
 80045c2:	d505      	bpl.n	80045d0 <_dtoa_r+0x4c0>
 80045c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c8:	f7fb ff86 	bl	80004d8 <__aeabi_dmul>
 80045cc:	2301      	movs	r3, #1
 80045ce:	3501      	adds	r5, #1
 80045d0:	1076      	asrs	r6, r6, #1
 80045d2:	3708      	adds	r7, #8
 80045d4:	e76e      	b.n	80044b4 <_dtoa_r+0x3a4>
 80045d6:	2502      	movs	r5, #2
 80045d8:	e771      	b.n	80044be <_dtoa_r+0x3ae>
 80045da:	4657      	mov	r7, sl
 80045dc:	4646      	mov	r6, r8
 80045de:	e790      	b.n	8004502 <_dtoa_r+0x3f2>
 80045e0:	4b4d      	ldr	r3, [pc, #308]	; (8004718 <_dtoa_r+0x608>)
 80045e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80045e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80045ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d048      	beq.n	8004682 <_dtoa_r+0x572>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	2000      	movs	r0, #0
 80045f6:	494e      	ldr	r1, [pc, #312]	; (8004730 <_dtoa_r+0x620>)
 80045f8:	f7fc f898 	bl	800072c <__aeabi_ddiv>
 80045fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004600:	f7fb fdb2 	bl	8000168 <__aeabi_dsub>
 8004604:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004608:	9d06      	ldr	r5, [sp, #24]
 800460a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800460e:	f7fc fa13 	bl	8000a38 <__aeabi_d2iz>
 8004612:	9011      	str	r0, [sp, #68]	; 0x44
 8004614:	f7fb fef6 	bl	8000404 <__aeabi_i2d>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004620:	f7fb fda2 	bl	8000168 <__aeabi_dsub>
 8004624:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800462a:	3330      	adds	r3, #48	; 0x30
 800462c:	f805 3b01 	strb.w	r3, [r5], #1
 8004630:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004634:	f7fc f9c2 	bl	80009bc <__aeabi_dcmplt>
 8004638:	2800      	cmp	r0, #0
 800463a:	d163      	bne.n	8004704 <_dtoa_r+0x5f4>
 800463c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004640:	2000      	movs	r0, #0
 8004642:	4937      	ldr	r1, [pc, #220]	; (8004720 <_dtoa_r+0x610>)
 8004644:	f7fb fd90 	bl	8000168 <__aeabi_dsub>
 8004648:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800464c:	f7fc f9b6 	bl	80009bc <__aeabi_dcmplt>
 8004650:	2800      	cmp	r0, #0
 8004652:	f040 80b5 	bne.w	80047c0 <_dtoa_r+0x6b0>
 8004656:	9b06      	ldr	r3, [sp, #24]
 8004658:	1aeb      	subs	r3, r5, r3
 800465a:	429e      	cmp	r6, r3
 800465c:	f77f af7c 	ble.w	8004558 <_dtoa_r+0x448>
 8004660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004664:	2200      	movs	r2, #0
 8004666:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <_dtoa_r+0x614>)
 8004668:	f7fb ff36 	bl	80004d8 <__aeabi_dmul>
 800466c:	2200      	movs	r2, #0
 800466e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004676:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <_dtoa_r+0x614>)
 8004678:	f7fb ff2e 	bl	80004d8 <__aeabi_dmul>
 800467c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004680:	e7c3      	b.n	800460a <_dtoa_r+0x4fa>
 8004682:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004686:	f7fb ff27 	bl	80004d8 <__aeabi_dmul>
 800468a:	9b06      	ldr	r3, [sp, #24]
 800468c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004690:	199d      	adds	r5, r3, r6
 8004692:	461e      	mov	r6, r3
 8004694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004698:	f7fc f9ce 	bl	8000a38 <__aeabi_d2iz>
 800469c:	9011      	str	r0, [sp, #68]	; 0x44
 800469e:	f7fb feb1 	bl	8000404 <__aeabi_i2d>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046aa:	f7fb fd5d 	bl	8000168 <__aeabi_dsub>
 80046ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046b4:	3330      	adds	r3, #48	; 0x30
 80046b6:	f806 3b01 	strb.w	r3, [r6], #1
 80046ba:	42ae      	cmp	r6, r5
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	d124      	bne.n	800470c <_dtoa_r+0x5fc>
 80046c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <_dtoa_r+0x620>)
 80046c8:	f7fb fd50 	bl	800016c <__adddf3>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046d4:	f7fc f990 	bl	80009f8 <__aeabi_dcmpgt>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d171      	bne.n	80047c0 <_dtoa_r+0x6b0>
 80046dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046e0:	2000      	movs	r0, #0
 80046e2:	4913      	ldr	r1, [pc, #76]	; (8004730 <_dtoa_r+0x620>)
 80046e4:	f7fb fd40 	bl	8000168 <__aeabi_dsub>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046f0:	f7fc f964 	bl	80009bc <__aeabi_dcmplt>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f43f af2f 	beq.w	8004558 <_dtoa_r+0x448>
 80046fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80046fe:	1e6a      	subs	r2, r5, #1
 8004700:	2b30      	cmp	r3, #48	; 0x30
 8004702:	d001      	beq.n	8004708 <_dtoa_r+0x5f8>
 8004704:	46ba      	mov	sl, r7
 8004706:	e04a      	b.n	800479e <_dtoa_r+0x68e>
 8004708:	4615      	mov	r5, r2
 800470a:	e7f6      	b.n	80046fa <_dtoa_r+0x5ea>
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <_dtoa_r+0x614>)
 800470e:	f7fb fee3 	bl	80004d8 <__aeabi_dmul>
 8004712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004716:	e7bd      	b.n	8004694 <_dtoa_r+0x584>
 8004718:	08005ea8 	.word	0x08005ea8
 800471c:	08005e80 	.word	0x08005e80
 8004720:	3ff00000 	.word	0x3ff00000
 8004724:	40240000 	.word	0x40240000
 8004728:	401c0000 	.word	0x401c0000
 800472c:	40140000 	.word	0x40140000
 8004730:	3fe00000 	.word	0x3fe00000
 8004734:	9d06      	ldr	r5, [sp, #24]
 8004736:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800473a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800473e:	4630      	mov	r0, r6
 8004740:	4639      	mov	r1, r7
 8004742:	f7fb fff3 	bl	800072c <__aeabi_ddiv>
 8004746:	f7fc f977 	bl	8000a38 <__aeabi_d2iz>
 800474a:	4681      	mov	r9, r0
 800474c:	f7fb fe5a 	bl	8000404 <__aeabi_i2d>
 8004750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004754:	f7fb fec0 	bl	80004d8 <__aeabi_dmul>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4630      	mov	r0, r6
 800475e:	4639      	mov	r1, r7
 8004760:	f7fb fd02 	bl	8000168 <__aeabi_dsub>
 8004764:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004768:	f805 6b01 	strb.w	r6, [r5], #1
 800476c:	9e06      	ldr	r6, [sp, #24]
 800476e:	4602      	mov	r2, r0
 8004770:	1bae      	subs	r6, r5, r6
 8004772:	45b0      	cmp	r8, r6
 8004774:	460b      	mov	r3, r1
 8004776:	d135      	bne.n	80047e4 <_dtoa_r+0x6d4>
 8004778:	f7fb fcf8 	bl	800016c <__adddf3>
 800477c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004780:	4606      	mov	r6, r0
 8004782:	460f      	mov	r7, r1
 8004784:	f7fc f938 	bl	80009f8 <__aeabi_dcmpgt>
 8004788:	b9c8      	cbnz	r0, 80047be <_dtoa_r+0x6ae>
 800478a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478e:	4630      	mov	r0, r6
 8004790:	4639      	mov	r1, r7
 8004792:	f7fc f909 	bl	80009a8 <__aeabi_dcmpeq>
 8004796:	b110      	cbz	r0, 800479e <_dtoa_r+0x68e>
 8004798:	f019 0f01 	tst.w	r9, #1
 800479c:	d10f      	bne.n	80047be <_dtoa_r+0x6ae>
 800479e:	4659      	mov	r1, fp
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 fb96 	bl	8004ed2 <_Bfree>
 80047a6:	2300      	movs	r3, #0
 80047a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047aa:	702b      	strb	r3, [r5, #0]
 80047ac:	f10a 0301 	add.w	r3, sl, #1
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f43f acf3 	beq.w	80041a0 <_dtoa_r+0x90>
 80047ba:	601d      	str	r5, [r3, #0]
 80047bc:	e4f0      	b.n	80041a0 <_dtoa_r+0x90>
 80047be:	4657      	mov	r7, sl
 80047c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80047c4:	1e6b      	subs	r3, r5, #1
 80047c6:	2a39      	cmp	r2, #57	; 0x39
 80047c8:	d106      	bne.n	80047d8 <_dtoa_r+0x6c8>
 80047ca:	9a06      	ldr	r2, [sp, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d107      	bne.n	80047e0 <_dtoa_r+0x6d0>
 80047d0:	2330      	movs	r3, #48	; 0x30
 80047d2:	7013      	strb	r3, [r2, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	3701      	adds	r7, #1
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	3201      	adds	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e791      	b.n	8004704 <_dtoa_r+0x5f4>
 80047e0:	461d      	mov	r5, r3
 80047e2:	e7ed      	b.n	80047c0 <_dtoa_r+0x6b0>
 80047e4:	2200      	movs	r2, #0
 80047e6:	4b99      	ldr	r3, [pc, #612]	; (8004a4c <_dtoa_r+0x93c>)
 80047e8:	f7fb fe76 	bl	80004d8 <__aeabi_dmul>
 80047ec:	2200      	movs	r2, #0
 80047ee:	2300      	movs	r3, #0
 80047f0:	4606      	mov	r6, r0
 80047f2:	460f      	mov	r7, r1
 80047f4:	f7fc f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d09e      	beq.n	800473a <_dtoa_r+0x62a>
 80047fc:	e7cf      	b.n	800479e <_dtoa_r+0x68e>
 80047fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004800:	2a00      	cmp	r2, #0
 8004802:	f000 8088 	beq.w	8004916 <_dtoa_r+0x806>
 8004806:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004808:	2a01      	cmp	r2, #1
 800480a:	dc6d      	bgt.n	80048e8 <_dtoa_r+0x7d8>
 800480c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800480e:	2a00      	cmp	r2, #0
 8004810:	d066      	beq.n	80048e0 <_dtoa_r+0x7d0>
 8004812:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004816:	464d      	mov	r5, r9
 8004818:	9e08      	ldr	r6, [sp, #32]
 800481a:	9a07      	ldr	r2, [sp, #28]
 800481c:	2101      	movs	r1, #1
 800481e:	441a      	add	r2, r3
 8004820:	4620      	mov	r0, r4
 8004822:	4499      	add	r9, r3
 8004824:	9207      	str	r2, [sp, #28]
 8004826:	f000 fbf4 	bl	8005012 <__i2b>
 800482a:	4607      	mov	r7, r0
 800482c:	2d00      	cmp	r5, #0
 800482e:	dd0b      	ble.n	8004848 <_dtoa_r+0x738>
 8004830:	9b07      	ldr	r3, [sp, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	dd08      	ble.n	8004848 <_dtoa_r+0x738>
 8004836:	42ab      	cmp	r3, r5
 8004838:	bfa8      	it	ge
 800483a:	462b      	movge	r3, r5
 800483c:	9a07      	ldr	r2, [sp, #28]
 800483e:	eba9 0903 	sub.w	r9, r9, r3
 8004842:	1aed      	subs	r5, r5, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	9307      	str	r3, [sp, #28]
 8004848:	9b08      	ldr	r3, [sp, #32]
 800484a:	b1eb      	cbz	r3, 8004888 <_dtoa_r+0x778>
 800484c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	d065      	beq.n	800491e <_dtoa_r+0x80e>
 8004852:	b18e      	cbz	r6, 8004878 <_dtoa_r+0x768>
 8004854:	4639      	mov	r1, r7
 8004856:	4632      	mov	r2, r6
 8004858:	4620      	mov	r0, r4
 800485a:	f000 fc79 	bl	8005150 <__pow5mult>
 800485e:	465a      	mov	r2, fp
 8004860:	4601      	mov	r1, r0
 8004862:	4607      	mov	r7, r0
 8004864:	4620      	mov	r0, r4
 8004866:	f000 fbdd 	bl	8005024 <__multiply>
 800486a:	4659      	mov	r1, fp
 800486c:	900a      	str	r0, [sp, #40]	; 0x28
 800486e:	4620      	mov	r0, r4
 8004870:	f000 fb2f 	bl	8004ed2 <_Bfree>
 8004874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004876:	469b      	mov	fp, r3
 8004878:	9b08      	ldr	r3, [sp, #32]
 800487a:	1b9a      	subs	r2, r3, r6
 800487c:	d004      	beq.n	8004888 <_dtoa_r+0x778>
 800487e:	4659      	mov	r1, fp
 8004880:	4620      	mov	r0, r4
 8004882:	f000 fc65 	bl	8005150 <__pow5mult>
 8004886:	4683      	mov	fp, r0
 8004888:	2101      	movs	r1, #1
 800488a:	4620      	mov	r0, r4
 800488c:	f000 fbc1 	bl	8005012 <__i2b>
 8004890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004892:	4606      	mov	r6, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 81c6 	beq.w	8004c26 <_dtoa_r+0xb16>
 800489a:	461a      	mov	r2, r3
 800489c:	4601      	mov	r1, r0
 800489e:	4620      	mov	r0, r4
 80048a0:	f000 fc56 	bl	8005150 <__pow5mult>
 80048a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80048a6:	4606      	mov	r6, r0
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	dc3e      	bgt.n	800492a <_dtoa_r+0x81a>
 80048ac:	9b02      	ldr	r3, [sp, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d137      	bne.n	8004922 <_dtoa_r+0x812>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d134      	bne.n	8004926 <_dtoa_r+0x816>
 80048bc:	9b03      	ldr	r3, [sp, #12]
 80048be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048c2:	0d1b      	lsrs	r3, r3, #20
 80048c4:	051b      	lsls	r3, r3, #20
 80048c6:	b12b      	cbz	r3, 80048d4 <_dtoa_r+0x7c4>
 80048c8:	9b07      	ldr	r3, [sp, #28]
 80048ca:	f109 0901 	add.w	r9, r9, #1
 80048ce:	3301      	adds	r3, #1
 80048d0:	9307      	str	r3, [sp, #28]
 80048d2:	2301      	movs	r3, #1
 80048d4:	9308      	str	r3, [sp, #32]
 80048d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d128      	bne.n	800492e <_dtoa_r+0x81e>
 80048dc:	2001      	movs	r0, #1
 80048de:	e02e      	b.n	800493e <_dtoa_r+0x82e>
 80048e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048e6:	e796      	b.n	8004816 <_dtoa_r+0x706>
 80048e8:	9b08      	ldr	r3, [sp, #32]
 80048ea:	f108 36ff 	add.w	r6, r8, #4294967295
 80048ee:	42b3      	cmp	r3, r6
 80048f0:	bfb7      	itett	lt
 80048f2:	9b08      	ldrlt	r3, [sp, #32]
 80048f4:	1b9e      	subge	r6, r3, r6
 80048f6:	1af2      	sublt	r2, r6, r3
 80048f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80048fa:	bfbf      	itttt	lt
 80048fc:	9608      	strlt	r6, [sp, #32]
 80048fe:	189b      	addlt	r3, r3, r2
 8004900:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004902:	2600      	movlt	r6, #0
 8004904:	f1b8 0f00 	cmp.w	r8, #0
 8004908:	bfb9      	ittee	lt
 800490a:	eba9 0508 	sublt.w	r5, r9, r8
 800490e:	2300      	movlt	r3, #0
 8004910:	464d      	movge	r5, r9
 8004912:	4643      	movge	r3, r8
 8004914:	e781      	b.n	800481a <_dtoa_r+0x70a>
 8004916:	9e08      	ldr	r6, [sp, #32]
 8004918:	464d      	mov	r5, r9
 800491a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800491c:	e786      	b.n	800482c <_dtoa_r+0x71c>
 800491e:	9a08      	ldr	r2, [sp, #32]
 8004920:	e7ad      	b.n	800487e <_dtoa_r+0x76e>
 8004922:	2300      	movs	r3, #0
 8004924:	e7d6      	b.n	80048d4 <_dtoa_r+0x7c4>
 8004926:	9b02      	ldr	r3, [sp, #8]
 8004928:	e7d4      	b.n	80048d4 <_dtoa_r+0x7c4>
 800492a:	2300      	movs	r3, #0
 800492c:	9308      	str	r3, [sp, #32]
 800492e:	6933      	ldr	r3, [r6, #16]
 8004930:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004934:	6918      	ldr	r0, [r3, #16]
 8004936:	f000 fb1e 	bl	8004f76 <__hi0bits>
 800493a:	f1c0 0020 	rsb	r0, r0, #32
 800493e:	9b07      	ldr	r3, [sp, #28]
 8004940:	4418      	add	r0, r3
 8004942:	f010 001f 	ands.w	r0, r0, #31
 8004946:	d047      	beq.n	80049d8 <_dtoa_r+0x8c8>
 8004948:	f1c0 0320 	rsb	r3, r0, #32
 800494c:	2b04      	cmp	r3, #4
 800494e:	dd3b      	ble.n	80049c8 <_dtoa_r+0x8b8>
 8004950:	9b07      	ldr	r3, [sp, #28]
 8004952:	f1c0 001c 	rsb	r0, r0, #28
 8004956:	4481      	add	r9, r0
 8004958:	4405      	add	r5, r0
 800495a:	4403      	add	r3, r0
 800495c:	9307      	str	r3, [sp, #28]
 800495e:	f1b9 0f00 	cmp.w	r9, #0
 8004962:	dd05      	ble.n	8004970 <_dtoa_r+0x860>
 8004964:	4659      	mov	r1, fp
 8004966:	464a      	mov	r2, r9
 8004968:	4620      	mov	r0, r4
 800496a:	f000 fc3f 	bl	80051ec <__lshift>
 800496e:	4683      	mov	fp, r0
 8004970:	9b07      	ldr	r3, [sp, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	dd05      	ble.n	8004982 <_dtoa_r+0x872>
 8004976:	4631      	mov	r1, r6
 8004978:	461a      	mov	r2, r3
 800497a:	4620      	mov	r0, r4
 800497c:	f000 fc36 	bl	80051ec <__lshift>
 8004980:	4606      	mov	r6, r0
 8004982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004984:	b353      	cbz	r3, 80049dc <_dtoa_r+0x8cc>
 8004986:	4631      	mov	r1, r6
 8004988:	4658      	mov	r0, fp
 800498a:	f000 fc83 	bl	8005294 <__mcmp>
 800498e:	2800      	cmp	r0, #0
 8004990:	da24      	bge.n	80049dc <_dtoa_r+0x8cc>
 8004992:	2300      	movs	r3, #0
 8004994:	4659      	mov	r1, fp
 8004996:	220a      	movs	r2, #10
 8004998:	4620      	mov	r0, r4
 800499a:	f000 fab1 	bl	8004f00 <__multadd>
 800499e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049a4:	4683      	mov	fp, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8144 	beq.w	8004c34 <_dtoa_r+0xb24>
 80049ac:	2300      	movs	r3, #0
 80049ae:	4639      	mov	r1, r7
 80049b0:	220a      	movs	r2, #10
 80049b2:	4620      	mov	r0, r4
 80049b4:	f000 faa4 	bl	8004f00 <__multadd>
 80049b8:	9b04      	ldr	r3, [sp, #16]
 80049ba:	4607      	mov	r7, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dc4d      	bgt.n	8004a5c <_dtoa_r+0x94c>
 80049c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	dd4a      	ble.n	8004a5c <_dtoa_r+0x94c>
 80049c6:	e011      	b.n	80049ec <_dtoa_r+0x8dc>
 80049c8:	d0c9      	beq.n	800495e <_dtoa_r+0x84e>
 80049ca:	9a07      	ldr	r2, [sp, #28]
 80049cc:	331c      	adds	r3, #28
 80049ce:	441a      	add	r2, r3
 80049d0:	4499      	add	r9, r3
 80049d2:	441d      	add	r5, r3
 80049d4:	4613      	mov	r3, r2
 80049d6:	e7c1      	b.n	800495c <_dtoa_r+0x84c>
 80049d8:	4603      	mov	r3, r0
 80049da:	e7f6      	b.n	80049ca <_dtoa_r+0x8ba>
 80049dc:	f1b8 0f00 	cmp.w	r8, #0
 80049e0:	dc36      	bgt.n	8004a50 <_dtoa_r+0x940>
 80049e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	dd33      	ble.n	8004a50 <_dtoa_r+0x940>
 80049e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80049ec:	9b04      	ldr	r3, [sp, #16]
 80049ee:	b963      	cbnz	r3, 8004a0a <_dtoa_r+0x8fa>
 80049f0:	4631      	mov	r1, r6
 80049f2:	2205      	movs	r2, #5
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 fa83 	bl	8004f00 <__multadd>
 80049fa:	4601      	mov	r1, r0
 80049fc:	4606      	mov	r6, r0
 80049fe:	4658      	mov	r0, fp
 8004a00:	f000 fc48 	bl	8005294 <__mcmp>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	f73f add3 	bgt.w	80045b0 <_dtoa_r+0x4a0>
 8004a0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004a0c:	9d06      	ldr	r5, [sp, #24]
 8004a0e:	ea6f 0a03 	mvn.w	sl, r3
 8004a12:	f04f 0900 	mov.w	r9, #0
 8004a16:	4631      	mov	r1, r6
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f000 fa5a 	bl	8004ed2 <_Bfree>
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	f43f aebd 	beq.w	800479e <_dtoa_r+0x68e>
 8004a24:	f1b9 0f00 	cmp.w	r9, #0
 8004a28:	d005      	beq.n	8004a36 <_dtoa_r+0x926>
 8004a2a:	45b9      	cmp	r9, r7
 8004a2c:	d003      	beq.n	8004a36 <_dtoa_r+0x926>
 8004a2e:	4649      	mov	r1, r9
 8004a30:	4620      	mov	r0, r4
 8004a32:	f000 fa4e 	bl	8004ed2 <_Bfree>
 8004a36:	4639      	mov	r1, r7
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f000 fa4a 	bl	8004ed2 <_Bfree>
 8004a3e:	e6ae      	b.n	800479e <_dtoa_r+0x68e>
 8004a40:	2600      	movs	r6, #0
 8004a42:	4637      	mov	r7, r6
 8004a44:	e7e1      	b.n	8004a0a <_dtoa_r+0x8fa>
 8004a46:	46ba      	mov	sl, r7
 8004a48:	4637      	mov	r7, r6
 8004a4a:	e5b1      	b.n	80045b0 <_dtoa_r+0x4a0>
 8004a4c:	40240000 	.word	0x40240000
 8004a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a52:	f8cd 8010 	str.w	r8, [sp, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80f3 	beq.w	8004c42 <_dtoa_r+0xb32>
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	dd05      	ble.n	8004a6c <_dtoa_r+0x95c>
 8004a60:	4639      	mov	r1, r7
 8004a62:	462a      	mov	r2, r5
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 fbc1 	bl	80051ec <__lshift>
 8004a6a:	4607      	mov	r7, r0
 8004a6c:	9b08      	ldr	r3, [sp, #32]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04c      	beq.n	8004b0c <_dtoa_r+0x9fc>
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4620      	mov	r0, r4
 8004a76:	f000 f9f8 	bl	8004e6a <_Balloc>
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	f107 010c 	add.w	r1, r7, #12
 8004a82:	3202      	adds	r2, #2
 8004a84:	0092      	lsls	r2, r2, #2
 8004a86:	300c      	adds	r0, #12
 8004a88:	f000 f9e4 	bl	8004e54 <memcpy>
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	4629      	mov	r1, r5
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 fbab 	bl	80051ec <__lshift>
 8004a96:	46b9      	mov	r9, r7
 8004a98:	4607      	mov	r7, r0
 8004a9a:	9b06      	ldr	r3, [sp, #24]
 8004a9c:	9307      	str	r3, [sp, #28]
 8004a9e:	9b02      	ldr	r3, [sp, #8]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	9308      	str	r3, [sp, #32]
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4658      	mov	r0, fp
 8004aaa:	f7ff faa1 	bl	8003ff0 <quorem>
 8004aae:	4649      	mov	r1, r9
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004ab6:	4658      	mov	r0, fp
 8004ab8:	f000 fbec 	bl	8005294 <__mcmp>
 8004abc:	463a      	mov	r2, r7
 8004abe:	9002      	str	r0, [sp, #8]
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 fc00 	bl	80052c8 <__mdiff>
 8004ac8:	68c3      	ldr	r3, [r0, #12]
 8004aca:	4602      	mov	r2, r0
 8004acc:	bb03      	cbnz	r3, 8004b10 <_dtoa_r+0xa00>
 8004ace:	4601      	mov	r1, r0
 8004ad0:	9009      	str	r0, [sp, #36]	; 0x24
 8004ad2:	4658      	mov	r0, fp
 8004ad4:	f000 fbde 	bl	8005294 <__mcmp>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004adc:	4611      	mov	r1, r2
 8004ade:	4620      	mov	r0, r4
 8004ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae2:	f000 f9f6 	bl	8004ed2 <_Bfree>
 8004ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae8:	b9a3      	cbnz	r3, 8004b14 <_dtoa_r+0xa04>
 8004aea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004aec:	b992      	cbnz	r2, 8004b14 <_dtoa_r+0xa04>
 8004aee:	9a08      	ldr	r2, [sp, #32]
 8004af0:	b982      	cbnz	r2, 8004b14 <_dtoa_r+0xa04>
 8004af2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004af6:	d029      	beq.n	8004b4c <_dtoa_r+0xa3c>
 8004af8:	9b02      	ldr	r3, [sp, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	dd01      	ble.n	8004b02 <_dtoa_r+0x9f2>
 8004afe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004b02:	9b07      	ldr	r3, [sp, #28]
 8004b04:	1c5d      	adds	r5, r3, #1
 8004b06:	f883 8000 	strb.w	r8, [r3]
 8004b0a:	e784      	b.n	8004a16 <_dtoa_r+0x906>
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	e7c2      	b.n	8004a96 <_dtoa_r+0x986>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e7e3      	b.n	8004adc <_dtoa_r+0x9cc>
 8004b14:	9a02      	ldr	r2, [sp, #8]
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	db04      	blt.n	8004b24 <_dtoa_r+0xa14>
 8004b1a:	d123      	bne.n	8004b64 <_dtoa_r+0xa54>
 8004b1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b1e:	bb0a      	cbnz	r2, 8004b64 <_dtoa_r+0xa54>
 8004b20:	9a08      	ldr	r2, [sp, #32]
 8004b22:	b9fa      	cbnz	r2, 8004b64 <_dtoa_r+0xa54>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	ddec      	ble.n	8004b02 <_dtoa_r+0x9f2>
 8004b28:	4659      	mov	r1, fp
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 fb5d 	bl	80051ec <__lshift>
 8004b32:	4631      	mov	r1, r6
 8004b34:	4683      	mov	fp, r0
 8004b36:	f000 fbad 	bl	8005294 <__mcmp>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	dc03      	bgt.n	8004b46 <_dtoa_r+0xa36>
 8004b3e:	d1e0      	bne.n	8004b02 <_dtoa_r+0x9f2>
 8004b40:	f018 0f01 	tst.w	r8, #1
 8004b44:	d0dd      	beq.n	8004b02 <_dtoa_r+0x9f2>
 8004b46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b4a:	d1d8      	bne.n	8004afe <_dtoa_r+0x9ee>
 8004b4c:	9b07      	ldr	r3, [sp, #28]
 8004b4e:	9a07      	ldr	r2, [sp, #28]
 8004b50:	1c5d      	adds	r5, r3, #1
 8004b52:	2339      	movs	r3, #57	; 0x39
 8004b54:	7013      	strb	r3, [r2, #0]
 8004b56:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b5a:	1e6a      	subs	r2, r5, #1
 8004b5c:	2b39      	cmp	r3, #57	; 0x39
 8004b5e:	d04d      	beq.n	8004bfc <_dtoa_r+0xaec>
 8004b60:	3301      	adds	r3, #1
 8004b62:	e052      	b.n	8004c0a <_dtoa_r+0xafa>
 8004b64:	9a07      	ldr	r2, [sp, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f102 0501 	add.w	r5, r2, #1
 8004b6c:	dd06      	ble.n	8004b7c <_dtoa_r+0xa6c>
 8004b6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b72:	d0eb      	beq.n	8004b4c <_dtoa_r+0xa3c>
 8004b74:	f108 0801 	add.w	r8, r8, #1
 8004b78:	9b07      	ldr	r3, [sp, #28]
 8004b7a:	e7c4      	b.n	8004b06 <_dtoa_r+0x9f6>
 8004b7c:	9b06      	ldr	r3, [sp, #24]
 8004b7e:	9a04      	ldr	r2, [sp, #16]
 8004b80:	1aeb      	subs	r3, r5, r3
 8004b82:	4293      	cmp	r3, r2
 8004b84:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004b88:	d021      	beq.n	8004bce <_dtoa_r+0xabe>
 8004b8a:	4659      	mov	r1, fp
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	220a      	movs	r2, #10
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 f9b5 	bl	8004f00 <__multadd>
 8004b96:	45b9      	cmp	r9, r7
 8004b98:	4683      	mov	fp, r0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	f04f 020a 	mov.w	r2, #10
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	d105      	bne.n	8004bb4 <_dtoa_r+0xaa4>
 8004ba8:	f000 f9aa 	bl	8004f00 <__multadd>
 8004bac:	4681      	mov	r9, r0
 8004bae:	4607      	mov	r7, r0
 8004bb0:	9507      	str	r5, [sp, #28]
 8004bb2:	e778      	b.n	8004aa6 <_dtoa_r+0x996>
 8004bb4:	f000 f9a4 	bl	8004f00 <__multadd>
 8004bb8:	4639      	mov	r1, r7
 8004bba:	4681      	mov	r9, r0
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	220a      	movs	r2, #10
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f000 f99d 	bl	8004f00 <__multadd>
 8004bc6:	4607      	mov	r7, r0
 8004bc8:	e7f2      	b.n	8004bb0 <_dtoa_r+0xaa0>
 8004bca:	f04f 0900 	mov.w	r9, #0
 8004bce:	4659      	mov	r1, fp
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 fb0a 	bl	80051ec <__lshift>
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4683      	mov	fp, r0
 8004bdc:	f000 fb5a 	bl	8005294 <__mcmp>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	dcb8      	bgt.n	8004b56 <_dtoa_r+0xa46>
 8004be4:	d102      	bne.n	8004bec <_dtoa_r+0xadc>
 8004be6:	f018 0f01 	tst.w	r8, #1
 8004bea:	d1b4      	bne.n	8004b56 <_dtoa_r+0xa46>
 8004bec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004bf0:	1e6a      	subs	r2, r5, #1
 8004bf2:	2b30      	cmp	r3, #48	; 0x30
 8004bf4:	f47f af0f 	bne.w	8004a16 <_dtoa_r+0x906>
 8004bf8:	4615      	mov	r5, r2
 8004bfa:	e7f7      	b.n	8004bec <_dtoa_r+0xadc>
 8004bfc:	9b06      	ldr	r3, [sp, #24]
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d105      	bne.n	8004c0e <_dtoa_r+0xafe>
 8004c02:	2331      	movs	r3, #49	; 0x31
 8004c04:	9a06      	ldr	r2, [sp, #24]
 8004c06:	f10a 0a01 	add.w	sl, sl, #1
 8004c0a:	7013      	strb	r3, [r2, #0]
 8004c0c:	e703      	b.n	8004a16 <_dtoa_r+0x906>
 8004c0e:	4615      	mov	r5, r2
 8004c10:	e7a1      	b.n	8004b56 <_dtoa_r+0xa46>
 8004c12:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <_dtoa_r+0xb60>)
 8004c14:	f7ff bae1 	b.w	80041da <_dtoa_r+0xca>
 8004c18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f47f aabb 	bne.w	8004196 <_dtoa_r+0x86>
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <_dtoa_r+0xb64>)
 8004c22:	f7ff bada 	b.w	80041da <_dtoa_r+0xca>
 8004c26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	f77f ae3f 	ble.w	80048ac <_dtoa_r+0x79c>
 8004c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c30:	9308      	str	r3, [sp, #32]
 8004c32:	e653      	b.n	80048dc <_dtoa_r+0x7cc>
 8004c34:	9b04      	ldr	r3, [sp, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dc03      	bgt.n	8004c42 <_dtoa_r+0xb32>
 8004c3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	f73f aed5 	bgt.w	80049ec <_dtoa_r+0x8dc>
 8004c42:	9d06      	ldr	r5, [sp, #24]
 8004c44:	4631      	mov	r1, r6
 8004c46:	4658      	mov	r0, fp
 8004c48:	f7ff f9d2 	bl	8003ff0 <quorem>
 8004c4c:	9b06      	ldr	r3, [sp, #24]
 8004c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004c52:	f805 8b01 	strb.w	r8, [r5], #1
 8004c56:	9a04      	ldr	r2, [sp, #16]
 8004c58:	1aeb      	subs	r3, r5, r3
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	ddb5      	ble.n	8004bca <_dtoa_r+0xaba>
 8004c5e:	4659      	mov	r1, fp
 8004c60:	2300      	movs	r3, #0
 8004c62:	220a      	movs	r2, #10
 8004c64:	4620      	mov	r0, r4
 8004c66:	f000 f94b 	bl	8004f00 <__multadd>
 8004c6a:	4683      	mov	fp, r0
 8004c6c:	e7ea      	b.n	8004c44 <_dtoa_r+0xb34>
 8004c6e:	bf00      	nop
 8004c70:	08005dec 	.word	0x08005dec
 8004c74:	08005e10 	.word	0x08005e10

08004c78 <std>:
 8004c78:	2300      	movs	r3, #0
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c82:	6083      	str	r3, [r0, #8]
 8004c84:	8181      	strh	r1, [r0, #12]
 8004c86:	6643      	str	r3, [r0, #100]	; 0x64
 8004c88:	81c2      	strh	r2, [r0, #14]
 8004c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c8e:	6183      	str	r3, [r0, #24]
 8004c90:	4619      	mov	r1, r3
 8004c92:	2208      	movs	r2, #8
 8004c94:	305c      	adds	r0, #92	; 0x5c
 8004c96:	f7fe fd3b 	bl	8003710 <memset>
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <std+0x38>)
 8004c9c:	6224      	str	r4, [r4, #32]
 8004c9e:	6263      	str	r3, [r4, #36]	; 0x24
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <std+0x3c>)
 8004ca2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <std+0x40>)
 8004ca6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ca8:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <std+0x44>)
 8004caa:	6323      	str	r3, [r4, #48]	; 0x30
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	bf00      	nop
 8004cb0:	08005829 	.word	0x08005829
 8004cb4:	0800584b 	.word	0x0800584b
 8004cb8:	08005883 	.word	0x08005883
 8004cbc:	080058a7 	.word	0x080058a7

08004cc0 <_cleanup_r>:
 8004cc0:	4901      	ldr	r1, [pc, #4]	; (8004cc8 <_cleanup_r+0x8>)
 8004cc2:	f000 b885 	b.w	8004dd0 <_fwalk_reent>
 8004cc6:	bf00      	nop
 8004cc8:	08005b81 	.word	0x08005b81

08004ccc <__sfmoreglue>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	2568      	movs	r5, #104	; 0x68
 8004cd0:	1e4a      	subs	r2, r1, #1
 8004cd2:	4355      	muls	r5, r2
 8004cd4:	460e      	mov	r6, r1
 8004cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cda:	f000 fbfd 	bl	80054d8 <_malloc_r>
 8004cde:	4604      	mov	r4, r0
 8004ce0:	b140      	cbz	r0, 8004cf4 <__sfmoreglue+0x28>
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ce8:	300c      	adds	r0, #12
 8004cea:	60a0      	str	r0, [r4, #8]
 8004cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cf0:	f7fe fd0e 	bl	8003710 <memset>
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}

08004cf8 <__sinit>:
 8004cf8:	6983      	ldr	r3, [r0, #24]
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	bb33      	cbnz	r3, 8004d4e <__sinit+0x56>
 8004d00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004d04:	6503      	str	r3, [r0, #80]	; 0x50
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <__sinit+0x58>)
 8004d08:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <__sinit+0x5c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6282      	str	r2, [r0, #40]	; 0x28
 8004d0e:	4298      	cmp	r0, r3
 8004d10:	bf04      	itt	eq
 8004d12:	2301      	moveq	r3, #1
 8004d14:	6183      	streq	r3, [r0, #24]
 8004d16:	f000 f81f 	bl	8004d58 <__sfp>
 8004d1a:	6060      	str	r0, [r4, #4]
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f81b 	bl	8004d58 <__sfp>
 8004d22:	60a0      	str	r0, [r4, #8]
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 f817 	bl	8004d58 <__sfp>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60e0      	str	r0, [r4, #12]
 8004d2e:	2104      	movs	r1, #4
 8004d30:	6860      	ldr	r0, [r4, #4]
 8004d32:	f7ff ffa1 	bl	8004c78 <std>
 8004d36:	2201      	movs	r2, #1
 8004d38:	2109      	movs	r1, #9
 8004d3a:	68a0      	ldr	r0, [r4, #8]
 8004d3c:	f7ff ff9c 	bl	8004c78 <std>
 8004d40:	2202      	movs	r2, #2
 8004d42:	2112      	movs	r1, #18
 8004d44:	68e0      	ldr	r0, [r4, #12]
 8004d46:	f7ff ff97 	bl	8004c78 <std>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61a3      	str	r3, [r4, #24]
 8004d4e:	bd10      	pop	{r4, pc}
 8004d50:	08005dd8 	.word	0x08005dd8
 8004d54:	08004cc1 	.word	0x08004cc1

08004d58 <__sfp>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <__sfp+0x70>)
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	681e      	ldr	r6, [r3, #0]
 8004d60:	69b3      	ldr	r3, [r6, #24]
 8004d62:	b913      	cbnz	r3, 8004d6a <__sfp+0x12>
 8004d64:	4630      	mov	r0, r6
 8004d66:	f7ff ffc7 	bl	8004cf8 <__sinit>
 8004d6a:	3648      	adds	r6, #72	; 0x48
 8004d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	d503      	bpl.n	8004d7c <__sfp+0x24>
 8004d74:	6833      	ldr	r3, [r6, #0]
 8004d76:	b133      	cbz	r3, 8004d86 <__sfp+0x2e>
 8004d78:	6836      	ldr	r6, [r6, #0]
 8004d7a:	e7f7      	b.n	8004d6c <__sfp+0x14>
 8004d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d80:	b16d      	cbz	r5, 8004d9e <__sfp+0x46>
 8004d82:	3468      	adds	r4, #104	; 0x68
 8004d84:	e7f4      	b.n	8004d70 <__sfp+0x18>
 8004d86:	2104      	movs	r1, #4
 8004d88:	4638      	mov	r0, r7
 8004d8a:	f7ff ff9f 	bl	8004ccc <__sfmoreglue>
 8004d8e:	6030      	str	r0, [r6, #0]
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d1f1      	bne.n	8004d78 <__sfp+0x20>
 8004d94:	230c      	movs	r3, #12
 8004d96:	4604      	mov	r4, r0
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <__sfp+0x74>)
 8004da0:	6665      	str	r5, [r4, #100]	; 0x64
 8004da2:	e9c4 5500 	strd	r5, r5, [r4]
 8004da6:	60a5      	str	r5, [r4, #8]
 8004da8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004dac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004db0:	2208      	movs	r2, #8
 8004db2:	4629      	mov	r1, r5
 8004db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004db8:	f7fe fcaa 	bl	8003710 <memset>
 8004dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004dc4:	e7e9      	b.n	8004d9a <__sfp+0x42>
 8004dc6:	bf00      	nop
 8004dc8:	08005dd8 	.word	0x08005dd8
 8004dcc:	ffff0001 	.word	0xffff0001

08004dd0 <_fwalk_reent>:
 8004dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd4:	4680      	mov	r8, r0
 8004dd6:	4689      	mov	r9, r1
 8004dd8:	2600      	movs	r6, #0
 8004dda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004dde:	b914      	cbnz	r4, 8004de6 <_fwalk_reent+0x16>
 8004de0:	4630      	mov	r0, r6
 8004de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004dea:	3f01      	subs	r7, #1
 8004dec:	d501      	bpl.n	8004df2 <_fwalk_reent+0x22>
 8004dee:	6824      	ldr	r4, [r4, #0]
 8004df0:	e7f5      	b.n	8004dde <_fwalk_reent+0xe>
 8004df2:	89ab      	ldrh	r3, [r5, #12]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d907      	bls.n	8004e08 <_fwalk_reent+0x38>
 8004df8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	d003      	beq.n	8004e08 <_fwalk_reent+0x38>
 8004e00:	4629      	mov	r1, r5
 8004e02:	4640      	mov	r0, r8
 8004e04:	47c8      	blx	r9
 8004e06:	4306      	orrs	r6, r0
 8004e08:	3568      	adds	r5, #104	; 0x68
 8004e0a:	e7ee      	b.n	8004dea <_fwalk_reent+0x1a>

08004e0c <_localeconv_r>:
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <_localeconv_r+0x14>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a18      	ldr	r0, [r3, #32]
 8004e12:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <_localeconv_r+0x18>)
 8004e14:	2800      	cmp	r0, #0
 8004e16:	bf08      	it	eq
 8004e18:	4618      	moveq	r0, r3
 8004e1a:	30f0      	adds	r0, #240	; 0xf0
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2000000c 	.word	0x2000000c
 8004e24:	20000070 	.word	0x20000070

08004e28 <malloc>:
 8004e28:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <malloc+0xc>)
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	f000 bb53 	b.w	80054d8 <_malloc_r>
 8004e32:	bf00      	nop
 8004e34:	2000000c 	.word	0x2000000c

08004e38 <memchr>:
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	b2c9      	uxtb	r1, r1
 8004e3c:	4402      	add	r2, r0
 8004e3e:	4290      	cmp	r0, r2
 8004e40:	4603      	mov	r3, r0
 8004e42:	d101      	bne.n	8004e48 <memchr+0x10>
 8004e44:	2300      	movs	r3, #0
 8004e46:	e003      	b.n	8004e50 <memchr+0x18>
 8004e48:	781c      	ldrb	r4, [r3, #0]
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	428c      	cmp	r4, r1
 8004e4e:	d1f6      	bne.n	8004e3e <memchr+0x6>
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd10      	pop	{r4, pc}

08004e54 <memcpy>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	1e43      	subs	r3, r0, #1
 8004e58:	440a      	add	r2, r1
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	d100      	bne.n	8004e60 <memcpy+0xc>
 8004e5e:	bd10      	pop	{r4, pc}
 8004e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e68:	e7f7      	b.n	8004e5a <memcpy+0x6>

08004e6a <_Balloc>:
 8004e6a:	b570      	push	{r4, r5, r6, lr}
 8004e6c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e6e:	4604      	mov	r4, r0
 8004e70:	460e      	mov	r6, r1
 8004e72:	b93d      	cbnz	r5, 8004e84 <_Balloc+0x1a>
 8004e74:	2010      	movs	r0, #16
 8004e76:	f7ff ffd7 	bl	8004e28 <malloc>
 8004e7a:	6260      	str	r0, [r4, #36]	; 0x24
 8004e7c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e80:	6005      	str	r5, [r0, #0]
 8004e82:	60c5      	str	r5, [r0, #12]
 8004e84:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e86:	68eb      	ldr	r3, [r5, #12]
 8004e88:	b183      	cbz	r3, 8004eac <_Balloc+0x42>
 8004e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004e92:	b9b8      	cbnz	r0, 8004ec4 <_Balloc+0x5a>
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f506 	lsl.w	r5, r1, r6
 8004e9a:	1d6a      	adds	r2, r5, #5
 8004e9c:	0092      	lsls	r2, r2, #2
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f000 fabf 	bl	8005422 <_calloc_r>
 8004ea4:	b160      	cbz	r0, 8004ec0 <_Balloc+0x56>
 8004ea6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004eaa:	e00e      	b.n	8004eca <_Balloc+0x60>
 8004eac:	2221      	movs	r2, #33	; 0x21
 8004eae:	2104      	movs	r1, #4
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 fab6 	bl	8005422 <_calloc_r>
 8004eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb8:	60e8      	str	r0, [r5, #12]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e4      	bne.n	8004e8a <_Balloc+0x20>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	6802      	ldr	r2, [r0, #0]
 8004ec6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ed0:	e7f7      	b.n	8004ec2 <_Balloc+0x58>

08004ed2 <_Bfree>:
 8004ed2:	b570      	push	{r4, r5, r6, lr}
 8004ed4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	460d      	mov	r5, r1
 8004eda:	b93c      	cbnz	r4, 8004eec <_Bfree+0x1a>
 8004edc:	2010      	movs	r0, #16
 8004ede:	f7ff ffa3 	bl	8004e28 <malloc>
 8004ee2:	6270      	str	r0, [r6, #36]	; 0x24
 8004ee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ee8:	6004      	str	r4, [r0, #0]
 8004eea:	60c4      	str	r4, [r0, #12]
 8004eec:	b13d      	cbz	r5, 8004efe <_Bfree+0x2c>
 8004eee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ef0:	686a      	ldr	r2, [r5, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ef8:	6029      	str	r1, [r5, #0]
 8004efa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004efe:	bd70      	pop	{r4, r5, r6, pc}

08004f00 <__multadd>:
 8004f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f04:	461f      	mov	r7, r3
 8004f06:	4606      	mov	r6, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	690d      	ldr	r5, [r1, #16]
 8004f0e:	f101 0c14 	add.w	ip, r1, #20
 8004f12:	f8dc 0000 	ldr.w	r0, [ip]
 8004f16:	3301      	adds	r3, #1
 8004f18:	b281      	uxth	r1, r0
 8004f1a:	fb02 7101 	mla	r1, r2, r1, r7
 8004f1e:	0c00      	lsrs	r0, r0, #16
 8004f20:	0c0f      	lsrs	r7, r1, #16
 8004f22:	fb02 7000 	mla	r0, r2, r0, r7
 8004f26:	b289      	uxth	r1, r1
 8004f28:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004f2c:	429d      	cmp	r5, r3
 8004f2e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004f32:	f84c 1b04 	str.w	r1, [ip], #4
 8004f36:	dcec      	bgt.n	8004f12 <__multadd+0x12>
 8004f38:	b1d7      	cbz	r7, 8004f70 <__multadd+0x70>
 8004f3a:	68a3      	ldr	r3, [r4, #8]
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	dc12      	bgt.n	8004f66 <__multadd+0x66>
 8004f40:	6861      	ldr	r1, [r4, #4]
 8004f42:	4630      	mov	r0, r6
 8004f44:	3101      	adds	r1, #1
 8004f46:	f7ff ff90 	bl	8004e6a <_Balloc>
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	6922      	ldr	r2, [r4, #16]
 8004f4e:	f104 010c 	add.w	r1, r4, #12
 8004f52:	3202      	adds	r2, #2
 8004f54:	0092      	lsls	r2, r2, #2
 8004f56:	300c      	adds	r0, #12
 8004f58:	f7ff ff7c 	bl	8004e54 <memcpy>
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff ffb7 	bl	8004ed2 <_Bfree>
 8004f64:	4644      	mov	r4, r8
 8004f66:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f6a:	3501      	adds	r5, #1
 8004f6c:	615f      	str	r7, [r3, #20]
 8004f6e:	6125      	str	r5, [r4, #16]
 8004f70:	4620      	mov	r0, r4
 8004f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f76 <__hi0bits>:
 8004f76:	0c02      	lsrs	r2, r0, #16
 8004f78:	0412      	lsls	r2, r2, #16
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	b9b2      	cbnz	r2, 8004fac <__hi0bits+0x36>
 8004f7e:	0403      	lsls	r3, r0, #16
 8004f80:	2010      	movs	r0, #16
 8004f82:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f86:	bf04      	itt	eq
 8004f88:	021b      	lsleq	r3, r3, #8
 8004f8a:	3008      	addeq	r0, #8
 8004f8c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f90:	bf04      	itt	eq
 8004f92:	011b      	lsleq	r3, r3, #4
 8004f94:	3004      	addeq	r0, #4
 8004f96:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f9a:	bf04      	itt	eq
 8004f9c:	009b      	lsleq	r3, r3, #2
 8004f9e:	3002      	addeq	r0, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db06      	blt.n	8004fb2 <__hi0bits+0x3c>
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	d503      	bpl.n	8004fb0 <__hi0bits+0x3a>
 8004fa8:	3001      	adds	r0, #1
 8004faa:	4770      	bx	lr
 8004fac:	2000      	movs	r0, #0
 8004fae:	e7e8      	b.n	8004f82 <__hi0bits+0xc>
 8004fb0:	2020      	movs	r0, #32
 8004fb2:	4770      	bx	lr

08004fb4 <__lo0bits>:
 8004fb4:	6803      	ldr	r3, [r0, #0]
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	f013 0207 	ands.w	r2, r3, #7
 8004fbc:	d00b      	beq.n	8004fd6 <__lo0bits+0x22>
 8004fbe:	07da      	lsls	r2, r3, #31
 8004fc0:	d423      	bmi.n	800500a <__lo0bits+0x56>
 8004fc2:	0798      	lsls	r0, r3, #30
 8004fc4:	bf49      	itett	mi
 8004fc6:	085b      	lsrmi	r3, r3, #1
 8004fc8:	089b      	lsrpl	r3, r3, #2
 8004fca:	2001      	movmi	r0, #1
 8004fcc:	600b      	strmi	r3, [r1, #0]
 8004fce:	bf5c      	itt	pl
 8004fd0:	600b      	strpl	r3, [r1, #0]
 8004fd2:	2002      	movpl	r0, #2
 8004fd4:	4770      	bx	lr
 8004fd6:	b298      	uxth	r0, r3
 8004fd8:	b9a8      	cbnz	r0, 8005006 <__lo0bits+0x52>
 8004fda:	2010      	movs	r0, #16
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004fe2:	bf04      	itt	eq
 8004fe4:	0a1b      	lsreq	r3, r3, #8
 8004fe6:	3008      	addeq	r0, #8
 8004fe8:	071a      	lsls	r2, r3, #28
 8004fea:	bf04      	itt	eq
 8004fec:	091b      	lsreq	r3, r3, #4
 8004fee:	3004      	addeq	r0, #4
 8004ff0:	079a      	lsls	r2, r3, #30
 8004ff2:	bf04      	itt	eq
 8004ff4:	089b      	lsreq	r3, r3, #2
 8004ff6:	3002      	addeq	r0, #2
 8004ff8:	07da      	lsls	r2, r3, #31
 8004ffa:	d402      	bmi.n	8005002 <__lo0bits+0x4e>
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	d006      	beq.n	800500e <__lo0bits+0x5a>
 8005000:	3001      	adds	r0, #1
 8005002:	600b      	str	r3, [r1, #0]
 8005004:	4770      	bx	lr
 8005006:	4610      	mov	r0, r2
 8005008:	e7e9      	b.n	8004fde <__lo0bits+0x2a>
 800500a:	2000      	movs	r0, #0
 800500c:	4770      	bx	lr
 800500e:	2020      	movs	r0, #32
 8005010:	4770      	bx	lr

08005012 <__i2b>:
 8005012:	b510      	push	{r4, lr}
 8005014:	460c      	mov	r4, r1
 8005016:	2101      	movs	r1, #1
 8005018:	f7ff ff27 	bl	8004e6a <_Balloc>
 800501c:	2201      	movs	r2, #1
 800501e:	6144      	str	r4, [r0, #20]
 8005020:	6102      	str	r2, [r0, #16]
 8005022:	bd10      	pop	{r4, pc}

08005024 <__multiply>:
 8005024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005028:	4614      	mov	r4, r2
 800502a:	690a      	ldr	r2, [r1, #16]
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	4688      	mov	r8, r1
 8005030:	429a      	cmp	r2, r3
 8005032:	bfbe      	ittt	lt
 8005034:	460b      	movlt	r3, r1
 8005036:	46a0      	movlt	r8, r4
 8005038:	461c      	movlt	r4, r3
 800503a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800503e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005042:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005046:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800504a:	eb07 0609 	add.w	r6, r7, r9
 800504e:	42b3      	cmp	r3, r6
 8005050:	bfb8      	it	lt
 8005052:	3101      	addlt	r1, #1
 8005054:	f7ff ff09 	bl	8004e6a <_Balloc>
 8005058:	f100 0514 	add.w	r5, r0, #20
 800505c:	462b      	mov	r3, r5
 800505e:	2200      	movs	r2, #0
 8005060:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005064:	4573      	cmp	r3, lr
 8005066:	d316      	bcc.n	8005096 <__multiply+0x72>
 8005068:	f104 0214 	add.w	r2, r4, #20
 800506c:	f108 0114 	add.w	r1, r8, #20
 8005070:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005074:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	9b00      	ldr	r3, [sp, #0]
 800507c:	9201      	str	r2, [sp, #4]
 800507e:	4293      	cmp	r3, r2
 8005080:	d80c      	bhi.n	800509c <__multiply+0x78>
 8005082:	2e00      	cmp	r6, #0
 8005084:	dd03      	ble.n	800508e <__multiply+0x6a>
 8005086:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800508a:	2b00      	cmp	r3, #0
 800508c:	d05d      	beq.n	800514a <__multiply+0x126>
 800508e:	6106      	str	r6, [r0, #16]
 8005090:	b003      	add	sp, #12
 8005092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005096:	f843 2b04 	str.w	r2, [r3], #4
 800509a:	e7e3      	b.n	8005064 <__multiply+0x40>
 800509c:	f8b2 b000 	ldrh.w	fp, [r2]
 80050a0:	f1bb 0f00 	cmp.w	fp, #0
 80050a4:	d023      	beq.n	80050ee <__multiply+0xca>
 80050a6:	4689      	mov	r9, r1
 80050a8:	46ac      	mov	ip, r5
 80050aa:	f04f 0800 	mov.w	r8, #0
 80050ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80050b2:	f8dc a000 	ldr.w	sl, [ip]
 80050b6:	b2a3      	uxth	r3, r4
 80050b8:	fa1f fa8a 	uxth.w	sl, sl
 80050bc:	fb0b a303 	mla	r3, fp, r3, sl
 80050c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80050c4:	f8dc 4000 	ldr.w	r4, [ip]
 80050c8:	4443      	add	r3, r8
 80050ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80050ce:	fb0b 840a 	mla	r4, fp, sl, r8
 80050d2:	46e2      	mov	sl, ip
 80050d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80050d8:	b29b      	uxth	r3, r3
 80050da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80050de:	454f      	cmp	r7, r9
 80050e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80050e4:	f84a 3b04 	str.w	r3, [sl], #4
 80050e8:	d82b      	bhi.n	8005142 <__multiply+0x11e>
 80050ea:	f8cc 8004 	str.w	r8, [ip, #4]
 80050ee:	9b01      	ldr	r3, [sp, #4]
 80050f0:	3204      	adds	r2, #4
 80050f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80050f6:	f1ba 0f00 	cmp.w	sl, #0
 80050fa:	d020      	beq.n	800513e <__multiply+0x11a>
 80050fc:	4689      	mov	r9, r1
 80050fe:	46a8      	mov	r8, r5
 8005100:	f04f 0b00 	mov.w	fp, #0
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	f8b9 c000 	ldrh.w	ip, [r9]
 800510a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800510e:	b29b      	uxth	r3, r3
 8005110:	fb0a 440c 	mla	r4, sl, ip, r4
 8005114:	46c4      	mov	ip, r8
 8005116:	445c      	add	r4, fp
 8005118:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800511c:	f84c 3b04 	str.w	r3, [ip], #4
 8005120:	f859 3b04 	ldr.w	r3, [r9], #4
 8005124:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	fb0a b303 	mla	r3, sl, r3, fp
 800512e:	454f      	cmp	r7, r9
 8005130:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005134:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005138:	d805      	bhi.n	8005146 <__multiply+0x122>
 800513a:	f8c8 3004 	str.w	r3, [r8, #4]
 800513e:	3504      	adds	r5, #4
 8005140:	e79b      	b.n	800507a <__multiply+0x56>
 8005142:	46d4      	mov	ip, sl
 8005144:	e7b3      	b.n	80050ae <__multiply+0x8a>
 8005146:	46e0      	mov	r8, ip
 8005148:	e7dd      	b.n	8005106 <__multiply+0xe2>
 800514a:	3e01      	subs	r6, #1
 800514c:	e799      	b.n	8005082 <__multiply+0x5e>
	...

08005150 <__pow5mult>:
 8005150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005154:	4615      	mov	r5, r2
 8005156:	f012 0203 	ands.w	r2, r2, #3
 800515a:	4606      	mov	r6, r0
 800515c:	460f      	mov	r7, r1
 800515e:	d007      	beq.n	8005170 <__pow5mult+0x20>
 8005160:	4c21      	ldr	r4, [pc, #132]	; (80051e8 <__pow5mult+0x98>)
 8005162:	3a01      	subs	r2, #1
 8005164:	2300      	movs	r3, #0
 8005166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800516a:	f7ff fec9 	bl	8004f00 <__multadd>
 800516e:	4607      	mov	r7, r0
 8005170:	10ad      	asrs	r5, r5, #2
 8005172:	d035      	beq.n	80051e0 <__pow5mult+0x90>
 8005174:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005176:	b93c      	cbnz	r4, 8005188 <__pow5mult+0x38>
 8005178:	2010      	movs	r0, #16
 800517a:	f7ff fe55 	bl	8004e28 <malloc>
 800517e:	6270      	str	r0, [r6, #36]	; 0x24
 8005180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005184:	6004      	str	r4, [r0, #0]
 8005186:	60c4      	str	r4, [r0, #12]
 8005188:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800518c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005190:	b94c      	cbnz	r4, 80051a6 <__pow5mult+0x56>
 8005192:	f240 2171 	movw	r1, #625	; 0x271
 8005196:	4630      	mov	r0, r6
 8005198:	f7ff ff3b 	bl	8005012 <__i2b>
 800519c:	2300      	movs	r3, #0
 800519e:	4604      	mov	r4, r0
 80051a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80051a4:	6003      	str	r3, [r0, #0]
 80051a6:	f04f 0800 	mov.w	r8, #0
 80051aa:	07eb      	lsls	r3, r5, #31
 80051ac:	d50a      	bpl.n	80051c4 <__pow5mult+0x74>
 80051ae:	4639      	mov	r1, r7
 80051b0:	4622      	mov	r2, r4
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7ff ff36 	bl	8005024 <__multiply>
 80051b8:	4681      	mov	r9, r0
 80051ba:	4639      	mov	r1, r7
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff fe88 	bl	8004ed2 <_Bfree>
 80051c2:	464f      	mov	r7, r9
 80051c4:	106d      	asrs	r5, r5, #1
 80051c6:	d00b      	beq.n	80051e0 <__pow5mult+0x90>
 80051c8:	6820      	ldr	r0, [r4, #0]
 80051ca:	b938      	cbnz	r0, 80051dc <__pow5mult+0x8c>
 80051cc:	4622      	mov	r2, r4
 80051ce:	4621      	mov	r1, r4
 80051d0:	4630      	mov	r0, r6
 80051d2:	f7ff ff27 	bl	8005024 <__multiply>
 80051d6:	6020      	str	r0, [r4, #0]
 80051d8:	f8c0 8000 	str.w	r8, [r0]
 80051dc:	4604      	mov	r4, r0
 80051de:	e7e4      	b.n	80051aa <__pow5mult+0x5a>
 80051e0:	4638      	mov	r0, r7
 80051e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051e6:	bf00      	nop
 80051e8:	08005f70 	.word	0x08005f70

080051ec <__lshift>:
 80051ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f0:	460c      	mov	r4, r1
 80051f2:	4607      	mov	r7, r0
 80051f4:	4616      	mov	r6, r2
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051fc:	eb0a 0903 	add.w	r9, sl, r3
 8005200:	6849      	ldr	r1, [r1, #4]
 8005202:	68a3      	ldr	r3, [r4, #8]
 8005204:	f109 0501 	add.w	r5, r9, #1
 8005208:	42ab      	cmp	r3, r5
 800520a:	db32      	blt.n	8005272 <__lshift+0x86>
 800520c:	4638      	mov	r0, r7
 800520e:	f7ff fe2c 	bl	8004e6a <_Balloc>
 8005212:	2300      	movs	r3, #0
 8005214:	4680      	mov	r8, r0
 8005216:	461a      	mov	r2, r3
 8005218:	f100 0114 	add.w	r1, r0, #20
 800521c:	4553      	cmp	r3, sl
 800521e:	db2b      	blt.n	8005278 <__lshift+0x8c>
 8005220:	6920      	ldr	r0, [r4, #16]
 8005222:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005226:	f104 0314 	add.w	r3, r4, #20
 800522a:	f016 021f 	ands.w	r2, r6, #31
 800522e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005232:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005236:	d025      	beq.n	8005284 <__lshift+0x98>
 8005238:	2000      	movs	r0, #0
 800523a:	f1c2 0e20 	rsb	lr, r2, #32
 800523e:	468a      	mov	sl, r1
 8005240:	681e      	ldr	r6, [r3, #0]
 8005242:	4096      	lsls	r6, r2
 8005244:	4330      	orrs	r0, r6
 8005246:	f84a 0b04 	str.w	r0, [sl], #4
 800524a:	f853 0b04 	ldr.w	r0, [r3], #4
 800524e:	459c      	cmp	ip, r3
 8005250:	fa20 f00e 	lsr.w	r0, r0, lr
 8005254:	d814      	bhi.n	8005280 <__lshift+0x94>
 8005256:	6048      	str	r0, [r1, #4]
 8005258:	b108      	cbz	r0, 800525e <__lshift+0x72>
 800525a:	f109 0502 	add.w	r5, r9, #2
 800525e:	3d01      	subs	r5, #1
 8005260:	4638      	mov	r0, r7
 8005262:	f8c8 5010 	str.w	r5, [r8, #16]
 8005266:	4621      	mov	r1, r4
 8005268:	f7ff fe33 	bl	8004ed2 <_Bfree>
 800526c:	4640      	mov	r0, r8
 800526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005272:	3101      	adds	r1, #1
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	e7c7      	b.n	8005208 <__lshift+0x1c>
 8005278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800527c:	3301      	adds	r3, #1
 800527e:	e7cd      	b.n	800521c <__lshift+0x30>
 8005280:	4651      	mov	r1, sl
 8005282:	e7dc      	b.n	800523e <__lshift+0x52>
 8005284:	3904      	subs	r1, #4
 8005286:	f853 2b04 	ldr.w	r2, [r3], #4
 800528a:	459c      	cmp	ip, r3
 800528c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005290:	d8f9      	bhi.n	8005286 <__lshift+0x9a>
 8005292:	e7e4      	b.n	800525e <__lshift+0x72>

08005294 <__mcmp>:
 8005294:	6903      	ldr	r3, [r0, #16]
 8005296:	690a      	ldr	r2, [r1, #16]
 8005298:	b530      	push	{r4, r5, lr}
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	d10c      	bne.n	80052b8 <__mcmp+0x24>
 800529e:	0092      	lsls	r2, r2, #2
 80052a0:	3014      	adds	r0, #20
 80052a2:	3114      	adds	r1, #20
 80052a4:	1884      	adds	r4, r0, r2
 80052a6:	4411      	add	r1, r2
 80052a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052b0:	4295      	cmp	r5, r2
 80052b2:	d003      	beq.n	80052bc <__mcmp+0x28>
 80052b4:	d305      	bcc.n	80052c2 <__mcmp+0x2e>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd30      	pop	{r4, r5, pc}
 80052bc:	42a0      	cmp	r0, r4
 80052be:	d3f3      	bcc.n	80052a8 <__mcmp+0x14>
 80052c0:	e7fa      	b.n	80052b8 <__mcmp+0x24>
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	e7f7      	b.n	80052b8 <__mcmp+0x24>

080052c8 <__mdiff>:
 80052c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052cc:	460d      	mov	r5, r1
 80052ce:	4607      	mov	r7, r0
 80052d0:	4611      	mov	r1, r2
 80052d2:	4628      	mov	r0, r5
 80052d4:	4614      	mov	r4, r2
 80052d6:	f7ff ffdd 	bl	8005294 <__mcmp>
 80052da:	1e06      	subs	r6, r0, #0
 80052dc:	d108      	bne.n	80052f0 <__mdiff+0x28>
 80052de:	4631      	mov	r1, r6
 80052e0:	4638      	mov	r0, r7
 80052e2:	f7ff fdc2 	bl	8004e6a <_Balloc>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	bfa4      	itt	ge
 80052f2:	4623      	movge	r3, r4
 80052f4:	462c      	movge	r4, r5
 80052f6:	4638      	mov	r0, r7
 80052f8:	6861      	ldr	r1, [r4, #4]
 80052fa:	bfa6      	itte	ge
 80052fc:	461d      	movge	r5, r3
 80052fe:	2600      	movge	r6, #0
 8005300:	2601      	movlt	r6, #1
 8005302:	f7ff fdb2 	bl	8004e6a <_Balloc>
 8005306:	f04f 0e00 	mov.w	lr, #0
 800530a:	60c6      	str	r6, [r0, #12]
 800530c:	692b      	ldr	r3, [r5, #16]
 800530e:	6926      	ldr	r6, [r4, #16]
 8005310:	f104 0214 	add.w	r2, r4, #20
 8005314:	f105 0914 	add.w	r9, r5, #20
 8005318:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800531c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005320:	f100 0114 	add.w	r1, r0, #20
 8005324:	f852 ab04 	ldr.w	sl, [r2], #4
 8005328:	f859 5b04 	ldr.w	r5, [r9], #4
 800532c:	fa1f f38a 	uxth.w	r3, sl
 8005330:	4473      	add	r3, lr
 8005332:	b2ac      	uxth	r4, r5
 8005334:	1b1b      	subs	r3, r3, r4
 8005336:	0c2c      	lsrs	r4, r5, #16
 8005338:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800533c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005340:	b29b      	uxth	r3, r3
 8005342:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005346:	45c8      	cmp	r8, r9
 8005348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800534c:	4694      	mov	ip, r2
 800534e:	f841 4b04 	str.w	r4, [r1], #4
 8005352:	d8e7      	bhi.n	8005324 <__mdiff+0x5c>
 8005354:	45bc      	cmp	ip, r7
 8005356:	d304      	bcc.n	8005362 <__mdiff+0x9a>
 8005358:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800535c:	b183      	cbz	r3, 8005380 <__mdiff+0xb8>
 800535e:	6106      	str	r6, [r0, #16]
 8005360:	e7c4      	b.n	80052ec <__mdiff+0x24>
 8005362:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005366:	b2a2      	uxth	r2, r4
 8005368:	4472      	add	r2, lr
 800536a:	1413      	asrs	r3, r2, #16
 800536c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005370:	b292      	uxth	r2, r2
 8005372:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005376:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800537a:	f841 2b04 	str.w	r2, [r1], #4
 800537e:	e7e9      	b.n	8005354 <__mdiff+0x8c>
 8005380:	3e01      	subs	r6, #1
 8005382:	e7e9      	b.n	8005358 <__mdiff+0x90>

08005384 <__d2b>:
 8005384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005388:	461c      	mov	r4, r3
 800538a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800538e:	2101      	movs	r1, #1
 8005390:	4690      	mov	r8, r2
 8005392:	f7ff fd6a 	bl	8004e6a <_Balloc>
 8005396:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800539a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800539e:	4607      	mov	r7, r0
 80053a0:	bb34      	cbnz	r4, 80053f0 <__d2b+0x6c>
 80053a2:	9201      	str	r2, [sp, #4]
 80053a4:	f1b8 0200 	subs.w	r2, r8, #0
 80053a8:	d027      	beq.n	80053fa <__d2b+0x76>
 80053aa:	a802      	add	r0, sp, #8
 80053ac:	f840 2d08 	str.w	r2, [r0, #-8]!
 80053b0:	f7ff fe00 	bl	8004fb4 <__lo0bits>
 80053b4:	9900      	ldr	r1, [sp, #0]
 80053b6:	b1f0      	cbz	r0, 80053f6 <__d2b+0x72>
 80053b8:	9a01      	ldr	r2, [sp, #4]
 80053ba:	f1c0 0320 	rsb	r3, r0, #32
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	430b      	orrs	r3, r1
 80053c4:	40c2      	lsrs	r2, r0
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	9201      	str	r2, [sp, #4]
 80053ca:	9b01      	ldr	r3, [sp, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf14      	ite	ne
 80053d0:	2102      	movne	r1, #2
 80053d2:	2101      	moveq	r1, #1
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	6139      	str	r1, [r7, #16]
 80053d8:	b1c4      	cbz	r4, 800540c <__d2b+0x88>
 80053da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80053de:	4404      	add	r4, r0
 80053e0:	6034      	str	r4, [r6, #0]
 80053e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053e6:	6028      	str	r0, [r5, #0]
 80053e8:	4638      	mov	r0, r7
 80053ea:	b002      	add	sp, #8
 80053ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053f4:	e7d5      	b.n	80053a2 <__d2b+0x1e>
 80053f6:	6179      	str	r1, [r7, #20]
 80053f8:	e7e7      	b.n	80053ca <__d2b+0x46>
 80053fa:	a801      	add	r0, sp, #4
 80053fc:	f7ff fdda 	bl	8004fb4 <__lo0bits>
 8005400:	2101      	movs	r1, #1
 8005402:	9b01      	ldr	r3, [sp, #4]
 8005404:	6139      	str	r1, [r7, #16]
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	3020      	adds	r0, #32
 800540a:	e7e5      	b.n	80053d8 <__d2b+0x54>
 800540c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005410:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005414:	6030      	str	r0, [r6, #0]
 8005416:	6918      	ldr	r0, [r3, #16]
 8005418:	f7ff fdad 	bl	8004f76 <__hi0bits>
 800541c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005420:	e7e1      	b.n	80053e6 <__d2b+0x62>

08005422 <_calloc_r>:
 8005422:	b538      	push	{r3, r4, r5, lr}
 8005424:	fb02 f401 	mul.w	r4, r2, r1
 8005428:	4621      	mov	r1, r4
 800542a:	f000 f855 	bl	80054d8 <_malloc_r>
 800542e:	4605      	mov	r5, r0
 8005430:	b118      	cbz	r0, 800543a <_calloc_r+0x18>
 8005432:	4622      	mov	r2, r4
 8005434:	2100      	movs	r1, #0
 8005436:	f7fe f96b 	bl	8003710 <memset>
 800543a:	4628      	mov	r0, r5
 800543c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005440 <_free_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4605      	mov	r5, r0
 8005444:	2900      	cmp	r1, #0
 8005446:	d043      	beq.n	80054d0 <_free_r+0x90>
 8005448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800544c:	1f0c      	subs	r4, r1, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	bfb8      	it	lt
 8005452:	18e4      	addlt	r4, r4, r3
 8005454:	f000 fc46 	bl	8005ce4 <__malloc_lock>
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <_free_r+0x94>)
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	4610      	mov	r0, r2
 800545e:	b933      	cbnz	r3, 800546e <_free_r+0x2e>
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	6014      	str	r4, [r2, #0]
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800546a:	f000 bc3c 	b.w	8005ce6 <__malloc_unlock>
 800546e:	42a3      	cmp	r3, r4
 8005470:	d90b      	bls.n	800548a <_free_r+0x4a>
 8005472:	6821      	ldr	r1, [r4, #0]
 8005474:	1862      	adds	r2, r4, r1
 8005476:	4293      	cmp	r3, r2
 8005478:	bf01      	itttt	eq
 800547a:	681a      	ldreq	r2, [r3, #0]
 800547c:	685b      	ldreq	r3, [r3, #4]
 800547e:	1852      	addeq	r2, r2, r1
 8005480:	6022      	streq	r2, [r4, #0]
 8005482:	6063      	str	r3, [r4, #4]
 8005484:	6004      	str	r4, [r0, #0]
 8005486:	e7ed      	b.n	8005464 <_free_r+0x24>
 8005488:	4613      	mov	r3, r2
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	b10a      	cbz	r2, 8005492 <_free_r+0x52>
 800548e:	42a2      	cmp	r2, r4
 8005490:	d9fa      	bls.n	8005488 <_free_r+0x48>
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	1858      	adds	r0, r3, r1
 8005496:	42a0      	cmp	r0, r4
 8005498:	d10b      	bne.n	80054b2 <_free_r+0x72>
 800549a:	6820      	ldr	r0, [r4, #0]
 800549c:	4401      	add	r1, r0
 800549e:	1858      	adds	r0, r3, r1
 80054a0:	4282      	cmp	r2, r0
 80054a2:	6019      	str	r1, [r3, #0]
 80054a4:	d1de      	bne.n	8005464 <_free_r+0x24>
 80054a6:	6810      	ldr	r0, [r2, #0]
 80054a8:	6852      	ldr	r2, [r2, #4]
 80054aa:	4401      	add	r1, r0
 80054ac:	6019      	str	r1, [r3, #0]
 80054ae:	605a      	str	r2, [r3, #4]
 80054b0:	e7d8      	b.n	8005464 <_free_r+0x24>
 80054b2:	d902      	bls.n	80054ba <_free_r+0x7a>
 80054b4:	230c      	movs	r3, #12
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	e7d4      	b.n	8005464 <_free_r+0x24>
 80054ba:	6820      	ldr	r0, [r4, #0]
 80054bc:	1821      	adds	r1, r4, r0
 80054be:	428a      	cmp	r2, r1
 80054c0:	bf01      	itttt	eq
 80054c2:	6811      	ldreq	r1, [r2, #0]
 80054c4:	6852      	ldreq	r2, [r2, #4]
 80054c6:	1809      	addeq	r1, r1, r0
 80054c8:	6021      	streq	r1, [r4, #0]
 80054ca:	6062      	str	r2, [r4, #4]
 80054cc:	605c      	str	r4, [r3, #4]
 80054ce:	e7c9      	b.n	8005464 <_free_r+0x24>
 80054d0:	bd38      	pop	{r3, r4, r5, pc}
 80054d2:	bf00      	nop
 80054d4:	20000200 	.word	0x20000200

080054d8 <_malloc_r>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	1ccd      	adds	r5, r1, #3
 80054dc:	f025 0503 	bic.w	r5, r5, #3
 80054e0:	3508      	adds	r5, #8
 80054e2:	2d0c      	cmp	r5, #12
 80054e4:	bf38      	it	cc
 80054e6:	250c      	movcc	r5, #12
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	4606      	mov	r6, r0
 80054ec:	db01      	blt.n	80054f2 <_malloc_r+0x1a>
 80054ee:	42a9      	cmp	r1, r5
 80054f0:	d903      	bls.n	80054fa <_malloc_r+0x22>
 80054f2:	230c      	movs	r3, #12
 80054f4:	6033      	str	r3, [r6, #0]
 80054f6:	2000      	movs	r0, #0
 80054f8:	bd70      	pop	{r4, r5, r6, pc}
 80054fa:	f000 fbf3 	bl	8005ce4 <__malloc_lock>
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <_malloc_r+0xac>)
 8005500:	6814      	ldr	r4, [r2, #0]
 8005502:	4621      	mov	r1, r4
 8005504:	b991      	cbnz	r1, 800552c <_malloc_r+0x54>
 8005506:	4c20      	ldr	r4, [pc, #128]	; (8005588 <_malloc_r+0xb0>)
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	b91b      	cbnz	r3, 8005514 <_malloc_r+0x3c>
 800550c:	4630      	mov	r0, r6
 800550e:	f000 f97b 	bl	8005808 <_sbrk_r>
 8005512:	6020      	str	r0, [r4, #0]
 8005514:	4629      	mov	r1, r5
 8005516:	4630      	mov	r0, r6
 8005518:	f000 f976 	bl	8005808 <_sbrk_r>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d124      	bne.n	800556a <_malloc_r+0x92>
 8005520:	230c      	movs	r3, #12
 8005522:	4630      	mov	r0, r6
 8005524:	6033      	str	r3, [r6, #0]
 8005526:	f000 fbde 	bl	8005ce6 <__malloc_unlock>
 800552a:	e7e4      	b.n	80054f6 <_malloc_r+0x1e>
 800552c:	680b      	ldr	r3, [r1, #0]
 800552e:	1b5b      	subs	r3, r3, r5
 8005530:	d418      	bmi.n	8005564 <_malloc_r+0x8c>
 8005532:	2b0b      	cmp	r3, #11
 8005534:	d90f      	bls.n	8005556 <_malloc_r+0x7e>
 8005536:	600b      	str	r3, [r1, #0]
 8005538:	18cc      	adds	r4, r1, r3
 800553a:	50cd      	str	r5, [r1, r3]
 800553c:	4630      	mov	r0, r6
 800553e:	f000 fbd2 	bl	8005ce6 <__malloc_unlock>
 8005542:	f104 000b 	add.w	r0, r4, #11
 8005546:	1d23      	adds	r3, r4, #4
 8005548:	f020 0007 	bic.w	r0, r0, #7
 800554c:	1ac3      	subs	r3, r0, r3
 800554e:	d0d3      	beq.n	80054f8 <_malloc_r+0x20>
 8005550:	425a      	negs	r2, r3
 8005552:	50e2      	str	r2, [r4, r3]
 8005554:	e7d0      	b.n	80054f8 <_malloc_r+0x20>
 8005556:	684b      	ldr	r3, [r1, #4]
 8005558:	428c      	cmp	r4, r1
 800555a:	bf16      	itet	ne
 800555c:	6063      	strne	r3, [r4, #4]
 800555e:	6013      	streq	r3, [r2, #0]
 8005560:	460c      	movne	r4, r1
 8005562:	e7eb      	b.n	800553c <_malloc_r+0x64>
 8005564:	460c      	mov	r4, r1
 8005566:	6849      	ldr	r1, [r1, #4]
 8005568:	e7cc      	b.n	8005504 <_malloc_r+0x2c>
 800556a:	1cc4      	adds	r4, r0, #3
 800556c:	f024 0403 	bic.w	r4, r4, #3
 8005570:	42a0      	cmp	r0, r4
 8005572:	d005      	beq.n	8005580 <_malloc_r+0xa8>
 8005574:	1a21      	subs	r1, r4, r0
 8005576:	4630      	mov	r0, r6
 8005578:	f000 f946 	bl	8005808 <_sbrk_r>
 800557c:	3001      	adds	r0, #1
 800557e:	d0cf      	beq.n	8005520 <_malloc_r+0x48>
 8005580:	6025      	str	r5, [r4, #0]
 8005582:	e7db      	b.n	800553c <_malloc_r+0x64>
 8005584:	20000200 	.word	0x20000200
 8005588:	20000204 	.word	0x20000204

0800558c <__sfputc_r>:
 800558c:	6893      	ldr	r3, [r2, #8]
 800558e:	b410      	push	{r4}
 8005590:	3b01      	subs	r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	6093      	str	r3, [r2, #8]
 8005596:	da07      	bge.n	80055a8 <__sfputc_r+0x1c>
 8005598:	6994      	ldr	r4, [r2, #24]
 800559a:	42a3      	cmp	r3, r4
 800559c:	db01      	blt.n	80055a2 <__sfputc_r+0x16>
 800559e:	290a      	cmp	r1, #10
 80055a0:	d102      	bne.n	80055a8 <__sfputc_r+0x1c>
 80055a2:	bc10      	pop	{r4}
 80055a4:	f000 b984 	b.w	80058b0 <__swbuf_r>
 80055a8:	6813      	ldr	r3, [r2, #0]
 80055aa:	1c58      	adds	r0, r3, #1
 80055ac:	6010      	str	r0, [r2, #0]
 80055ae:	7019      	strb	r1, [r3, #0]
 80055b0:	4608      	mov	r0, r1
 80055b2:	bc10      	pop	{r4}
 80055b4:	4770      	bx	lr

080055b6 <__sfputs_r>:
 80055b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	18d5      	adds	r5, r2, r3
 80055c0:	42ac      	cmp	r4, r5
 80055c2:	d101      	bne.n	80055c8 <__sfputs_r+0x12>
 80055c4:	2000      	movs	r0, #0
 80055c6:	e007      	b.n	80055d8 <__sfputs_r+0x22>
 80055c8:	463a      	mov	r2, r7
 80055ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7ff ffdc 	bl	800558c <__sfputc_r>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d1f3      	bne.n	80055c0 <__sfputs_r+0xa>
 80055d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055dc <_vfiprintf_r>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	460c      	mov	r4, r1
 80055e2:	b09d      	sub	sp, #116	; 0x74
 80055e4:	4617      	mov	r7, r2
 80055e6:	461d      	mov	r5, r3
 80055e8:	4606      	mov	r6, r0
 80055ea:	b118      	cbz	r0, 80055f4 <_vfiprintf_r+0x18>
 80055ec:	6983      	ldr	r3, [r0, #24]
 80055ee:	b90b      	cbnz	r3, 80055f4 <_vfiprintf_r+0x18>
 80055f0:	f7ff fb82 	bl	8004cf8 <__sinit>
 80055f4:	4b7c      	ldr	r3, [pc, #496]	; (80057e8 <_vfiprintf_r+0x20c>)
 80055f6:	429c      	cmp	r4, r3
 80055f8:	d158      	bne.n	80056ac <_vfiprintf_r+0xd0>
 80055fa:	6874      	ldr	r4, [r6, #4]
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	0718      	lsls	r0, r3, #28
 8005600:	d55e      	bpl.n	80056c0 <_vfiprintf_r+0xe4>
 8005602:	6923      	ldr	r3, [r4, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d05b      	beq.n	80056c0 <_vfiprintf_r+0xe4>
 8005608:	2300      	movs	r3, #0
 800560a:	9309      	str	r3, [sp, #36]	; 0x24
 800560c:	2320      	movs	r3, #32
 800560e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005612:	2330      	movs	r3, #48	; 0x30
 8005614:	f04f 0b01 	mov.w	fp, #1
 8005618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800561c:	9503      	str	r5, [sp, #12]
 800561e:	46b8      	mov	r8, r7
 8005620:	4645      	mov	r5, r8
 8005622:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005626:	b10b      	cbz	r3, 800562c <_vfiprintf_r+0x50>
 8005628:	2b25      	cmp	r3, #37	; 0x25
 800562a:	d154      	bne.n	80056d6 <_vfiprintf_r+0xfa>
 800562c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005630:	d00b      	beq.n	800564a <_vfiprintf_r+0x6e>
 8005632:	4653      	mov	r3, sl
 8005634:	463a      	mov	r2, r7
 8005636:	4621      	mov	r1, r4
 8005638:	4630      	mov	r0, r6
 800563a:	f7ff ffbc 	bl	80055b6 <__sfputs_r>
 800563e:	3001      	adds	r0, #1
 8005640:	f000 80c2 	beq.w	80057c8 <_vfiprintf_r+0x1ec>
 8005644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005646:	4453      	add	r3, sl
 8005648:	9309      	str	r3, [sp, #36]	; 0x24
 800564a:	f898 3000 	ldrb.w	r3, [r8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80ba 	beq.w	80057c8 <_vfiprintf_r+0x1ec>
 8005654:	2300      	movs	r3, #0
 8005656:	f04f 32ff 	mov.w	r2, #4294967295
 800565a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	9307      	str	r3, [sp, #28]
 8005662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005666:	931a      	str	r3, [sp, #104]	; 0x68
 8005668:	46a8      	mov	r8, r5
 800566a:	2205      	movs	r2, #5
 800566c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005670:	485e      	ldr	r0, [pc, #376]	; (80057ec <_vfiprintf_r+0x210>)
 8005672:	f7ff fbe1 	bl	8004e38 <memchr>
 8005676:	9b04      	ldr	r3, [sp, #16]
 8005678:	bb78      	cbnz	r0, 80056da <_vfiprintf_r+0xfe>
 800567a:	06d9      	lsls	r1, r3, #27
 800567c:	bf44      	itt	mi
 800567e:	2220      	movmi	r2, #32
 8005680:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005684:	071a      	lsls	r2, r3, #28
 8005686:	bf44      	itt	mi
 8005688:	222b      	movmi	r2, #43	; 0x2b
 800568a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800568e:	782a      	ldrb	r2, [r5, #0]
 8005690:	2a2a      	cmp	r2, #42	; 0x2a
 8005692:	d02a      	beq.n	80056ea <_vfiprintf_r+0x10e>
 8005694:	46a8      	mov	r8, r5
 8005696:	2000      	movs	r0, #0
 8005698:	250a      	movs	r5, #10
 800569a:	9a07      	ldr	r2, [sp, #28]
 800569c:	4641      	mov	r1, r8
 800569e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056a2:	3b30      	subs	r3, #48	; 0x30
 80056a4:	2b09      	cmp	r3, #9
 80056a6:	d969      	bls.n	800577c <_vfiprintf_r+0x1a0>
 80056a8:	b360      	cbz	r0, 8005704 <_vfiprintf_r+0x128>
 80056aa:	e024      	b.n	80056f6 <_vfiprintf_r+0x11a>
 80056ac:	4b50      	ldr	r3, [pc, #320]	; (80057f0 <_vfiprintf_r+0x214>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d101      	bne.n	80056b6 <_vfiprintf_r+0xda>
 80056b2:	68b4      	ldr	r4, [r6, #8]
 80056b4:	e7a2      	b.n	80055fc <_vfiprintf_r+0x20>
 80056b6:	4b4f      	ldr	r3, [pc, #316]	; (80057f4 <_vfiprintf_r+0x218>)
 80056b8:	429c      	cmp	r4, r3
 80056ba:	bf08      	it	eq
 80056bc:	68f4      	ldreq	r4, [r6, #12]
 80056be:	e79d      	b.n	80055fc <_vfiprintf_r+0x20>
 80056c0:	4621      	mov	r1, r4
 80056c2:	4630      	mov	r0, r6
 80056c4:	f000 f958 	bl	8005978 <__swsetup_r>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d09d      	beq.n	8005608 <_vfiprintf_r+0x2c>
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295
 80056d0:	b01d      	add	sp, #116	; 0x74
 80056d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d6:	46a8      	mov	r8, r5
 80056d8:	e7a2      	b.n	8005620 <_vfiprintf_r+0x44>
 80056da:	4a44      	ldr	r2, [pc, #272]	; (80057ec <_vfiprintf_r+0x210>)
 80056dc:	4645      	mov	r5, r8
 80056de:	1a80      	subs	r0, r0, r2
 80056e0:	fa0b f000 	lsl.w	r0, fp, r0
 80056e4:	4318      	orrs	r0, r3
 80056e6:	9004      	str	r0, [sp, #16]
 80056e8:	e7be      	b.n	8005668 <_vfiprintf_r+0x8c>
 80056ea:	9a03      	ldr	r2, [sp, #12]
 80056ec:	1d11      	adds	r1, r2, #4
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	9103      	str	r1, [sp, #12]
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	db01      	blt.n	80056fa <_vfiprintf_r+0x11e>
 80056f6:	9207      	str	r2, [sp, #28]
 80056f8:	e004      	b.n	8005704 <_vfiprintf_r+0x128>
 80056fa:	4252      	negs	r2, r2
 80056fc:	f043 0302 	orr.w	r3, r3, #2
 8005700:	9207      	str	r2, [sp, #28]
 8005702:	9304      	str	r3, [sp, #16]
 8005704:	f898 3000 	ldrb.w	r3, [r8]
 8005708:	2b2e      	cmp	r3, #46	; 0x2e
 800570a:	d10e      	bne.n	800572a <_vfiprintf_r+0x14e>
 800570c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005710:	2b2a      	cmp	r3, #42	; 0x2a
 8005712:	d138      	bne.n	8005786 <_vfiprintf_r+0x1aa>
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	f108 0802 	add.w	r8, r8, #2
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	9203      	str	r2, [sp, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	bfb8      	it	lt
 8005724:	f04f 33ff 	movlt.w	r3, #4294967295
 8005728:	9305      	str	r3, [sp, #20]
 800572a:	4d33      	ldr	r5, [pc, #204]	; (80057f8 <_vfiprintf_r+0x21c>)
 800572c:	2203      	movs	r2, #3
 800572e:	f898 1000 	ldrb.w	r1, [r8]
 8005732:	4628      	mov	r0, r5
 8005734:	f7ff fb80 	bl	8004e38 <memchr>
 8005738:	b140      	cbz	r0, 800574c <_vfiprintf_r+0x170>
 800573a:	2340      	movs	r3, #64	; 0x40
 800573c:	1b40      	subs	r0, r0, r5
 800573e:	fa03 f000 	lsl.w	r0, r3, r0
 8005742:	9b04      	ldr	r3, [sp, #16]
 8005744:	f108 0801 	add.w	r8, r8, #1
 8005748:	4303      	orrs	r3, r0
 800574a:	9304      	str	r3, [sp, #16]
 800574c:	f898 1000 	ldrb.w	r1, [r8]
 8005750:	2206      	movs	r2, #6
 8005752:	482a      	ldr	r0, [pc, #168]	; (80057fc <_vfiprintf_r+0x220>)
 8005754:	f108 0701 	add.w	r7, r8, #1
 8005758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800575c:	f7ff fb6c 	bl	8004e38 <memchr>
 8005760:	2800      	cmp	r0, #0
 8005762:	d037      	beq.n	80057d4 <_vfiprintf_r+0x1f8>
 8005764:	4b26      	ldr	r3, [pc, #152]	; (8005800 <_vfiprintf_r+0x224>)
 8005766:	bb1b      	cbnz	r3, 80057b0 <_vfiprintf_r+0x1d4>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	3307      	adds	r3, #7
 800576c:	f023 0307 	bic.w	r3, r3, #7
 8005770:	3308      	adds	r3, #8
 8005772:	9303      	str	r3, [sp, #12]
 8005774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005776:	444b      	add	r3, r9
 8005778:	9309      	str	r3, [sp, #36]	; 0x24
 800577a:	e750      	b.n	800561e <_vfiprintf_r+0x42>
 800577c:	fb05 3202 	mla	r2, r5, r2, r3
 8005780:	2001      	movs	r0, #1
 8005782:	4688      	mov	r8, r1
 8005784:	e78a      	b.n	800569c <_vfiprintf_r+0xc0>
 8005786:	2300      	movs	r3, #0
 8005788:	250a      	movs	r5, #10
 800578a:	4619      	mov	r1, r3
 800578c:	f108 0801 	add.w	r8, r8, #1
 8005790:	9305      	str	r3, [sp, #20]
 8005792:	4640      	mov	r0, r8
 8005794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005798:	3a30      	subs	r2, #48	; 0x30
 800579a:	2a09      	cmp	r2, #9
 800579c:	d903      	bls.n	80057a6 <_vfiprintf_r+0x1ca>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0c3      	beq.n	800572a <_vfiprintf_r+0x14e>
 80057a2:	9105      	str	r1, [sp, #20]
 80057a4:	e7c1      	b.n	800572a <_vfiprintf_r+0x14e>
 80057a6:	fb05 2101 	mla	r1, r5, r1, r2
 80057aa:	2301      	movs	r3, #1
 80057ac:	4680      	mov	r8, r0
 80057ae:	e7f0      	b.n	8005792 <_vfiprintf_r+0x1b6>
 80057b0:	ab03      	add	r3, sp, #12
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	4622      	mov	r2, r4
 80057b6:	4b13      	ldr	r3, [pc, #76]	; (8005804 <_vfiprintf_r+0x228>)
 80057b8:	a904      	add	r1, sp, #16
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7fe f842 	bl	8003844 <_printf_float>
 80057c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057c4:	4681      	mov	r9, r0
 80057c6:	d1d5      	bne.n	8005774 <_vfiprintf_r+0x198>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	065b      	lsls	r3, r3, #25
 80057cc:	f53f af7e 	bmi.w	80056cc <_vfiprintf_r+0xf0>
 80057d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d2:	e77d      	b.n	80056d0 <_vfiprintf_r+0xf4>
 80057d4:	ab03      	add	r3, sp, #12
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	4622      	mov	r2, r4
 80057da:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <_vfiprintf_r+0x228>)
 80057dc:	a904      	add	r1, sp, #16
 80057de:	4630      	mov	r0, r6
 80057e0:	f7fe fadc 	bl	8003d9c <_printf_i>
 80057e4:	e7ec      	b.n	80057c0 <_vfiprintf_r+0x1e4>
 80057e6:	bf00      	nop
 80057e8:	08005e40 	.word	0x08005e40
 80057ec:	08005f7c 	.word	0x08005f7c
 80057f0:	08005e60 	.word	0x08005e60
 80057f4:	08005e20 	.word	0x08005e20
 80057f8:	08005f82 	.word	0x08005f82
 80057fc:	08005f86 	.word	0x08005f86
 8005800:	08003845 	.word	0x08003845
 8005804:	080055b7 	.word	0x080055b7

08005808 <_sbrk_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	2300      	movs	r3, #0
 800580c:	4c05      	ldr	r4, [pc, #20]	; (8005824 <_sbrk_r+0x1c>)
 800580e:	4605      	mov	r5, r0
 8005810:	4608      	mov	r0, r1
 8005812:	6023      	str	r3, [r4, #0]
 8005814:	f7fb fbac 	bl	8000f70 <_sbrk>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_sbrk_r+0x1a>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	b103      	cbz	r3, 8005822 <_sbrk_r+0x1a>
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	2000027c 	.word	0x2000027c

08005828 <__sread>:
 8005828:	b510      	push	{r4, lr}
 800582a:	460c      	mov	r4, r1
 800582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005830:	f000 fa5a 	bl	8005ce8 <_read_r>
 8005834:	2800      	cmp	r0, #0
 8005836:	bfab      	itete	ge
 8005838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800583a:	89a3      	ldrhlt	r3, [r4, #12]
 800583c:	181b      	addge	r3, r3, r0
 800583e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005842:	bfac      	ite	ge
 8005844:	6563      	strge	r3, [r4, #84]	; 0x54
 8005846:	81a3      	strhlt	r3, [r4, #12]
 8005848:	bd10      	pop	{r4, pc}

0800584a <__swrite>:
 800584a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584e:	461f      	mov	r7, r3
 8005850:	898b      	ldrh	r3, [r1, #12]
 8005852:	4605      	mov	r5, r0
 8005854:	05db      	lsls	r3, r3, #23
 8005856:	460c      	mov	r4, r1
 8005858:	4616      	mov	r6, r2
 800585a:	d505      	bpl.n	8005868 <__swrite+0x1e>
 800585c:	2302      	movs	r3, #2
 800585e:	2200      	movs	r2, #0
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	f000 f9b6 	bl	8005bd4 <_lseek_r>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	4632      	mov	r2, r6
 800586c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005876:	463b      	mov	r3, r7
 8005878:	4628      	mov	r0, r5
 800587a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	f000 b869 	b.w	8005954 <_write_r>

08005882 <__sseek>:
 8005882:	b510      	push	{r4, lr}
 8005884:	460c      	mov	r4, r1
 8005886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588a:	f000 f9a3 	bl	8005bd4 <_lseek_r>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	bf15      	itete	ne
 8005894:	6560      	strne	r0, [r4, #84]	; 0x54
 8005896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800589a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800589e:	81a3      	strheq	r3, [r4, #12]
 80058a0:	bf18      	it	ne
 80058a2:	81a3      	strhne	r3, [r4, #12]
 80058a4:	bd10      	pop	{r4, pc}

080058a6 <__sclose>:
 80058a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058aa:	f000 b8d3 	b.w	8005a54 <_close_r>
	...

080058b0 <__swbuf_r>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	460e      	mov	r6, r1
 80058b4:	4614      	mov	r4, r2
 80058b6:	4605      	mov	r5, r0
 80058b8:	b118      	cbz	r0, 80058c2 <__swbuf_r+0x12>
 80058ba:	6983      	ldr	r3, [r0, #24]
 80058bc:	b90b      	cbnz	r3, 80058c2 <__swbuf_r+0x12>
 80058be:	f7ff fa1b 	bl	8004cf8 <__sinit>
 80058c2:	4b21      	ldr	r3, [pc, #132]	; (8005948 <__swbuf_r+0x98>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d12a      	bne.n	800591e <__swbuf_r+0x6e>
 80058c8:	686c      	ldr	r4, [r5, #4]
 80058ca:	69a3      	ldr	r3, [r4, #24]
 80058cc:	60a3      	str	r3, [r4, #8]
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	071a      	lsls	r2, r3, #28
 80058d2:	d52e      	bpl.n	8005932 <__swbuf_r+0x82>
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	b363      	cbz	r3, 8005932 <__swbuf_r+0x82>
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	b2f6      	uxtb	r6, r6
 80058de:	1ac0      	subs	r0, r0, r3
 80058e0:	6963      	ldr	r3, [r4, #20]
 80058e2:	4637      	mov	r7, r6
 80058e4:	4283      	cmp	r3, r0
 80058e6:	dc04      	bgt.n	80058f2 <__swbuf_r+0x42>
 80058e8:	4621      	mov	r1, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f948 	bl	8005b80 <_fflush_r>
 80058f0:	bb28      	cbnz	r0, 800593e <__swbuf_r+0x8e>
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	3001      	adds	r0, #1
 80058f6:	3b01      	subs	r3, #1
 80058f8:	60a3      	str	r3, [r4, #8]
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	6022      	str	r2, [r4, #0]
 8005900:	701e      	strb	r6, [r3, #0]
 8005902:	6963      	ldr	r3, [r4, #20]
 8005904:	4283      	cmp	r3, r0
 8005906:	d004      	beq.n	8005912 <__swbuf_r+0x62>
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	07db      	lsls	r3, r3, #31
 800590c:	d519      	bpl.n	8005942 <__swbuf_r+0x92>
 800590e:	2e0a      	cmp	r6, #10
 8005910:	d117      	bne.n	8005942 <__swbuf_r+0x92>
 8005912:	4621      	mov	r1, r4
 8005914:	4628      	mov	r0, r5
 8005916:	f000 f933 	bl	8005b80 <_fflush_r>
 800591a:	b190      	cbz	r0, 8005942 <__swbuf_r+0x92>
 800591c:	e00f      	b.n	800593e <__swbuf_r+0x8e>
 800591e:	4b0b      	ldr	r3, [pc, #44]	; (800594c <__swbuf_r+0x9c>)
 8005920:	429c      	cmp	r4, r3
 8005922:	d101      	bne.n	8005928 <__swbuf_r+0x78>
 8005924:	68ac      	ldr	r4, [r5, #8]
 8005926:	e7d0      	b.n	80058ca <__swbuf_r+0x1a>
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <__swbuf_r+0xa0>)
 800592a:	429c      	cmp	r4, r3
 800592c:	bf08      	it	eq
 800592e:	68ec      	ldreq	r4, [r5, #12]
 8005930:	e7cb      	b.n	80058ca <__swbuf_r+0x1a>
 8005932:	4621      	mov	r1, r4
 8005934:	4628      	mov	r0, r5
 8005936:	f000 f81f 	bl	8005978 <__swsetup_r>
 800593a:	2800      	cmp	r0, #0
 800593c:	d0cc      	beq.n	80058d8 <__swbuf_r+0x28>
 800593e:	f04f 37ff 	mov.w	r7, #4294967295
 8005942:	4638      	mov	r0, r7
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005946:	bf00      	nop
 8005948:	08005e40 	.word	0x08005e40
 800594c:	08005e60 	.word	0x08005e60
 8005950:	08005e20 	.word	0x08005e20

08005954 <_write_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4605      	mov	r5, r0
 8005958:	4608      	mov	r0, r1
 800595a:	4611      	mov	r1, r2
 800595c:	2200      	movs	r2, #0
 800595e:	4c05      	ldr	r4, [pc, #20]	; (8005974 <_write_r+0x20>)
 8005960:	6022      	str	r2, [r4, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	f7fb fa50 	bl	8000e08 <_write>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d102      	bne.n	8005972 <_write_r+0x1e>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	b103      	cbz	r3, 8005972 <_write_r+0x1e>
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	2000027c 	.word	0x2000027c

08005978 <__swsetup_r>:
 8005978:	4b32      	ldr	r3, [pc, #200]	; (8005a44 <__swsetup_r+0xcc>)
 800597a:	b570      	push	{r4, r5, r6, lr}
 800597c:	681d      	ldr	r5, [r3, #0]
 800597e:	4606      	mov	r6, r0
 8005980:	460c      	mov	r4, r1
 8005982:	b125      	cbz	r5, 800598e <__swsetup_r+0x16>
 8005984:	69ab      	ldr	r3, [r5, #24]
 8005986:	b913      	cbnz	r3, 800598e <__swsetup_r+0x16>
 8005988:	4628      	mov	r0, r5
 800598a:	f7ff f9b5 	bl	8004cf8 <__sinit>
 800598e:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <__swsetup_r+0xd0>)
 8005990:	429c      	cmp	r4, r3
 8005992:	d10f      	bne.n	80059b4 <__swsetup_r+0x3c>
 8005994:	686c      	ldr	r4, [r5, #4]
 8005996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599a:	b29a      	uxth	r2, r3
 800599c:	0715      	lsls	r5, r2, #28
 800599e:	d42c      	bmi.n	80059fa <__swsetup_r+0x82>
 80059a0:	06d0      	lsls	r0, r2, #27
 80059a2:	d411      	bmi.n	80059c8 <__swsetup_r+0x50>
 80059a4:	2209      	movs	r2, #9
 80059a6:	6032      	str	r2, [r6, #0]
 80059a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	f04f 30ff 	mov.w	r0, #4294967295
 80059b2:	e03e      	b.n	8005a32 <__swsetup_r+0xba>
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <__swsetup_r+0xd4>)
 80059b6:	429c      	cmp	r4, r3
 80059b8:	d101      	bne.n	80059be <__swsetup_r+0x46>
 80059ba:	68ac      	ldr	r4, [r5, #8]
 80059bc:	e7eb      	b.n	8005996 <__swsetup_r+0x1e>
 80059be:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <__swsetup_r+0xd8>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	bf08      	it	eq
 80059c4:	68ec      	ldreq	r4, [r5, #12]
 80059c6:	e7e6      	b.n	8005996 <__swsetup_r+0x1e>
 80059c8:	0751      	lsls	r1, r2, #29
 80059ca:	d512      	bpl.n	80059f2 <__swsetup_r+0x7a>
 80059cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ce:	b141      	cbz	r1, 80059e2 <__swsetup_r+0x6a>
 80059d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059d4:	4299      	cmp	r1, r3
 80059d6:	d002      	beq.n	80059de <__swsetup_r+0x66>
 80059d8:	4630      	mov	r0, r6
 80059da:	f7ff fd31 	bl	8005440 <_free_r>
 80059de:	2300      	movs	r3, #0
 80059e0:	6363      	str	r3, [r4, #52]	; 0x34
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	2300      	movs	r3, #0
 80059ec:	6063      	str	r3, [r4, #4]
 80059ee:	6923      	ldr	r3, [r4, #16]
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	f043 0308 	orr.w	r3, r3, #8
 80059f8:	81a3      	strh	r3, [r4, #12]
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	b94b      	cbnz	r3, 8005a12 <__swsetup_r+0x9a>
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a08:	d003      	beq.n	8005a12 <__swsetup_r+0x9a>
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f000 f917 	bl	8005c40 <__smakebuf_r>
 8005a12:	89a2      	ldrh	r2, [r4, #12]
 8005a14:	f012 0301 	ands.w	r3, r2, #1
 8005a18:	d00c      	beq.n	8005a34 <__swsetup_r+0xbc>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	6963      	ldr	r3, [r4, #20]
 8005a20:	425b      	negs	r3, r3
 8005a22:	61a3      	str	r3, [r4, #24]
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	b953      	cbnz	r3, 8005a3e <__swsetup_r+0xc6>
 8005a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005a30:	d1ba      	bne.n	80059a8 <__swsetup_r+0x30>
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
 8005a34:	0792      	lsls	r2, r2, #30
 8005a36:	bf58      	it	pl
 8005a38:	6963      	ldrpl	r3, [r4, #20]
 8005a3a:	60a3      	str	r3, [r4, #8]
 8005a3c:	e7f2      	b.n	8005a24 <__swsetup_r+0xac>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	e7f7      	b.n	8005a32 <__swsetup_r+0xba>
 8005a42:	bf00      	nop
 8005a44:	2000000c 	.word	0x2000000c
 8005a48:	08005e40 	.word	0x08005e40
 8005a4c:	08005e60 	.word	0x08005e60
 8005a50:	08005e20 	.word	0x08005e20

08005a54 <_close_r>:
 8005a54:	b538      	push	{r3, r4, r5, lr}
 8005a56:	2300      	movs	r3, #0
 8005a58:	4c05      	ldr	r4, [pc, #20]	; (8005a70 <_close_r+0x1c>)
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	f7fb fab2 	bl	8000fc8 <_close>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_close_r+0x1a>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_close_r+0x1a>
 8005a6c:	602b      	str	r3, [r5, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	2000027c 	.word	0x2000027c

08005a74 <__sflush_r>:
 8005a74:	898a      	ldrh	r2, [r1, #12]
 8005a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	0710      	lsls	r0, r2, #28
 8005a7e:	460c      	mov	r4, r1
 8005a80:	d458      	bmi.n	8005b34 <__sflush_r+0xc0>
 8005a82:	684b      	ldr	r3, [r1, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	dc05      	bgt.n	8005a94 <__sflush_r+0x20>
 8005a88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dc02      	bgt.n	8005a94 <__sflush_r+0x20>
 8005a8e:	2000      	movs	r0, #0
 8005a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	d0f9      	beq.n	8005a8e <__sflush_r+0x1a>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005aa0:	682f      	ldr	r7, [r5, #0]
 8005aa2:	6a21      	ldr	r1, [r4, #32]
 8005aa4:	602b      	str	r3, [r5, #0]
 8005aa6:	d032      	beq.n	8005b0e <__sflush_r+0x9a>
 8005aa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	075a      	lsls	r2, r3, #29
 8005aae:	d505      	bpl.n	8005abc <__sflush_r+0x48>
 8005ab0:	6863      	ldr	r3, [r4, #4]
 8005ab2:	1ac0      	subs	r0, r0, r3
 8005ab4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ab6:	b10b      	cbz	r3, 8005abc <__sflush_r+0x48>
 8005ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005aba:	1ac0      	subs	r0, r0, r3
 8005abc:	2300      	movs	r3, #0
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ac2:	6a21      	ldr	r1, [r4, #32]
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	47b0      	blx	r6
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	d106      	bne.n	8005adc <__sflush_r+0x68>
 8005ace:	6829      	ldr	r1, [r5, #0]
 8005ad0:	291d      	cmp	r1, #29
 8005ad2:	d848      	bhi.n	8005b66 <__sflush_r+0xf2>
 8005ad4:	4a29      	ldr	r2, [pc, #164]	; (8005b7c <__sflush_r+0x108>)
 8005ad6:	40ca      	lsrs	r2, r1
 8005ad8:	07d6      	lsls	r6, r2, #31
 8005ada:	d544      	bpl.n	8005b66 <__sflush_r+0xf2>
 8005adc:	2200      	movs	r2, #0
 8005ade:	6062      	str	r2, [r4, #4]
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	04d9      	lsls	r1, r3, #19
 8005ae4:	6022      	str	r2, [r4, #0]
 8005ae6:	d504      	bpl.n	8005af2 <__sflush_r+0x7e>
 8005ae8:	1c42      	adds	r2, r0, #1
 8005aea:	d101      	bne.n	8005af0 <__sflush_r+0x7c>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b903      	cbnz	r3, 8005af2 <__sflush_r+0x7e>
 8005af0:	6560      	str	r0, [r4, #84]	; 0x54
 8005af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005af4:	602f      	str	r7, [r5, #0]
 8005af6:	2900      	cmp	r1, #0
 8005af8:	d0c9      	beq.n	8005a8e <__sflush_r+0x1a>
 8005afa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005afe:	4299      	cmp	r1, r3
 8005b00:	d002      	beq.n	8005b08 <__sflush_r+0x94>
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7ff fc9c 	bl	8005440 <_free_r>
 8005b08:	2000      	movs	r0, #0
 8005b0a:	6360      	str	r0, [r4, #52]	; 0x34
 8005b0c:	e7c0      	b.n	8005a90 <__sflush_r+0x1c>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b0      	blx	r6
 8005b14:	1c41      	adds	r1, r0, #1
 8005b16:	d1c8      	bne.n	8005aaa <__sflush_r+0x36>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0c5      	beq.n	8005aaa <__sflush_r+0x36>
 8005b1e:	2b1d      	cmp	r3, #29
 8005b20:	d001      	beq.n	8005b26 <__sflush_r+0xb2>
 8005b22:	2b16      	cmp	r3, #22
 8005b24:	d101      	bne.n	8005b2a <__sflush_r+0xb6>
 8005b26:	602f      	str	r7, [r5, #0]
 8005b28:	e7b1      	b.n	8005a8e <__sflush_r+0x1a>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	e7ad      	b.n	8005a90 <__sflush_r+0x1c>
 8005b34:	690f      	ldr	r7, [r1, #16]
 8005b36:	2f00      	cmp	r7, #0
 8005b38:	d0a9      	beq.n	8005a8e <__sflush_r+0x1a>
 8005b3a:	0793      	lsls	r3, r2, #30
 8005b3c:	bf18      	it	ne
 8005b3e:	2300      	movne	r3, #0
 8005b40:	680e      	ldr	r6, [r1, #0]
 8005b42:	bf08      	it	eq
 8005b44:	694b      	ldreq	r3, [r1, #20]
 8005b46:	eba6 0807 	sub.w	r8, r6, r7
 8005b4a:	600f      	str	r7, [r1, #0]
 8005b4c:	608b      	str	r3, [r1, #8]
 8005b4e:	f1b8 0f00 	cmp.w	r8, #0
 8005b52:	dd9c      	ble.n	8005a8e <__sflush_r+0x1a>
 8005b54:	4643      	mov	r3, r8
 8005b56:	463a      	mov	r2, r7
 8005b58:	6a21      	ldr	r1, [r4, #32]
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b5e:	47b0      	blx	r6
 8005b60:	2800      	cmp	r0, #0
 8005b62:	dc06      	bgt.n	8005b72 <__sflush_r+0xfe>
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	e78e      	b.n	8005a90 <__sflush_r+0x1c>
 8005b72:	4407      	add	r7, r0
 8005b74:	eba8 0800 	sub.w	r8, r8, r0
 8005b78:	e7e9      	b.n	8005b4e <__sflush_r+0xda>
 8005b7a:	bf00      	nop
 8005b7c:	20400001 	.word	0x20400001

08005b80 <_fflush_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	690b      	ldr	r3, [r1, #16]
 8005b84:	4605      	mov	r5, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	b1db      	cbz	r3, 8005bc2 <_fflush_r+0x42>
 8005b8a:	b118      	cbz	r0, 8005b94 <_fflush_r+0x14>
 8005b8c:	6983      	ldr	r3, [r0, #24]
 8005b8e:	b90b      	cbnz	r3, 8005b94 <_fflush_r+0x14>
 8005b90:	f7ff f8b2 	bl	8004cf8 <__sinit>
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <_fflush_r+0x48>)
 8005b96:	429c      	cmp	r4, r3
 8005b98:	d109      	bne.n	8005bae <_fflush_r+0x2e>
 8005b9a:	686c      	ldr	r4, [r5, #4]
 8005b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba0:	b17b      	cbz	r3, 8005bc2 <_fflush_r+0x42>
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005baa:	f7ff bf63 	b.w	8005a74 <__sflush_r>
 8005bae:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <_fflush_r+0x4c>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	d101      	bne.n	8005bb8 <_fflush_r+0x38>
 8005bb4:	68ac      	ldr	r4, [r5, #8]
 8005bb6:	e7f1      	b.n	8005b9c <_fflush_r+0x1c>
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <_fflush_r+0x50>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	bf08      	it	eq
 8005bbe:	68ec      	ldreq	r4, [r5, #12]
 8005bc0:	e7ec      	b.n	8005b9c <_fflush_r+0x1c>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	bd38      	pop	{r3, r4, r5, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08005e40 	.word	0x08005e40
 8005bcc:	08005e60 	.word	0x08005e60
 8005bd0:	08005e20 	.word	0x08005e20

08005bd4 <_lseek_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4c05      	ldr	r4, [pc, #20]	; (8005bf4 <_lseek_r+0x20>)
 8005be0:	6022      	str	r2, [r4, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f7fb fa14 	bl	8001010 <_lseek>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_lseek_r+0x1e>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_lseek_r+0x1e>
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	2000027c 	.word	0x2000027c

08005bf8 <__swhatbuf_r>:
 8005bf8:	b570      	push	{r4, r5, r6, lr}
 8005bfa:	460e      	mov	r6, r1
 8005bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c00:	b096      	sub	sp, #88	; 0x58
 8005c02:	2900      	cmp	r1, #0
 8005c04:	4614      	mov	r4, r2
 8005c06:	461d      	mov	r5, r3
 8005c08:	da07      	bge.n	8005c1a <__swhatbuf_r+0x22>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	602b      	str	r3, [r5, #0]
 8005c0e:	89b3      	ldrh	r3, [r6, #12]
 8005c10:	061a      	lsls	r2, r3, #24
 8005c12:	d410      	bmi.n	8005c36 <__swhatbuf_r+0x3e>
 8005c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c18:	e00e      	b.n	8005c38 <__swhatbuf_r+0x40>
 8005c1a:	466a      	mov	r2, sp
 8005c1c:	f000 f884 	bl	8005d28 <_fstat_r>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	dbf2      	blt.n	8005c0a <__swhatbuf_r+0x12>
 8005c24:	9a01      	ldr	r2, [sp, #4]
 8005c26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c2e:	425a      	negs	r2, r3
 8005c30:	415a      	adcs	r2, r3
 8005c32:	602a      	str	r2, [r5, #0]
 8005c34:	e7ee      	b.n	8005c14 <__swhatbuf_r+0x1c>
 8005c36:	2340      	movs	r3, #64	; 0x40
 8005c38:	2000      	movs	r0, #0
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	b016      	add	sp, #88	; 0x58
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}

08005c40 <__smakebuf_r>:
 8005c40:	898b      	ldrh	r3, [r1, #12]
 8005c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c44:	079d      	lsls	r5, r3, #30
 8005c46:	4606      	mov	r6, r0
 8005c48:	460c      	mov	r4, r1
 8005c4a:	d507      	bpl.n	8005c5c <__smakebuf_r+0x1c>
 8005c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	2301      	movs	r3, #1
 8005c56:	6163      	str	r3, [r4, #20]
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	ab01      	add	r3, sp, #4
 8005c5e:	466a      	mov	r2, sp
 8005c60:	f7ff ffca 	bl	8005bf8 <__swhatbuf_r>
 8005c64:	9900      	ldr	r1, [sp, #0]
 8005c66:	4605      	mov	r5, r0
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff fc35 	bl	80054d8 <_malloc_r>
 8005c6e:	b948      	cbnz	r0, 8005c84 <__smakebuf_r+0x44>
 8005c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c74:	059a      	lsls	r2, r3, #22
 8005c76:	d4ef      	bmi.n	8005c58 <__smakebuf_r+0x18>
 8005c78:	f023 0303 	bic.w	r3, r3, #3
 8005c7c:	f043 0302 	orr.w	r3, r3, #2
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	e7e3      	b.n	8005c4c <__smakebuf_r+0xc>
 8005c84:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <__smakebuf_r+0x7c>)
 8005c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	6020      	str	r0, [r4, #0]
 8005c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c90:	81a3      	strh	r3, [r4, #12]
 8005c92:	9b00      	ldr	r3, [sp, #0]
 8005c94:	6120      	str	r0, [r4, #16]
 8005c96:	6163      	str	r3, [r4, #20]
 8005c98:	9b01      	ldr	r3, [sp, #4]
 8005c9a:	b15b      	cbz	r3, 8005cb4 <__smakebuf_r+0x74>
 8005c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f000 f853 	bl	8005d4c <_isatty_r>
 8005ca6:	b128      	cbz	r0, 8005cb4 <__smakebuf_r+0x74>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	f043 0301 	orr.w	r3, r3, #1
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	431d      	orrs	r5, r3
 8005cb8:	81a5      	strh	r5, [r4, #12]
 8005cba:	e7cd      	b.n	8005c58 <__smakebuf_r+0x18>
 8005cbc:	08004cc1 	.word	0x08004cc1

08005cc0 <__ascii_mbtowc>:
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	b901      	cbnz	r1, 8005cc6 <__ascii_mbtowc+0x6>
 8005cc4:	a901      	add	r1, sp, #4
 8005cc6:	b142      	cbz	r2, 8005cda <__ascii_mbtowc+0x1a>
 8005cc8:	b14b      	cbz	r3, 8005cde <__ascii_mbtowc+0x1e>
 8005cca:	7813      	ldrb	r3, [r2, #0]
 8005ccc:	600b      	str	r3, [r1, #0]
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	1c10      	adds	r0, r2, #0
 8005cd2:	bf18      	it	ne
 8005cd4:	2001      	movne	r0, #1
 8005cd6:	b002      	add	sp, #8
 8005cd8:	4770      	bx	lr
 8005cda:	4610      	mov	r0, r2
 8005cdc:	e7fb      	b.n	8005cd6 <__ascii_mbtowc+0x16>
 8005cde:	f06f 0001 	mvn.w	r0, #1
 8005ce2:	e7f8      	b.n	8005cd6 <__ascii_mbtowc+0x16>

08005ce4 <__malloc_lock>:
 8005ce4:	4770      	bx	lr

08005ce6 <__malloc_unlock>:
 8005ce6:	4770      	bx	lr

08005ce8 <_read_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4605      	mov	r5, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4c05      	ldr	r4, [pc, #20]	; (8005d08 <_read_r+0x20>)
 8005cf4:	6022      	str	r2, [r4, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fb f91c 	bl	8000f34 <_read>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_read_r+0x1e>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_read_r+0x1e>
 8005d04:	602b      	str	r3, [r5, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	2000027c 	.word	0x2000027c

08005d0c <__ascii_wctomb>:
 8005d0c:	b149      	cbz	r1, 8005d22 <__ascii_wctomb+0x16>
 8005d0e:	2aff      	cmp	r2, #255	; 0xff
 8005d10:	bf8b      	itete	hi
 8005d12:	238a      	movhi	r3, #138	; 0x8a
 8005d14:	700a      	strbls	r2, [r1, #0]
 8005d16:	6003      	strhi	r3, [r0, #0]
 8005d18:	2001      	movls	r0, #1
 8005d1a:	bf88      	it	hi
 8005d1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005d20:	4770      	bx	lr
 8005d22:	4608      	mov	r0, r1
 8005d24:	4770      	bx	lr
	...

08005d28 <_fstat_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	4c06      	ldr	r4, [pc, #24]	; (8005d48 <_fstat_r+0x20>)
 8005d2e:	4605      	mov	r5, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	f7fb f952 	bl	8000fde <_fstat>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d102      	bne.n	8005d44 <_fstat_r+0x1c>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	b103      	cbz	r3, 8005d44 <_fstat_r+0x1c>
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	bd38      	pop	{r3, r4, r5, pc}
 8005d46:	bf00      	nop
 8005d48:	2000027c 	.word	0x2000027c

08005d4c <_isatty_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	2300      	movs	r3, #0
 8005d50:	4c05      	ldr	r4, [pc, #20]	; (8005d68 <_isatty_r+0x1c>)
 8005d52:	4605      	mov	r5, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	f7fb f950 	bl	8000ffc <_isatty>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_isatty_r+0x1a>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_isatty_r+0x1a>
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	2000027c 	.word	0x2000027c

08005d6c <_init>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr

08005d78 <_fini>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr
